[{"function": {"description": "Get the real-time weather conditions of a specified city.", "name": "getRealtimeCity", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'XML', 'CSV', 'JSON', and the default is 'JSON'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for a specified city.", "name": "getHistoricalCity", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "endDate": {"description": "The end date, in the format 'YYYY-MM-DD'.", "type": "string"}, "format": {"description": "The format of the returned data, supports 'XML', 'CSV', 'JSON', default is 'JSON'.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the future weather forecast for a specified city.", "name": "getCityForecast", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'XML', 'CSV', 'JSON', default is 'JSON'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time Air Quality Index (AQI) data for a specified city.", "name": "getRealtimeCityAQI", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "format": {"description": "The format of the returned data. Supports 'XML', 'CSV', 'JSON'. The default is 'JSON'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the historical air quality index (AQI) data for a specified city.", "name": "getHistoricalCityAQI", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'XML', 'CSV', 'JSON', default is 'JSON'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the future air quality forecast for a specified city.", "name": "getCityAQIForecast", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'XML', 'CSV', 'JSON', with the default being 'JSON'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the performance events in the specified city.", "name": "getCityShow", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of the specified performance event.", "name": "getShowDetail", "parameters": {"properties": {"activity_id": {"description": "Activity ID.", "type": "string"}}, "required": ["activity_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Obtain survey data on population and employment from the Swiss government.", "name": "getPopulationAndEmploymentData", "parameters": {"properties": {"ageGroup": {"description": "Age group. If not filled, data for all age groups will be returned by default.", "items": {"type": "integer"}, "type": "array"}, "region": {"description": "The region to be queried. The default is the whole of Switzerland.", "type": "string"}, "year": {"description": "The year to be queried.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about schools and universities in Switzerland.", "name": "getSchoolsAndUniversitiesInfo", "parameters": {"properties": {"keywords": {"description": "A list of course types. Keywords can be passed in.", "items": {"type": "string"}, "type": "array"}, "language": {"description": "The language of instruction, such as 'German', 'French', 'Italian', etc. Defaults to all languages.", "enum": ["German", "French", "Italian"], "type": "string"}, "location": {"description": "The region where the school is located. Defaults to the whole of Switzerland.", "type": "string"}, "type": {"description": "The type of school, such as 'primary','secondary', 'university', etc.", "enum": ["primary", "secondary", "university"], "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the weather forecast in Switzerland.", "name": "getWeatherForecast", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "date": {"description": "The forecast date, in the format of 'YYYY-MM-DD'. The default is the current date.", "type": "string"}, "includeHourly": {"description": "Whether to include hourly forecasts. The default is false.", "type": "boolean"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about Swiss parliamentary debates.", "name": "getParliamentDebates", "parameters": {"properties": {"dateRange": {"description": "The date range of the debates, defaulting to the current legislative period.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "language": {"description": "The language of the debate records, such as 'German', 'French', 'Italian', etc., defaulting to 'German'.", "enum": ["German", "French", "Italian"], "type": "string"}, "topic": {"description": "The topic of the debate, defaulting to all topics.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the user's YNAB budget data, including accounts, categories, payees, transactions, and budgets.", "name": "getBudgets", "parameters": {"properties": {"last_knowledge_of_server": {"description": "The server knowledge point for synchronization, with a default value of 0", "type": "integer"}, "user_id": {"description": "The user's unique identifier", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new transaction record in YNAB.", "name": "createTransaction", "parameters": {"properties": {"account_id": {"description": "The ID of the account to which the transaction belongs", "type": "string"}, "amount": {"description": "The transaction amount, in the user's currency unit", "type": "float"}, "approved": {"description": "Whether the transaction is approved, default is false", "type": "boolean"}, "category_name": {"description": "The category name, default is empty", "type": "string"}, "cleared": {"description": "The transaction status. Optional values: 'cleared', 'uncleared','reconciled'. Default is 'uncleared'", "type": "string"}, "date": {"description": "The transaction date, in the format of YYYY-MM-DD", "type": "string"}, "memo": {"description": "The transaction memo, default is empty", "type": "string"}, "payee_name": {"description": "The name of the payee, default is empty", "type": "string"}}, "required": ["account_id", "date", "amount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access financial institutions through direct import and account synchronization to keep in line with YNAB accounts.", "name": "syncTransactions", "parameters": {"properties": {"sync": {"description": "Whether to start the synchronization operation, default is true", "type": "boolean"}, "user_id": {"description": "The unique identifier of the user", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update an existing transaction record in YNAB.", "name": "updateTransaction", "parameters": {"properties": {"account_id": {"description": "The ID of the account to which the transaction belongs", "type": "string"}, "amount": {"description": "The transaction amount, in the user's currency unit", "type": "float"}, "approved": {"description": "Whether the transaction has been approved, default is false", "type": "boolean"}, "category_name": {"description": "The category name, default is empty", "type": "string"}, "cleared": {"description": "The transaction status. Optional values: 'cleared', 'uncleared','reconciled'. Default is 'uncleared'", "type": "string"}, "date": {"description": "The transaction date, in the format of YYYY-MM-DD", "type": "string"}, "memo": {"description": "The transaction memo, default is empty", "type": "string"}, "payee_name": {"description": "The name of the payee, default is empty", "type": "string"}, "transaction_id": {"description": "The ID of the transaction to be updated", "type": "string"}}, "required": ["transaction_id", "account_id", "date", "amount"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the detailed location information of an IP address, including timezone, currency, and population.", "name": "getDetailedInfoByIP", "parameters": {"properties": {"fields": {"description": "Specify the fields of the returned information. By default, all fields are returned.", "items": {"description": "Optional fields include: 'timezone', 'currency', 'population', etc.", "type": "string"}, "type": "array"}, "ip": {"description": "The IP address to be queried. The format must conform to IPv4 or IPv6 standards.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Reverse lookup of associated domain name information based on the IP address.", "name": "getDomainByIP", "parameters": {"properties": {"ip": {"description": "The IP address to be queried. The format must conform to the IPv4 or IPv6 standard.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the geographical location information of an IP address, including country, city, and postal code.", "name": "getLocationByIP", "parameters": {"properties": {"ip": {"description": "The IP address to be queried. The format must conform to the IPv4 or IPv6 standard.", "type": "string"}, "language": {"description": "The language of the returned result, default is English.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Use biometric data for passwordless authentication, providing a secure and fast user login method.", "name": "biometricLogin", "parameters": {"properties": {"biometricData": {"description": "The user's biometric data for identity verification.", "type": "string"}, "deviceID": {"description": "The unique identifier of the user's device.", "type": "string"}}, "required": ["biometricData", "deviceID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use email for passwordless authentication and send a one-time login link to the user's email address.", "name": "emailLogin", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "loginExpiration": {"description": "The expiration time (in minutes) of the login link. The default value is 10.", "type": "integer"}}, "required": ["email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide two-factor authentication services to enhance the security of accounts.", "name": "twoFactorAuthentication", "parameters": {"properties": {"method": {"description": "The method of two-factor authentication, such as: 'SMS', 'Email'.", "type": "string"}, "sendTo": {"description": "The target address to send the two-factor authentication code, which can be a mobile phone number or an email address.", "type": "string"}, "userID": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["userID", "method", "sendTo"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the login screen to match the look and feel of the application.", "name": "customizeLoginScreen", "parameters": {"properties": {"appID": {"description": "The unique identifier of the application.", "type": "string"}, "theme": {"description": "Details of the custom theme, including colors and fonts.", "properties": {"fontFamily": {"description": "The font used by the application. The default value is 'System'.", "type": "string"}, "primaryColor": {"description": "The hexadecimal code of the primary color. The default value is '#3498db'.", "type": "string"}}, "type": "object"}}, "required": ["appID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a user analysis report for tracking and analyzing user activities.", "name": "userActivityReport", "parameters": {"properties": {"appID": {"description": "The unique identifier of the application.", "type": "string"}, "dateRange": {"description": "The date range of the report, defaulting to the past 30 days.", "properties": {"endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "metrics": {"description": "The list of required analysis metrics, including all metrics by default.", "items": {"enum": ["loginAttempts", "successfulLogins", "failedLogins"], "type": "string"}, "type": "array"}}, "required": ["appID"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time weather data at a specified location, including temperature, precipitation, wind force, etc.", "name": "getRealtimeWeather", "parameters": {"properties": {"lang": {"description": "The language of the returned data, default is 'zh'.", "enum": ["zh", "en"], "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format of 'latitude,longitude'.", "type": "string"}, "unit": {"description": "The temperature unit, default is 'C'.", "enum": ["C", "F"], "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get weather warnings and alerts information for a specific region.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning, default is 'all'.", "enum": ["all", "typhoon", "rainstorm", "highTemperature"], "type": "string"}, "region": {"description": "Region code or name.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access air quality data at a specified location, including PM2.5, AQI, etc.", "name": "getAirQuality", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format 'latitude,longitude'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the sunrise and sunset times for a specified date and location.", "name": "getSunriseSunset", "parameters": {"properties": {"date": {"description": "The date to query, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format 'latitude,longitude'.", "type": "string"}, "timezone": {"description": "The time zone, defaulting to 'UTC'.", "enum": ["UTC", "LOCAL"], "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current weather conditions at a specified airport, including METAR and TAF reports.", "name": "getAirportWeather", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'JFK' represents John F. Kennedy International Airport in New York.", "type": "string"}, "includePIREP": {"description": "Whether to include Pilot Report (PIREP) data. The default value is false.", "type": "boolean"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the delay information of a specified airport.", "name": "getAirportDelays", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'LAX' represents Los Angeles International Airport.", "type": "string"}, "delayType": {"description": "The type of delay. For example, 'weather' represents weather-related delays. The default value is all types.", "type": "string"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the high scores of RuneScape players.", "name": "getPlayerScores", "parameters": {"properties": {"playerName": {"description": "The player's username", "type": "string"}, "skill": {"description": "The name of the skill to retrieve. Defaults to 'all' for all skills", "enum": ["all", "attack", "defense", "strength", "hitpoints", "ranged", "prayer", "magic", "cooking", "woodcutting", "fletching", "fishing", "firemaking", "crafting", "smithing", "mining", "herblore", "agility", "thieving", "slayer", "farming", "runecrafting", "hunter", "construction"], "type": "string"}}, "required": ["playerName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a specific item in RuneScape.", "name": "getItemInformation", "parameters": {"properties": {"includeStats": {"description": "Whether to include the item's statistics, default is false", "type": "boolean"}, "itemId": {"description": "The unique ID of the item", "type": "integer"}}, "required": ["itemId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about RuneScape quests.", "name": "getQuests", "parameters": {"properties": {"difficulty": {"description": "The difficulty of the quests to retrieve. Defaults to 'all' for all difficulties", "enum": ["all", "easy", "medium", "hard", "elite", "master"], "type": "string"}, "status": {"description": "The status of the quests to retrieve. Defaults to 'all' for all quests", "enum": ["all", "completed", "started", "not_started"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Perform in-game actions in RuneScape, such as buying and selling items, casting spells, etc.", "name": "performGameAction", "parameters": {"properties": {"action": {"description": "The type of in-game action to perform", "enum": ["buy", "sell", "cast_spell", "equip_item"], "type": "string"}, "details": {"description": "Detailed parameters for performing the action", "properties": {"itemId": {"description": "The unique ID of the item, required when buying or selling items", "type": "integer"}, "quantity": {"description": "The quantity of the item, required when buying or selling items", "type": "integer"}, "spellName": {"description": "The name of the spell, required when casting a spell", "type": "string"}}, "type": "object"}}, "required": ["action", "details"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve data on all monsters in the RuneScape game, including their elemental weaknesses, dropped items, and attack patterns.", "name": "getMonsters", "parameters": {"properties": {"element": {"description": "Filter monsters with specific elemental weaknesses. The default value is 'all'.", "type": "string"}, "rank": {"description": "Filter monsters of a specific rank, such as 'low', 'high', or 'G'. The default value is 'all'.", "enum": ["low", "high", "G", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about specific weapons and armor sets in the RuneScape game, including their attributes and upgrade trees.", "name": "getWeaponDetails", "parameters": {"properties": {"includeTree": {"description": "Whether to include information about the weapon's upgrade tree. The default value is false.", "type": "boolean"}, "weaponId": {"description": "The unique identification ID of the weapon.", "type": "integer"}}, "required": ["weaponId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access task information in the RuneScape game, including their objectives and rewards.", "name": "getTaskInfo", "parameters": {"properties": {"difficulty": {"description": "Filter tasks by a specific difficulty level, ranging from 1 to 10. A default value of 0 represents all difficulties.", "type": "integer"}, "questType": {"description": "Filter tasks by a specific type, such as'main quest' or'side quest'. The default value is 'all'.", "enum": ["main quest", "side quest", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of all administrative divisions of a specified country.", "name": "getCountryDivisions", "parameters": {"properties": {"countryCode": {"description": "The ISO 3166-1 alpha-2 code of the country.", "type": "string"}, "language": {"description": "The language code of the returned result, default is 'en'.", "type": "string"}}, "required": ["countryCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific administrative division in a specific country.", "name": "getDivisionDetails", "parameters": {"properties": {"countryCode": {"description": "The ISO 3166-1 alpha-2 code of the country.", "type": "string"}, "divisionCode": {"description": "The code of the administrative division.", "type": "string"}, "includeSubdivisions": {"description": "Whether to include information about sub-administrative divisions, default is false.", "type": "boolean"}}, "required": ["countryCode", "divisionCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search administrative divisions by name or code.", "name": "searchDivisions", "parameters": {"properties": {"countryCode": {"description": "Limit search results to the ISO 3166-1 alpha-2 code of the specified country. By default, there is no limit.", "type": "string"}, "limit": {"description": "The maximum number of results to return, default is 10.", "type": "integer"}, "query": {"description": "Search query, which can be the name or code of an administrative division.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all supported countries and their ISO codes.", "name": "listCountries", "parameters": {"properties": {"language": {"description": "The language code of the returned result, default is 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Embed a Google Maps map in a web page or mobile application.", "name": "embedMap", "parameters": {"properties": {"location": {"description": "The address or geographical coordinates of the center of the map.", "type": "string"}, "mapType": {"description": "The type of the map, such as 'roadmap','satellite'. The default value is 'roadmap'.", "enum": ["roadmap", "satellite", "hybrid", "terrain"], "type": "string"}, "size": {"description": "The size of the map, in the format 'widthxheight', for example '600x400'. The default value is '600x400'.", "type": "string"}, "zoom": {"description": "The zoom level of the map. The default value is 8.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a custom marker on the Google Maps map.", "name": "addCustomMarker", "parameters": {"properties": {"icon": {"description": "The URL of the custom marker. The default value is the Google Maps standard icon.", "type": "string"}, "mapId": {"description": "The unique identifier of the map.", "type": "string"}, "position": {"description": "The geographical coordinates of the marker.", "properties": {"latitude": {"description": "The latitude value.", "type": "float"}, "longitude": {"description": "The longitude value.", "type": "float"}}, "type": "object"}, "title": {"description": "The title of the marker displayed when the mouse hovers over it.", "type": "string"}}, "required": ["mapId", "position", "title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Overlay data on Google Maps.", "name": "overlayDataOnMap", "parameters": {"properties": {"data": {"description": "Array of data to be overlaid.", "items": {"properties": {"coordinates": {"description": "Array of data coordinate points.", "items": {"properties": {"latitude": {"description": "Latitude value.", "type": "float"}, "longitude": {"description": "Longitude value.", "type": "float"}}, "type": "object"}, "type": "array"}, "properties": {"description": "Other properties of the data, such as color, transparency, etc., default to empty.", "type": "object"}, "type": {"description": "Data type, such as 'circle', 'polygon'", "type": "string"}}, "type": "object"}, "type": "array"}, "mapId": {"description": "Unique identifier of the map.", "type": "string"}}, "required": ["mapId", "data"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create a Bitcoin wallet for the user and manage the wallet.", "name": "createWallet", "parameters": {"properties": {"user_id": {"description": "The unique identifier of the user", "type": "string"}, "wallet_name": {"description": "The name of the wallet, with the default value 'MyBitcoinWallet'", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search global news by specific source.", "name": "filterArticlesBySource", "parameters": {"properties": {"fromDate": {"description": "Start date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "sortBy": {"description": "Sorting method. The default value is 'publishedAt'.", "enum": ["relevancy", "popularity", "publishedAt"], "type": "string"}, "source": {"description": "The name of the news source.", "type": "string"}, "toDate": {"description": "End date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}}, "required": ["source"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access relevant metadata such as the author, publication date, and article URL.", "name": "getArticleMetadata", "parameters": {"properties": {"url": {"description": "The URL address of the article.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the articles published by a certain author.", "name": "getArticleByAuthor", "parameters": {"properties": {"author": {"description": "Author name.", "type": "string"}, "limit": {"description": "The number of returns, default is 2.", "type": "string"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a specific block or transaction and view real-time network statistics.", "name": "getBlockchainData", "parameters": {"properties": {"block_hash": {"description": "The hash value of a specific block. If not provided, the latest block information will be returned.", "type": "string"}, "include_stats": {"description": "Whether to include network statistics. The default value is false.", "type": "boolean"}, "transaction_id": {"description": "The ID of a specific transaction. If not provided, the latest transaction information will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the full text of a specific article on the arXiv platform, subject to certain usage restrictions.", "name": "getFullText", "parameters": {"properties": {"acceptFormat": {"description": "The desired full text format, such as 'pdf' or 'text'. The default value is 'pdf'.", "type": "string"}, "articleId": {"description": "The unique identifier of the article", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Process requests for sending and receiving Bitcoin payments from users.", "name": "processPayment", "parameters": {"properties": {"amount": {"description": "The amount of Bitcoin to be sent", "type": "float"}, "fee": {"description": "The transaction fee, with a default value of 0.0001 BTC", "type": "float"}, "from_wallet": {"description": "The wallet address of the sender", "type": "string"}, "note": {"description": "Additional transaction note information, defaulting to empty", "type": "string"}, "to_wallet": {"description": "The wallet address of the recipient", "type": "string"}}, "required": ["from_wallet", "to_wallet", "amount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Process the payment transactions of Rappi orders.", "name": "processPayment_by_id", "parameters": {"properties": {"amount": {"description": "Payment amount", "type": "float"}, "currency": {"description": "Currency type, such as 'USD', 'COP'", "type": "string"}, "order_id": {"description": "The unique identifier of the order", "type": "string"}, "payment_method": {"description": "Payment method, such as 'credit_card', 'paypal', 'cash', 'bank_transfer'", "type": "string"}}, "required": ["order_id", "payment_method", "amount", "currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for current global news articles based on keywords or category.", "name": "searchArticles", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'all'.", "enum": ["business", "entertainment", "general", "health", "science", "sports", "technology", "all"], "type": "string"}, "country": {"description": "The country where the article originates. The default value is 'us'.", "enum": ["us", "cn", "ru", "de", "fr", "es", "it", "pt", "se", "all"], "type": "string"}, "keywords": {"description": "Keywords that the user wants to search for.", "type": "string"}, "language": {"description": "The language of the article. The default value is 'en'.", "enum": ["en", "es", "fr", "zh", "ar", "de", "it", "pt", "ru", "sv"], "type": "string"}, "page": {"description": "The page number of the results. The default value is 1.", "type": "integer"}, "pageSize": {"description": "The number of articles displayed per page. The default value is 20.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the metadata of a specific article on the arXiv platform, including its title, authors, abstract, and publication date.", "name": "RetrieveArXivArticleMetadata", "parameters": {"properties": {"articleId": {"description": "The unique identifier of the article. The arXiv prefix needs to be retained.", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for electronic component parts by part number, keyword, or manufacturer name.", "name": "searchComponents", "parameters": {"properties": {"keyword": {"description": "Search keyword, default is empty", "type": "string"}, "manufacturer": {"description": "Manufacturer name, default is empty", "type": "string"}, "page": {"description": "Page number of the results, default is 1", "type": "integer"}, "partNumber": {"description": "Part number of the component", "type": "string"}}, "required": ["partNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve pricing and inventory information for electronic component parts.", "name": "getPricingAndStock", "parameters": {"properties": {"partNumber": {"description": "The part number", "type": "string"}, "quantity": {"description": "The quantity to query", "type": "integer"}}, "required": ["partNumber", "quantity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for electronic component parts and retrieve order status updates.", "name": "placeOrder", "parameters": {"properties": {"customerID": {"description": "Customer ID", "type": "string"}, "items": {"description": "List of parts in the order", "items": {"properties": {"partNumber": {"description": "Part number", "type": "string"}, "quantity": {"description": "Quantity of the part", "type": "integer"}}, "type": "object"}, "type": "array"}, "paymentMethod": {"description": "Payment method", "type": "string"}}, "required": ["customerID", "items", "paymentMethod"], "type": "object"}}, "type": "function"}, {"function": {"description": "View the shipping tracking information of electronic component parts.", "name": "trackShipment", "parameters": {"properties": {"orderID": {"description": "Order ID", "type": "string"}}, "required": ["orderID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the technical data sheets and related documents of electronic component parts.", "name": "getTechnicalDocs", "parameters": {"properties": {"partNumber": {"description": "The part number", "type": "string"}}, "required": ["partNumber"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a list of global holidays for a specific country and year.", "name": "getHolidaysByCountryAndYear", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "language": {"description": "The language of the returned result, default is English", "type": "string"}, "year": {"description": "The year for which holidays need to be retrieved", "type": "integer"}}, "required": ["country", "year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a list of global holidays for multiple countries and years.", "name": "getHolidaysByCountriesAndYears", "parameters": {"properties": {"countries": {"description": "An array of two-letter ISO codes for countries", "items": {"type": "string"}, "type": "array"}, "years": {"description": "An array of years for which holidays need to be retrieved", "items": {"type": "integer"}, "type": "array"}}, "required": ["countries", "years"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about specific global holidays, including their names, dates, and types.", "name": "getHolidayInformation", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "holiday_name": {"description": "The name of the holiday", "type": "string"}, "year": {"description": "The year in which the holiday falls", "type": "integer"}}, "required": ["country", "year", "holiday_name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Determine whether a specific date is a global holiday in a specific country.", "name": "isDateHoliday", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "date": {"description": "The date to be checked, in the format 'YYYY-MM-DD'", "type": "string"}}, "required": ["country", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for hosts and devices on the Internet according to various criteria such as geographical location, software version, and hostname.", "name": "searchHosts", "parameters": {"properties": {"hostname": {"description": "The hostname, such as 'example.com'. The default value is empty.", "type": "string"}, "location": {"description": "A description of the geographical location, such as 'China' or 'USA'. The default value is 'Global'.", "type": "string"}, "page": {"description": "The page number of the results, starting from 1. The default value is 1.", "type": "integer"}, "software_version": {"description": "The software version number, such as 'Apache 2.4.1'. The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Identify security vulnerabilities in SSL certificates and network protocols.", "name": "identifyVulnerabilities", "parameters": {"properties": {"certificate_sha256": {"description": "The SHA256 hash value of the SSL certificate.", "type": "string"}, "protocol": {"description": "The type of network protocol, such as 'HTTPS', 'FTP', etc.", "type": "string"}}, "required": ["certificate_sha256", "protocol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about specific internet hosts and devices, including open ports, DNS records, and other metadata.", "name": "retrieveHostDetails", "parameters": {"properties": {"fields": {"description": "The information fields to be retrieved, such as ['open_ports', 'dns_records']. The default value is all fields.", "items": {"type": "string"}, "type": "array"}, "ip": {"description": "The IP address of the internet host.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Obtain open data sets related to the economy and finance of the Cypriot government.", "name": "getEconomicData", "parameters": {"properties": {"category": {"description": "Data category, default is 'all'.", "enum": ["all", "economic", "financial"], "type": "string"}, "format": {"description": "Data format, default is 'json'.", "enum": ["json", "csv", "xml"], "type": "string"}, "year": {"description": "The year for which data needs to be obtained.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific open datasets of the Cypriot government.", "name": "searchDatasets", "parameters": {"properties": {"keywords": {"description": "Search keywords.", "type": "string"}, "limit": {"description": "The number of results displayed per page, default is 10.", "type": "integer"}, "page": {"description": "The page number of the results, default is 1.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Download the specified open dataset of the Cypriot government.", "name": "downloadDataset", "parameters": {"properties": {"datasetUrl": {"description": "The url of the dataset.", "type": "string"}, "format": {"description": "The format of the downloaded data, default is 'csv'.", "enum": ["csv", "json", "xml"], "type": "string"}}, "required": ["datasetUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the metadata of German government datasets, including description, author, format, and licensing information.", "name": "getDatasetMetadata", "parameters": {"properties": {"datasetId": {"description": "The unique identifier of the dataset.", "type": "string"}}, "required": ["datasetId"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all available dataset categories of the German government.", "name": "listCategories", "parameters": {"properties": {"includeCounts": {"description": "Whether to include the number of datasets in each category. The default value is false.", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest released German government datasets.", "name": "getLatestDatasets", "parameters": {"properties": {"limit": {"description": "The number of datasets to return. The default value is 3.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain comprehensive statistical data of Sweden, including information on population, economy, society, healthcare, etc.", "name": "getStatistics", "parameters": {"properties": {"category": {"description": "The category of statistical data, such as 'population', 'economy', 'healthcare', etc.", "type": "string"}, "region": {"description": "A specific region in Sweden, defaulting to 'National'.", "type": "string"}, "year": {"description": "The year to retrieve, defaulting to the current year.", "type": "integer"}}, "required": ["category"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest updated datasets from the Swedish government.", "name": "getLatestUpdates", "parameters": {"properties": {"since": {"description": "Start date, in the format 'YYYY-MM-DD'. Defaults to the past month.", "type": "string"}, "updateType": {"description": "Update type, such as 'economic', 'educational', 'health', 'demographic', etc. Defaults to all types.", "enum": ["economic", "educational", "health", "demographic"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for datasets of the German government based on keywords, categories, and file formats.", "name": "SearchGermanGovDatasets", "parameters": {"properties": {"category": {"description": "The category of the dataset, with the default value of 'all'.", "type": "string"}, "format": {"description": "The format of the file, with the default value of 'json'.", "enum": ["json", "csv", "xml"], "type": "string"}, "keyword": {"description": "The keyword for the search.", "type": "string"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for the lyrics of a given song based on the artist and song title.", "name": "searchLyrics", "parameters": {"properties": {"artist": {"description": "The name of the artist", "type": "string"}, "title": {"description": "The title of the song", "type": "string"}}, "required": ["artist", "title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve artist information such as biography, albums, and popular songs.", "name": "getArtistInfo", "parameters": {"properties": {"artist": {"description": "The name of the artist", "type": "string"}, "includeAlbums": {"description": "Whether to include the artist's album information. The default value is false", "type": "boolean"}}, "required": ["artist"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create playlists according to different criteria such as genre or mood.", "name": "createPlaylist", "parameters": {"properties": {"genre": {"description": "Music genre, the default value is 'pop'", "type": "string"}, "limit": {"description": "The number limit of songs in the playlist, the default value is 10", "type": "integer"}, "mood": {"description": "Mood, the default value is 'happy'", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the rankings of the most popular songs, artists, and albums.", "name": "getRankings", "parameters": {"properties": {"genre": {"description": "Music genre. If specified, returns the rankings for a specific genre. The default value is 'all'.", "type": "string"}, "limit": {"description": "The number of items in the ranking. The default value is 20.", "type": "integer"}, "type": {"description": "The type of the ranking. The available values are'song', 'artist', 'album'.", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Simulate a GET request and return the parameters and values contained in the request.", "name": "echoGet", "parameters": {"properties": {"data": {"description": "Data to be echoed", "type": "string"}, "timestamp": {"description": "Timestamp of the request. The default value is the current timestamp", "type": "integer"}}, "required": ["data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate a POST request and return the content contained in the request body.", "name": "echoPost", "parameters": {"properties": {"content": {"description": "The content object to be echoed", "properties": {"number": {"description": "Numeric content, default value is 0", "type": "integer"}, "text": {"description": "Text content", "type": "string"}}, "type": "object"}, "headers": {"description": "Custom request headers, default is empty", "properties": {"Content-Type": {"description": "Content type", "type": "string"}}, "type": "object"}}, "required": ["content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns the HTTP headers used when sending the request.", "name": "echoHeaders", "parameters": {"properties": {"verbose": {"description": "Whether to return detailed header information, default is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns a simulated HTTP status code.", "name": "echoStatus", "parameters": {"properties": {"statusCode": {"description": "The HTTP status code to be returned", "type": "integer"}}, "required": ["statusCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate and verify HTTP authentication information and return the authentication result.", "name": "echoAuth", "parameters": {"properties": {"password": {"description": "Password", "type": "string"}, "username": {"description": "Username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert the given color value to the specified format.", "name": "convertColor", "parameters": {"properties": {"color": {"description": "The original color value, in Hex or RGB format.", "type": "string"}, "targetFormat": {"description": "The target color format. Optional values are 'RGB', 'Hex', 'HSL'.", "type": "string"}}, "required": ["color", "targetFormat"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the complementary color of the given color.", "name": "getComplementaryColor", "parameters": {"properties": {"color": {"description": "The original color value, in Hex format.", "type": "string"}}, "required": ["color"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate the grayscale version of a color for monochromatic designs.", "name": "generateGrayscale", "parameters": {"properties": {"color": {"description": "The original color value in Hex format.", "type": "string"}}, "required": ["color"], "type": "object"}}, "type": "function"}, {"function": {"description": "Calculate the contrast between two colors.", "name": "calculateContrast", "parameters": {"properties": {"color1": {"description": "The first color value, in Hex format.", "type": "string"}, "color2": {"description": "The second color value, in Hex format.", "type": "string"}}, "required": ["color1", "color2"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Twitter tweets based on search terms and hashtags.", "name": "searchTweets", "parameters": {"properties": {"count": {"description": "The number of tweets to return. The default value is 10.", "type": "integer"}, "lang": {"description": "The language code of the tweets. The default value is 'en'.", "type": "string"}, "query": {"description": "Search terms or hashtags.", "type": "string"}, "result_type": {"description": "The type of results. The optional values are'recent', 'popular','mixed'. The default value is'mixed'.", "enum": ["recent", "popular", "mixed"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream Twitter tweets in real-time.", "name": "streamTweets", "parameters": {"properties": {"locations": {"description": "Geographical coordinates, in the format of [longitude, latitude], default is empty.", "items": {"type": "float"}, "type": "array"}, "track": {"description": "An array of keywords to track, in English.", "items": {"type": "string"}, "type": "array"}}, "required": ["track"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Twitter user and account information.", "name": "getUserInfo", "parameters": {"properties": {"include_entities": {"description": "Whether to include entity information. The default value is false.", "type": "boolean"}, "user_id": {"description": "The ID of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access Twitter followers and friends list.", "name": "getFriendsList", "parameters": {"properties": {"count": {"description": "The number of friends returned per request. The default value is 20.", "type": "integer"}, "cursor": {"description": "The cursor used for pagination. The default value is -1.", "type": "integer"}, "user_id": {"description": "The ID of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Represents posting a tweet on behalf of a Twitter user.", "name": "postTweet", "parameters": {"properties": {"auto_populate_reply_metadata": {"description": "Whether to automatically populate reply metadata. The default value is false.", "type": "boolean"}, "in_reply_to_status_id": {"description": "If the tweet is a reply, specify the ID of the original tweet. Defaults to empty.", "type": "string"}, "media_ids": {"description": "An array of media file IDs used to include images or videos in the tweet. Defaults to empty.", "items": {"type": "string"}, "type": "array"}, "status": {"description": "The content of the tweet.", "type": "string"}}, "required": ["status"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Simulate a GET request and return the parameters and values contained in the request.", "name": "echoGet", "parameters": {"properties": {"data": {"description": "Data to be echoed", "type": "string"}, "timestamp": {"description": "Timestamp of the request. The default value is the current timestamp", "type": "integer"}}, "required": ["data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate a POST request and return the content contained in the request body.", "name": "echoPost", "parameters": {"properties": {"content": {"description": "The content object to be echoed", "properties": {"number": {"description": "Numeric content, default value is 0", "type": "integer"}, "text": {"description": "Text content", "type": "string"}}, "type": "object"}, "headers": {"description": "Custom request headers, default is empty", "properties": {"Content-Type": {"description": "Content type", "type": "string"}}, "type": "object"}}, "required": ["content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns the HTTP headers used when sending the request.", "name": "echoHeaders", "parameters": {"properties": {"verbose": {"description": "Whether to return detailed header information, default is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns a simulated HTTP status code.", "name": "echoStatus", "parameters": {"properties": {"statusCode": {"description": "The HTTP status code to be returned", "type": "integer"}}, "required": ["statusCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate and verify HTTP authentication information and return the authentication result.", "name": "echoAuth", "parameters": {"properties": {"password": {"description": "Password", "type": "string"}, "username": {"description": "Username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a short link for the long URL of any website.", "name": "createShortLink", "parameters": {"properties": {"expirationDate": {"description": "The expiration date of the short link, in the format of YYYY-MM-DD. The default value is null, indicating it never expires.", "type": "string"}, "longUrl": {"description": "The original long URL that the user wants to shorten.", "type": "string"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the original long URL from the generated short link.", "name": "retrieveOriginalUrl", "parameters": {"properties": {"shortUrl": {"description": "The short link for which the original long URL needs to be retrieved.", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all generated shortened URLs associated with a specific user account.", "name": "listShortLinks", "parameters": {"properties": {"limit": {"description": "The number of results to display per page. The default value is 10.", "type": "integer"}, "page": {"description": "The page number of the results to request. The default value is 1.", "type": "integer"}, "userId": {"description": "The unique identifier of the user account.", "type": "string"}}, "required": ["userId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Modify the expiration time of a short URL.", "name": "modifyShortLinks", "parameters": {"properties": {"expirationDate": {"description": "Expiration time.", "type": "integer"}, "url": {"description": "Short link.", "type": "integer"}}, "required": ["url", "expirationDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for hosts and devices on the Internet according to various criteria such as geographical location, software version, and hostname.", "name": "searchHosts", "parameters": {"properties": {"hostname": {"description": "The hostname, such as 'example.com'. The default value is empty.", "type": "string"}, "location": {"description": "A description of the geographical location, such as 'China' or 'USA'. The default value is 'Global'.", "type": "string"}, "page": {"description": "The page number of the results, starting from 1. The default value is 1.", "type": "integer"}, "software_version": {"description": "The software version number, such as 'Apache 2.4.1'. The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Identify security vulnerabilities in SSL certificates and network protocols.", "name": "identifyVulnerabilities", "parameters": {"properties": {"certificate_sha256": {"description": "The SHA256 hash value of the SSL certificate.", "type": "string"}, "protocol": {"description": "The type of network protocol, such as 'HTTPS', 'FTP', etc.", "type": "string"}}, "required": ["certificate_sha256", "protocol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about specific internet hosts and devices, including open ports, DNS records, and other metadata.", "name": "retrieveHostDetails", "parameters": {"properties": {"fields": {"description": "The information fields to be retrieved, such as ['open_ports', 'dns_records']. The default value is all fields.", "items": {"type": "string"}, "type": "array"}, "ip": {"description": "The IP address of the internet host.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time cryptocurrency market data for all supported exchanges.", "name": "getRealtimeData", "parameters": {"properties": {"asset_base": {"description": "The identifier of the base asset.", "type": "string"}, "asset_quote": {"description": "The identifier of the quote asset.", "type": "string"}, "exchange": {"description": "The identifier of the exchange.", "type": "string"}, "limit": {"description": "The limit on the number of data items to return. The default value is 100.", "type": "integer"}}, "required": ["exchange", "asset_base", "asset_quote"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get up to six years of cryptocurrency historical data.", "name": "getHistoricalData", "parameters": {"properties": {"limit": {"description": "The limit on the number of data points to return. The default value is 100.", "type": "integer"}, "period_id": {"description": "The identifier for the time period, such as '1YEAR', '2YEAR', '3YEAR'. Defaults to 1 year", "type": "string"}, "symbol_id": {"description": "The identifier for the cryptocurrency symbol.", "type": "string"}, "time_end": {"description": "The end time, in ISO 8601 format. Defaults to the current time.", "type": "string"}, "time_start": {"description": "The start time, in ISO 8601 format.", "type": "string"}}, "required": ["symbol_id", "time_start"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get up to 24 hours of cryptocurrency time series data.", "name": "get24hSeriesData", "parameters": {"properties": {"end_time": {"description": "The end time, in the format of YYYY-MM-DD HH:MM:SS, defaulting to now.", "type": "string"}, "period_id": {"description": "The identifier of the time period, such as '1MIN', '5MIN', '1HRS'.", "type": "string"}, "start_time": {"description": "The start time, in the format of YYYY-MM-DD HH:MM:SS, defaulting to 24 hours ago.", "type": "string"}, "symbol_id": {"description": "The identifier of the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id", "period_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide data such as cryptocurrency trading, quotes, and order books.", "name": "getOrderBookData", "parameters": {"properties": {"level": {"description": "The depth level of the order book, with a default value of 1.", "type": "integer"}, "symbol_id": {"description": "The identifier of the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Normalize and transform cryptocurrency market data.", "name": "normalizeMarketData", "parameters": {"properties": {"convert_to": {"description": "The target currency identifier to convert to.", "type": "string"}, "market_data": {"description": "Market data object.", "properties": {"price": {"description": "The price of the cryptocurrency.", "type": "float"}, "symbol_id": {"description": "The identifier of the cryptocurrency symbol.", "type": "float"}, "volume_24h": {"description": "The trading volume in the past 24 hours, with a default value of 0.", "type": "float"}}, "type": "object"}}, "required": ["market_data", "convert_to"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get COVID-19 epidemic data for a specific country, including confirmed cases, deaths, and recoveries.", "name": "getCountryData", "parameters": {"properties": {"country": {"description": "The name of the country. It must be a valid English name of the country.", "type": "string"}, "dateRange": {"description": "The date range for the query. The default is the last week.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}}, "required": ["country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access data of countries and entities from multiple databases and reports.", "name": "getCountryIndicatorData", "parameters": {"properties": {"dateRange": {"description": "The date range to retrieve, defaulting to the last five years.", "items": {"description": "The date format is 'YYYY'.", "type": "string"}, "type": "array"}, "incomeLevel": {"description": "The income level filter for the required data, with the default value of 'all'.", "enum": ["low", "middle", "high", "all"], "type": "string"}, "indicator": {"description": "The code of the data indicator.", "type": "string"}}, "required": ["indicator"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time statistical data of the global COVID-19 pandemic, including the number of cases and deaths in various regions.", "name": "getGlobalStats", "parameters": {"properties": {"date": {"description": "Data for a specified date, defaulting to the latest data. The format is 'YYYY-MM-DD'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide an interactive map to visualize the global spread of the COVID-19 virus.", "name": "getVirusSpreadMap", "parameters": {"properties": {"mapType": {"description": "Map type. The available values are'static' or 'interactive', and the default value is 'interactive'.", "type": "string"}, "region": {"description": "Specific region. If not specified, the global map will be displayed.", "items": {"description": "Region name.", "type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access data of various countries and entities from multiple databases and reports.", "name": "AccessCountryData", "parameters": {"properties": {"dateRange": {"description": "The date range to retrieve, defaulting to the last five years.", "items": {"description": "The date format is 'YYYY'.", "type": "string"}, "type": "array"}, "incomeLevel": {"description": "The income level filter for the required data, with the default value of 'all'.", "enum": ["low", "middle", "high", "all"], "type": "string"}, "indicator": {"description": "The code of the data indicator.", "type": "string"}}, "required": ["indicator"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Obtain macroeconomic indicator data for a specified country or region, such as GDP, inflation rate, unemployment rate, etc.", "name": "getEconomicIndicators", "parameters": {"properties": {"country": {"description": "Country or region code, e.g., 'US' represents the United States.", "type": "string"}, "indicators": {"description": "An array of macroeconomic indicators to be queried.", "items": {"description": "The English names of macroeconomic indicators, such as 'GDP', 'Inflation', 'Unemployment'.", "type": "string"}, "type": "array"}, "year": {"description": "The year to be queried, defaulting to the current year.", "type": "integer"}}, "required": ["country", "indicators"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search through thousands of time series and datasets to find specific macroeconomic data.", "name": "searchTimeSeries", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return, default is 50.", "type": "integer"}, "query": {"description": "Search query keywords, which can be countries, indicators or other keywords.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access specific macroeconomic data in JSON format for use in your own applications.", "name": "accessDataInJSON", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The return format of the data, default is 'JSON'.", "enum": ["JSON", "CSV", "XML"], "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current Protestant liturgical calendar and highlight important dates and events.", "name": "getCurrentLiturgicalCalendar", "parameters": {"properties": {"highlightEvents": {"description": "Whether to highlight important events, default is true", "type": "boolean"}, "year": {"description": "The year to retrieve, default is the current year", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for key Protestant liturgical events by date or keyword.", "name": "searchLiturgicalEvents", "parameters": {"properties": {"date": {"description": "The date to search for, in the format 'YYYY-MM-DD', default is empty", "type": "string"}, "keyword": {"description": "The keyword to search for, default is empty", "type": "string"}, "limit": {"description": "The limit on the number of returned results, default is 10", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Query the detailed information of Protestant liturgical events, including background information, customs, etc.", "name": "searchLiturgicalEventsDetails", "parameters": {"properties": {"name": {"description": "The name of the event to search for", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the calendar to meet the needs of a specific Protestant organization.", "name": "customizeCalendar", "parameters": {"properties": {"events": {"description": "List of events to add to the calendar", "items": {"properties": {"eventDate": {"description": "Event date, in the format 'YYYY-MM-DD'", "type": "string"}, "eventId": {"description": "Unique identifier of the event", "type": "string"}, "eventName": {"description": "Event name", "type": "string"}}, "type": "object"}, "type": "array"}, "organizationId": {"description": "Unique identifier of the Protestant organization", "type": "string"}, "removeEvents": {"description": "List of event IDs to remove from the calendar, default is empty", "items": {"type": "string"}, "type": "array"}}, "required": ["organizationId", "events"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve information about a specific music artist, including their name, aliases, and musical works.", "name": "retrieveArtistInfo", "parameters": {"properties": {"artist_id": {"description": "The unique identifier of the artist.", "type": "string"}, "include_aliases": {"description": "Whether to include the artist's aliases. The default value is false.", "type": "boolean"}}, "required": ["artist_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about a specific music album, including release date, cover art, and track list.", "name": "getAlbumInfo", "parameters": {"properties": {"album_id": {"description": "The unique identifier of the album.", "type": "string"}, "include_tracks": {"description": "Whether to include the track list of the album. The default value is true.", "type": "boolean"}}, "required": ["album_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a music single, such as the artist, duration, and recording location.", "name": "getTrackDetails", "parameters": {"properties": {"include_artist": {"description": "Whether to include the artist information of the single. The default value is true.", "type": "boolean"}, "track_id": {"description": "The unique identifier of the single.", "type": "string"}}, "required": ["track_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for music based on various criteria such as artist name, album title, track name, or ISRC code.", "name": "searchMusic", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return. The default value is 10.", "type": "integer"}, "offset": {"description": "The offset of the search results. The default value is 0.", "type": "integer"}, "query": {"description": "The search query, which can be an artist name, album title, track name, or ISRC code.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Filter articles from around the world by category or language.", "name": "filterArticles", "parameters": {"properties": {"category": {"description": "The category of the article, with the default value being 'general'.", "type": "string"}, "language": {"description": "The language code of the article, such as 'en' for English, with the default value being 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search global news by specific source.", "name": "filterArticlesBySource", "parameters": {"properties": {"fromDate": {"description": "Start date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "sortBy": {"description": "Sorting method. The default value is 'publishedAt'.", "enum": ["relevancy", "popularity", "publishedAt"], "type": "string"}, "source": {"description": "The name of the news source.", "type": "string"}, "toDate": {"description": "End date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}}, "required": ["source"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access relevant metadata such as the author, publication date, and article URL.", "name": "getArticleMetadata", "parameters": {"properties": {"url": {"description": "The URL address of the article.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve top news headlines or articles from around the world published within a specific time period.", "name": "getHeadlines", "parameters": {"properties": {"domains": {"description": "List of news source domains, default is empty.", "items": {"description": "Domain name of the news source.", "type": "string"}, "type": "array"}, "endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve trending news from around the world and generate a news feed.", "name": "getTrendingNews", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'general'.", "type": "string"}, "country": {"description": "Country code, e.g., 'US' for the United States.", "type": "string"}, "refreshInterval": {"description": "The news refresh interval in minutes. The default value is 60.", "type": "integer"}}, "required": ["country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search articles from around the world by keywords.", "name": "searchArticles", "parameters": {"properties": {"keywords": {"description": "Keywords that the user wants to search for.", "type": "string"}, "language": {"description": "The language code of the article, e.g., 'en' for English. The default value is 'en'.", "type": "string"}, "limit": {"description": "The limit on the number of articles to return. The default value is 10.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the detailed information of a complete Polish book, including the table of contents, introduction, etc., based on the author and title.", "name": "getBookCatalog", "parameters": {"properties": {"author": {"description": "The name of the author. The default value is empty.", "type": "string"}, "genre": {"description": "The type of the book. The default value is empty.", "type": "string"}, "published_date": {"description": "The publication date, in the format of YYYY-MM-DD. The default value is empty.", "type": "string"}, "title": {"description": "The title of the book. The default value is empty.", "type": "string"}}, "required": ["author", "title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get other Polish books in the same category.", "name": "getBookByCat", "parameters": {"properties": {"genre": {"description": "Book genre", "type": "string"}, "published_date": {"description": "Publication year, in the format of YYYY. The default value is empty, query all.", "items": {"type": "string"}, "type": "array"}}, "required": ["genre"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get other Polish books by the author.", "name": "getBookByAuthor", "parameters": {"properties": {"author": {"description": "Author's name", "type": "string"}, "published_date": {"description": "Publication year, in the format of YYYY. The default value is empty to query all.", "items": {"type": "string"}, "type": "array"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for Polish books by keyword.", "name": "searchBooks", "parameters": {"properties": {"limit": {"description": "Number of results per page, default is 10", "type": "integer"}, "page": {"description": "Page number of results, default is 1", "type": "integer"}, "query": {"description": "Search query term", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about Polish book categories and types.", "name": "getBookCategories", "parameters": {"properties": {"include_subcategories": {"description": "Whether to include subcategories, default is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "List books related to Poland, popular book rankings, and featured book recommendations.", "name": "listBooks", "parameters": {"properties": {"genre": {"description": "The genre of the book. The default value is empty.", "type": "string"}, "limit": {"description": "The number of books to list. The default value is 10.", "type": "integer"}, "listType": {"description": "The type of books to list.", "enum": ["related", "top", "featured"], "type": "string"}}, "required": ["listType"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create and manage personal virtual bookshelves, and organize books by category, reading status, and rating.", "name": "manageBookshelf", "parameters": {"properties": {"action": {"description": "The action to perform.", "enum": ["create", "update", "delete"], "type": "string"}, "bookInfo": {"description": "The books to operate on. The default value is empty.", "items": {"properties": {"category": {"description": "Book category", "type": "string"}, "name": {"description": "Book name", "type": "string"}, "rating": {"description": "The rating of the book. The default value is 0.", "enum": [1, 2, 3, 4, 5], "type": "integer"}, "readingStatus": {"description": "The reading status of the book. The default value is 'to-read'.", "enum": ["reading", "to-read", "finished"], "type": "string"}}, "type": "object"}, "type": "array"}, "bookshelfId": {"description": "The unique identifier of the bookshelf. Not required for the 'create' action.", "type": "integer"}, "bookshelfName": {"description": "The name of the bookshelf. Used only for 'create' and 'update' actions. The default value is empty.", "type": "string"}}, "required": ["action"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get information about a specified Rappi store, including the store name, location, and operating hours.", "name": "getStoreInfo", "parameters": {"properties": {"include_hours": {"description": "Whether to include operating hours information, default is false", "type": "boolean"}, "store_id": {"description": "The unique identifier of the store", "type": "string"}}, "required": ["store_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a specified Rappi order, including order content, current status, and purchase store information.", "name": "getOrderDetails", "parameters": {"properties": {"include_items": {"description": "Whether to include order item details, default is true", "type": "boolean"}, "order_id": {"description": "The unique identifier of the order", "type": "string"}}, "required": ["order_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Handle the payment transactions for Rappi orders.", "name": "processPayment", "parameters": {"properties": {"amount": {"description": "Payment amount", "type": "float"}, "currency": {"description": "Currency type, such as 'USD', 'COP'", "type": "string"}, "order_id": {"description": "The unique identifier of the order", "type": "string"}, "payment_method": {"description": "Payment method, such as 'credit_card', 'paypal', 'cash'", "type": "string"}, "store_id": {"description": "The unique identifier of the store", "type": "string"}}, "required": ["order_id", "store_id", "payment_method", "amount", "currency"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest flight information at Amsterdam Schiphol Airport, such as departure and arrival times, gate numbers, and flight status.", "name": "getFlightInfo", "parameters": {"properties": {"date": {"description": "Query date, default is the current date", "type": "string"}, "flightNumber": {"description": "Flight number", "type": "string"}}, "required": ["flightNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the available shops, restaurants, and other services in each terminal of Amsterdam Schiphol Airport.", "name": "getAirportShops", "parameters": {"properties": {"category": {"description": "Shop category, such as 'Food & Beverage', 'Shopping', etc. Defaults to all categories", "type": "string"}, "terminal": {"description": "Terminal number. There are Terminal 1, Terminal 2, and Terminal 3", "type": "string"}}, "required": ["terminal"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the availability and prices of parking spaces at Amsterdam Schiphol Airport.", "name": "getParkingInfo", "parameters": {"properties": {"duration": {"description": "The duration of parking, in hours.", "type": "integer"}, "parkingType": {"description": "The type of parking, such as'short-term', 'long-term'. Defaults to all types.", "type": "string"}}, "required": ["duration"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get route and transportation information to and from Amsterdam Schiphol Airport.", "name": "getTransportInfo", "parameters": {"properties": {"destination": {"description": "Destination", "type": "string"}, "transportMode": {"description": "Transportation mode, such as 'bus', 'train', 'taxi'. Defaults to all transportation modes.", "type": "string"}}, "required": ["destination"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time price data of the specified cryptocurrency.", "name": "getRealTimePrice", "parameters": {"properties": {"currency": {"description": "The abbreviation of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the historical price data of the specified cryptocurrency.", "name": "getHistoricalPrice", "parameters": {"properties": {"currency": {"description": "The short name of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}, "date": {"description": "The query date, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["currency", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve account information, including balance and transaction history.", "name": "getAccountInfo", "parameters": {"properties": {"accountId": {"description": "The unique identifier of the account.", "type": "string"}}, "required": ["accountId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new order on the Coinbase platform.", "name": "createOrder", "parameters": {"properties": {"amount": {"description": "The quantity of the cryptocurrency to buy or sell.", "type": "float"}, "currency": {"description": "The abbreviation of the cryptocurrency in the order.", "type": "string"}, "price": {"description": "The price per unit of the cryptocurrency, defaulting to the current market price.", "type": "float"}, "type": {"description": "The type of the order, such as 'buy' or'sell'.", "type": "string"}}, "required": ["currency", "amount", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete the specified order on the Coinbase platform.", "name": "deleteOrder", "parameters": {"properties": {"orderId": {"description": "The unique identifier of the order to be deleted.", "type": "string"}}, "required": ["orderId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Receive notifications about specified events, such as payment completion or account verification.", "name": "getNotifications", "parameters": {"properties": {"email": {"description": "Email address to receive notifications. Defaults to the email address bound to the account.", "type": "string"}, "type": {"description": "Notification type, such as 'payment_received' or 'account_verified'.", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definition of an English word.", "name": "getWordDefinition", "parameters": {"properties": {"partOfSpeech": {"description": "Specify the part of speech to be queried. The default value is all parts of speech.", "type": "string"}, "word": {"description": "The English word to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation of an English word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The format of the pronunciation file, default is mp3.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The English word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get example sentences of English words.", "name": "getWordExamples", "parameters": {"properties": {"useCase": {"description": "Specify the usage scenario of the example sentences, defaulting to all scenarios.", "type": "string"}, "word": {"description": "The English word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the part of speech of an English word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"word": {"description": "The English word whose part of speech is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random programming-related quote.", "name": "getRandomQuote", "parameters": {"properties": {"language": {"description": "The language in which the quote is returned. Defaults to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve programming-related quotes by a specific author.", "name": "getQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The name of the author.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page, defaulting to 10.", "type": "integer"}, "page": {"description": "The page number of the results, defaulting to the first page.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve specific programming-related quotes by tag.", "name": "getQuotesByTag", "parameters": {"properties": {"sortBy": {"description": "The sorting method. The available values are 'author' or 'date', and the default value is 'author'.", "type": "string"}, "sortOrder": {"description": "The sorting order. The available values are 'asc' or 'desc', and the default value is 'asc'.", "type": "string"}, "tag": {"description": "The tag of the quote.", "type": "string"}}, "required": ["tag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new programming quote to the collection.", "name": "addQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "tags": {"description": "The list of tags related to the quote, default is empty.", "items": {"description": "The name of the tag.", "type": "string"}, "type": "array"}, "text": {"description": "The content of the quote.", "type": "string"}}, "required": ["text", "author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update a specific programming quote in the collection.", "name": "updateQuote", "parameters": {"properties": {"author": {"description": "The updated author name.", "type": "string"}, "id": {"description": "The unique identifier of the quote to be updated.", "type": "string"}, "text": {"description": "The updated content of the quote.", "type": "string"}}, "required": ["id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current player roster of a specified Major League Baseball (MLB) team.", "name": "getCurrentPlayerRoster", "parameters": {"properties": {"teamId": {"description": "The unique identification ID of the team.", "type": "integer"}}, "required": ["teamId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the rankings of the specified Major League Baseball (MLB).", "name": "getRank", "parameters": {"properties": {"season": {"description": "The season year for which to retrieve the statistics. Defaults to the current year.", "type": "integer"}, "teamId": {"description": "The unique identification ID of the team.", "type": "integer"}}, "required": ["teamId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the scorecard of a specific Major League Baseball (MLB) game.", "name": "getGameScorecard", "parameters": {"properties": {"gameId": {"description": "The unique identification ID of the game.", "type": "string"}, "includeDetails": {"description": "Whether to include detailed information about the game, default is false.", "type": "boolean"}}, "required": ["gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the statistical data of a specified Major League Baseball (MLB) player.", "name": "getPlayerStats", "parameters": {"properties": {"playerId": {"description": "The unique identification ID of the player.", "type": "integer"}, "season": {"description": "The season year for which to retrieve the statistical data, defaulting to the current year.", "type": "integer"}, "statsType": {"description": "The type of statistical data, such as 'batting' (batting average) or 'pitching' (earned run average), defaulting to 'batting'.", "enum": ["batting", "pitching"], "type": "string"}}, "required": ["playerId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the basic information of a specified Major League Baseball (MLB) player.", "name": "getPlayerInfo", "parameters": {"properties": {"playerId": {"description": "The unique identification ID of the player.", "type": "integer"}}, "required": ["playerId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Major League Baseball (MLB) team rankings and other league-wide statistics.", "name": "getTeamRankings", "parameters": {"properties": {"league": {"description": "The name of the league, such as 'American' or 'National'. Defaults to all leagues.", "enum": ["American", "National"], "type": "string"}, "season": {"description": "The season year for which to retrieve the rankings. Defaults to the current year.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Use biometric data for passwordless authentication, providing a secure and fast user login method.", "name": "biometricLogin", "parameters": {"properties": {"biometricData": {"description": "The user's biometric data for identity verification.", "type": "string"}, "deviceID": {"description": "The unique identifier of the user's device.", "type": "string"}}, "required": ["biometricData", "deviceID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use email for passwordless authentication and send a one-time login link to the user's email address.", "name": "emailLogin", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "loginExpiration": {"description": "The expiration time (in minutes) of the login link. The default value is 10.", "type": "integer"}}, "required": ["email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide two-factor authentication services to enhance the security of accounts.", "name": "twoFactorAuthentication", "parameters": {"properties": {"method": {"description": "The method of two-factor authentication, such as: 'SMS', 'Email'.", "type": "string"}, "sendTo": {"description": "The target address to send the two-factor authentication code, which can be a mobile phone number or an email address.", "type": "string"}, "userID": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["userID", "method", "sendTo"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the login screen to match the look and feel of the application.", "name": "customizeLoginScreen", "parameters": {"properties": {"appID": {"description": "The unique identifier of the application.", "type": "string"}, "theme": {"description": "Details of the custom theme, including colors and fonts.", "properties": {"fontFamily": {"description": "The font used by the application. The default value is 'System'.", "type": "string"}, "primaryColor": {"description": "The hexadecimal code of the primary color. The default value is '#3498db'.", "type": "string"}}, "type": "object"}}, "required": ["appID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a user analysis report for tracking and analyzing user activities.", "name": "userActivityReport", "parameters": {"properties": {"appID": {"description": "The unique identifier of the application.", "type": "string"}, "dateRange": {"description": "The date range of the report, defaulting to the past 30 days.", "properties": {"endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "metrics": {"description": "The list of required analysis metrics, including all metrics by default.", "items": {"enum": ["loginAttempts", "successfulLogins", "failedLogins"], "type": "string"}, "type": "array"}}, "required": ["appID"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search and filter tender information according to different criteria such as keywords, dates, and Hungarian industries.", "name": "searchTenders", "parameters": {"properties": {"endDate": {"description": "End date, in the format of YYYY-MM-DD, and the default value is the current date.", "type": "string"}, "industry": {"description": "List of Hungarian industries of interest.", "items": {"description": "Industry name.", "type": "string"}, "type": "array"}, "keywords": {"description": "Keywords for searching, default is empty.", "type": "string"}, "startDate": {"description": "Start date, in the format of YYYY-MM-DD, and the default value is the current date.", "type": "string"}}, "required": ["industry"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of individual tenders in Hungary, such as the type of procurement, deadline, and budget.", "name": "getTenderDetails", "parameters": {"properties": {"tenderId": {"description": "The unique identifier of the tender.", "type": "integer"}}, "required": ["tenderId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Receive notifications of new tenders in Hungary that meet specific criteria.", "name": "subscribeTenderNotifications", "parameters": {"properties": {"criteria": {"description": "Criteria for filtering notifications.", "properties": {"industries": {"description": "List of industries of interest.", "items": {"description": "Industry name.", "type": "string"}, "type": "array"}, "maxBudget": {"description": "Maximum budget.", "type": "float"}, "minBudget": {"description": "Minimum budget.", "type": "float"}}, "type": "object"}, "email": {"description": "The email address to receive notifications.", "type": "string"}}, "required": ["email", "criteria"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the exchange rate between two currencies and can specify a date range to obtain historical data.", "name": "getExchangeRate", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'USD'.", "type": "string"}, "endDate": {"description": "End date, default is the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, default is the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'EUR'.", "items": {"type": "string"}, "type": "array"}}, "required": ["baseCurrency", "targetCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the exchange rates of all supported currencies and cryptocurrencies.", "name": "getAllExchangeRates", "parameters": {"properties": {"baseCurrency": {"description": "The base currency code, such as 'USD'.", "type": "string"}}, "required": ["baseCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert the amount of one currency to another currency.", "name": "convertCurrency", "parameters": {"properties": {"amount": {"description": "The numerical value of the amount to be converted.", "type": "float"}, "fromCurrency": {"description": "The original currency code, such as 'JPY'.", "type": "string"}, "rounding": {"description": "Whether to round the conversion result. The default value is true.", "type": "boolean"}, "toCurrency": {"description": "The target currency code, such as 'CNY'.", "items": {"type": "string"}, "type": "array"}}, "required": ["amount", "fromCurrency", "toCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of all supported currencies and cryptocurrencies by the API.", "name": "getSupportedCurrencies", "parameters": {"properties": {"type": {"description": "Currency type. 'fiat' represents fiat currency, 'crypto' represents cryptocurrency, and the default is 'all'.", "enum": ["fiat", "crypto", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical exchange rate data for a specified currency pair.", "name": "getHistoricalRates", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'EUR'.", "type": "string"}, "date": {"description": "Specified date. The format is 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'GBP'.", "type": "string"}}, "required": ["baseCurrency", "targetCurrency", "date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get information about a specified Rappi store, including the store name, location, and operating hours.", "name": "getStoreInfo", "parameters": {"properties": {"include_hours": {"description": "Whether to include operating hours information, default is false", "type": "boolean"}, "store_id": {"description": "The unique identifier of the store", "type": "string"}}, "required": ["store_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a specified Rappi order, including the order content and current status.", "name": "getOrderDetails", "parameters": {"properties": {"include_items": {"description": "Whether to include the details of order items, default is true", "type": "boolean"}, "order_id": {"description": "The unique identifier of the order", "type": "string"}}, "required": ["order_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Rappi orders for a specified user.", "name": "getUserOrderDetails", "parameters": {"properties": {"name": {"description": "User name", "type": "string"}, "sort": {"description": "Sorting method. By default, it is sorted in reverse chronological order.", "enum": ["reverse_time", "ascend_time"], "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Process the payment for Rappi orders.", "name": "processPayment", "parameters": {"properties": {"amount": {"description": "Payment amount", "type": "float"}, "currency": {"description": "Currency type, such as 'USD', 'COP'", "type": "string"}, "order_id": {"description": "The unique identifier of the order", "type": "string"}, "payment_method": {"description": "Payment method, such as 'credit_card', 'paypal', 'cash'", "type": "string"}}, "required": ["order_id", "payment_method", "amount", "currency"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve information about a Mixcloud user, including their preferences and public activities on Mixcloud.", "name": "getUserInfo", "parameters": {"properties": {"include_favorites": {"description": "Whether to include the user's favorite content. The default value is false", "type": "boolean"}, "username": {"description": "The user's Mixcloud username", "type": "string"}}, "required": ["username"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific tracks and shows in the Mixcloud library and return the title, url, brief description, and creator.", "name": "searchContent", "parameters": {"properties": {"limit": {"description": "Number of results per page. The default value is 10", "type": "integer"}, "page": {"description": "Page number for pagination. The default value is 1", "type": "integer"}, "query": {"description": "Search query string", "type": "string"}, "type": {"description": "Type of content to search for, such as 'track','show', 'user'. The default value is 'all'", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a single track and show on Mixcloud, including the creative background, duration, and tags.", "name": "getTrackDetails", "parameters": {"properties": {"track_url": {"description": "The Mixcloud URL of the track", "items": {"type": "string"}, "type": "array"}}, "required": ["track_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream audio content directly from Mixcloud.", "name": "streamAudioContent", "parameters": {"properties": {"quality": {"description": "The quality of the stream, such as 'high','medium', 'low'. The default value is 'high'", "type": "string"}, "stream_url": {"description": "The streaming URL of the audio content", "type": "string"}}, "required": ["stream_url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query waifu images from the database according to the specified tags and sorting options.", "name": "getWaifuImages", "parameters": {"properties": {"limit": {"description": "The number of images returned per query. The default is 10.", "enum": [10, 20, 30, 40, 50], "type": "integer"}, "sort": {"description": "The sorting method of the images, such as sorting by the latest or the hottest. The default is 'latest'.", "enum": ["latest", "hot"], "type": "string"}, "tags": {"description": "A list of tags for waifu images that the user wants to query.", "items": {"type": "string"}, "type": "array"}}, "required": ["tags"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a single waifu image.", "name": "getWaifuDetails", "parameters": {"properties": {"image_id": {"description": "The ID of the waifu image for which detailed information needs to be retrieved.", "type": "string"}}, "required": ["image_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a waifu image collage based on the search criteria.", "name": "createWaifuCollage", "parameters": {"properties": {"format": {"description": "Image format of the collage, default is 'png'.", "enum": ["png", "jpeg", "webp"], "type": "string"}, "search_criteria": {"description": "Search criteria for generating the collage.", "properties": {"height": {"description": "Height of the collage, default is 600.", "enum": [600, 900, 1200], "type": "integer"}, "tags": {"description": "Tags of waifu images included in the collage.", "items": {"type": "string"}, "type": "array"}, "width": {"description": "Width of the collage, default is 800.", "enum": [800, 1200, 1600], "type": "integer"}}, "type": "object"}}, "required": ["search_criteria"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search articles from around the world by keywords.", "name": "searchArticles", "parameters": {"properties": {"keywords": {"description": "Keywords that the user wants to search for.", "items": {"type": "string"}, "type": "array"}, "language": {"description": "The language code of the article. For example, 'en' represents English. The default value is 'en'.", "type": "string"}, "limit": {"description": "The limit on the number of articles to return. The default value is 10.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Filter articles from around the world by category or language.", "name": "filterArticles", "parameters": {"properties": {"category": {"description": "The category of the article, with the default value being 'general'.", "type": "string"}, "language": {"description": "The language code of the article, such as 'en' for English, with the default value being 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve top news headlines or articles from around the world published within a specific time period.", "name": "getHeadlines", "parameters": {"properties": {"domains": {"description": "List of news source domains, default is empty.", "items": {"description": "Domain name of the news source.", "type": "string"}, "type": "array"}, "endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve trending news from around the world and generate a news feed.", "name": "getTrendingNews", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'general'.", "type": "string"}, "country": {"description": "Country code, e.g., 'US' for the United States.", "type": "string"}, "refreshInterval": {"description": "The news refresh interval in minutes. The default value is 60.", "type": "integer"}}, "required": ["country"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a random string with the specified length, characters, and format.", "name": "generateRandomString", "parameters": {"properties": {"includeDigits": {"description": "Whether to include digits, default is true", "type": "boolean"}, "includeSymbols": {"description": "Whether to include symbols, default is false", "type": "boolean"}, "length": {"description": "The length of the random string", "type": "integer"}}, "required": ["length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate random numbers with specific ranges and formats.", "name": "generateRandomNumber", "parameters": {"properties": {"decimals": {"description": "The number of digits after the decimal point, default is 0", "type": "integer"}, "limit": {"description": "The number of generated numbers, default is 5", "type": "integer"}, "max": {"description": "The maximum value of the random number", "type": "integer"}, "min": {"description": "The minimum value of the random number", "type": "integer"}}, "required": ["min", "max"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a random date with customizable format, range, and frequency.", "name": "generateRandomDate", "parameters": {"properties": {"endYear": {"description": "The ending year, default is the current year", "type": "integer"}, "format": {"description": "The format of the date, default is 'YYYY-MM-DD'", "type": "string"}, "startYear": {"description": "The starting year, default is 1900", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a random time with a range of format options and time zones.", "name": "generateRandomTime", "parameters": {"properties": {"timeZone": {"description": "Time zone, default is 'UTC'", "type": "string"}, "twentyFourHours": {"description": "Whether to use the 24-hour format, default is true", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for a list of healthcare providers registered in the United States by name, location, or specialty.", "name": "searchProviders", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results. The default is 10.", "type": "integer"}, "location": {"description": "The location of the provider, in the format 'City, State' (in English). The default value is empty.", "type": "string"}, "name": {"description": "The name of the provider. The default value is empty.", "type": "string"}, "specialty": {"description": "The specialty of the provider (in English). The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the details of a specific provider registered in the United States, including their NPI number, contact information, and practice details.", "name": "getProviderDetails", "parameters": {"properties": {"npi": {"description": "The NPI number of the provider", "type": "string"}}, "required": ["npi"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update and maintain information of providers registered in the United States to ensure the most accurate and up-to-date data is provided.", "name": "updateProviderInfo", "parameters": {"properties": {"contact": {"description": "The contact information of the provider, default is empty", "properties": {"email": {"description": "Email address, default is empty", "type": "string"}, "phone": {"description": "Contact phone number, default is empty", "type": "string"}}, "type": "object"}, "npi": {"description": "The NPI number of the provider", "type": "string"}, "practiceDetails": {"description": "The practice details of the provider, in English, default is empty", "properties": {"address": {"description": "Practice address, in English, default is empty", "type": "string"}, "specialty": {"description": "Specialty, in English, default is empty", "type": "string"}}, "type": "object"}}, "required": ["npi"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search research articles on the arXiv platform based on various fields such as author name, keywords, and publication date.", "name": "searchArticles", "parameters": {"properties": {"author": {"description": "The full name of the author. The default value is empty.", "type": "string"}, "categories": {"description": "List of article categories. The default value is empty.", "items": {"description": "A single article category", "type": "string"}, "type": "array"}, "keywords": {"description": "List of search keywords", "items": {"description": "A single search keyword, in English", "type": "string"}, "type": "array"}, "publishedAfter": {"description": "The earliest publication date of the article, in the format of YYYY-MM-DD. The default value is the current date.", "type": "string"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the metadata of a specific article on the arXiv platform, including its title, authors, abstract, and publication date.", "name": "getArticleMetadata", "parameters": {"properties": {"articleId": {"description": "The unique identifier of the article", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the full text of a specific article on the arXiv platform. There are certain usage restrictions, and a part of the full text is returned.", "name": "getFullText", "parameters": {"properties": {"acceptFormat": {"description": "The desired full text format, such as 'pdf' or 'text'. The default value is 'pdf'", "type": "string"}, "articleId": {"description": "The unique identifier of the article", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a shortened URL for the given long URL and provide options for custom short links.", "name": "shortenUrl", "parameters": {"properties": {"domain": {"description": "The domain name of the custom short link, default is bit.ly.", "type": "string"}, "longUrl": {"description": "The long URL that needs to be shortened.", "type": "string"}, "tags": {"description": "An array of tags used for categorizing and tracking URL performance.", "items": {"description": "A single tag.", "type": "string"}, "type": "array"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve statistics for a specified shortened URL, such as click counts, referral sources, and geographical locations.", "name": "getMetrics", "parameters": {"properties": {"shortUrl": {"description": "The shortened URL for which statistics are to be retrieved.", "type": "string"}, "unit": {"description": "The time unit. Optional values include minute, hour, day, week, month. The default is hour.", "enum": ["minute", "hour", "day", "week", "month"], "type": "string"}, "units": {"description": "The number of time spans. The default is 1.", "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "type": "integer"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Organize multiple links into a single campaign to track overall performance metrics.", "name": "organizeCampaign", "parameters": {"properties": {"campaignName": {"description": "The name of the campaign.", "type": "string"}, "endDate": {"description": "The end date of the campaign, in the format YYYY-MM-DD. If not set, the campaign will continue indefinitely.", "type": "string"}, "links": {"description": "An array of shortened URLs to add to the campaign.", "items": {"description": "A single shortened URL.", "type": "string"}, "type": "array"}, "startDate": {"description": "The start date of the campaign, in the format YYYY-MM-DD. The default is the current date.", "type": "string"}}, "required": ["campaignName", "links"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get a random activity and all its details.", "name": "getRandomActivity", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of all available activities by category.", "name": "getActivitiesByCategory", "parameters": {"properties": {"category": {"description": "The category of the activity.", "type": "string"}}, "required": ["category"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for activities using specific parameters such as participants, difficulty level, and activity type.", "name": "searchActivities", "parameters": {"properties": {"accessibility": {"description": "The accessibility of the activity, ranging from 0.0 (easiest) to 1.0 (most difficult). The default value is 0.0.", "type": "float"}, "difficulty": {"description": "The difficulty level of the activity, ranging from 0.0 (easiest) to 1.0 (most difficult). The default value is 0.5.", "type": "float"}, "participants": {"description": "The number of people participating in the activity. The default value is 1.", "type": "integer"}, "price": {"description": "The budget cost of the activity, ranging from 0.0 (free) to 1.0 (expensive). The default value is 0.0.", "type": "float"}, "type": {"description": "The type of activity, e.g., educational, recreational, social, etc. The default is empty, indicating all types.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Recommendation of similar activities.", "name": "recommandActivities", "parameters": {"properties": {"desc": {"description": "Activity description.", "type": "string"}, "name": {"description": "Activity name.", "type": "string"}, "requirement": {"description": "Additional requirements for the activity.", "type": "string"}}, "required": ["name", "desc"], "type": "object"}}, "type": "function"}, {"function": {"description": "Enrich activity content.", "name": "enrichActivities", "parameters": {"properties": {"desc": {"description": "Activity description.", "type": "string"}, "name": {"description": "Activity name.", "type": "string"}}, "required": ["name", "desc"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Accurately validate the given US street address and provide authentication.", "name": "validateAddress", "parameters": {"properties": {"city": {"description": "City name", "type": "string"}, "include_geocode": {"description": "Whether to include geocoding information, default is false", "type": "boolean"}, "state": {"description": "State abbreviation, e.g., CA for California", "type": "string"}, "street": {"description": "Street address", "type": "string"}, "zipcode": {"description": "Zip code, default value is empty", "type": "string"}}, "required": ["street", "city", "state"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add geocoding information for a given US address.", "name": "addGeocode", "parameters": {"properties": {"address": {"description": "Full US street address and city name, separated by a comma", "type": "string"}, "information": {"description": "Geocoding information", "type": "string"}}, "required": ["address", "information"], "type": "object"}}, "type": "function"}, {"function": {"description": "If the given US address is invalid or inaccurate, return suggested matching results.", "name": "suggestAddresses", "parameters": {"properties": {"input_address": {"description": "The incomplete or inaccurate address entered by the user", "type": "string"}, "max_suggestions": {"description": "The maximum number of suggested addresses to return, default is 5", "type": "integer"}}, "required": ["input_address"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the current weather conditions at a specified airport, including METAR and TAF reports.", "name": "getAirportWeather", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'JFK' represents John F. Kennedy International Airport in New York.", "type": "string"}, "includePIREP": {"description": "Whether to include Pilot Report (PIREP) data. The default value is false.", "type": "boolean"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain important meteorological information and pilot meteorological information in the United States.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning to be obtained, such as 'SIGMET' or 'AIRMET'. The default value is all types.", "type": "string"}, "region": {"description": "The region code for which meteorological information needs to be obtained.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the delay information of a specified airport.", "name": "getAirportDelays", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'LAX' represents Los Angeles International Airport.", "type": "string"}, "delayType": {"description": "The type of delay. For example, 'weather' represents weather-related delays. The default value is all types.", "type": "string"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random programming-related quote.", "name": "getRandomQuote", "parameters": {"properties": {"language": {"description": "The language in which the quote is returned. Defaults to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve programming-related quotes by a specific author.", "name": "getQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The name of the author.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page, defaulting to 10.", "type": "integer"}, "page": {"description": "The page number of the results, defaulting to the first page.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve specific programming-related quotes by tag.", "name": "getQuotesByTag", "parameters": {"properties": {"sortBy": {"description": "The sorting method. The available values are 'author' or 'date', and the default value is 'author'.", "type": "string"}, "sortOrder": {"description": "The sorting order. The available values are 'asc' or 'desc', and the default value is 'asc'.", "type": "string"}, "tag": {"description": "The tag of the quote.", "type": "string"}}, "required": ["tag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new programming quote to the collection.", "name": "addQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "tags": {"description": "The list of tags related to the quote, default is empty.", "items": {"description": "The name of the tag.", "type": "string"}, "type": "array"}, "text": {"description": "The content of the quote.", "type": "string"}}, "required": ["text", "author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update a specific programming quote in the collection.", "name": "updateQuote", "parameters": {"properties": {"author": {"description": "The updated author name.", "type": "string"}, "id": {"description": "The unique identifier of the quote to be updated.", "type": "string"}, "text": {"description": "The updated content of the quote.", "type": "string"}}, "required": ["id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for songs on the Gaana platform based on keywords, movie names, artist names, or album names.", "name": "searchSongs", "parameters": {"properties": {"filter": {"description": "The type of search filter, which can be 'artist', 'album', 'track', and the default value is 'all'.", "enum": ["artist", "album", "track", "all"], "type": "string"}, "limit": {"description": "The number of search results displayed per page, and the default value is 10.", "type": "integer"}, "page": {"description": "The page number of the search results, and the default value is 1.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specific song on the Gaana platform.", "name": "getSongDetails", "parameters": {"properties": {"song": {"description": "The name of the song.", "type": "string"}}, "required": ["song"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the MP3 file link of the song searched on the Gaana platform.", "name": "getSongMP3", "parameters": {"properties": {"quality": {"description": "The requested audio quality level, which can be 'low','medium', 'high'. The default value is 'high'.", "enum": ["low", "medium", "high"], "type": "string"}, "song": {"description": "The name of the song.", "type": "string"}}, "required": ["song"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definition of an English word.", "name": "getWordDefinition", "parameters": {"properties": {"partOfSpeech": {"description": "Specify the part of speech to be queried. The default value is all parts of speech.", "type": "string"}, "word": {"description": "The English word to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation of an English word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The format of the pronunciation file, default is mp3.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The English word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get example sentences of English words.", "name": "getWordExamples", "parameters": {"properties": {"useCase": {"description": "Specify the usage scenario of the example sentences, defaulting to all scenarios.", "type": "string"}, "word": {"description": "The English word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the part of speech of an English word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"word": {"description": "The English word whose part of speech is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query waifu images from the database according to the specified tags and sorting options.", "name": "getWaifuImages", "parameters": {"properties": {"limit": {"description": "The number of images returned per query. The default is 10.", "enum": [10, 20, 30, 40, 50], "type": "integer"}, "sort": {"description": "The sorting method of the images, such as sorting by the latest or the hottest. The default is 'latest'.", "enum": ["latest", "hot"], "type": "string"}, "tags": {"description": "A list of tags for waifu images that the user wants to query.", "items": {"type": "string"}, "type": "array"}}, "required": ["tags"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a single waifu image.", "name": "getWaifuDetails", "parameters": {"properties": {"image_url": {"description": "The URL of the waifu image for which detailed information needs to be retrieved.", "type": "string"}}, "required": ["image_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a waifu image collage based on the search criteria.", "name": "createWaifuCollage", "parameters": {"properties": {"format": {"description": "Image format of the collage, default is 'png'.", "enum": ["png", "jpeg", "webp"], "type": "string"}, "search_criteria": {"description": "Search criteria for generating the collage.", "properties": {"height": {"description": "Height of the collage, default is 600.", "enum": [600, 900, 1200], "type": "integer"}, "tags": {"description": "Tags of waifu images included in the collage.", "items": {"type": "string"}, "type": "array"}, "width": {"description": "Width of the collage, default is 800.", "enum": [800, 1200, 1600], "type": "integer"}}, "type": "object"}}, "required": ["search_criteria"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a waifu image collage based on existing images.", "name": "createWaifuCollageByImages", "parameters": {"properties": {"images": {"description": "Images used to generate the collage.", "items": {"type": "string"}, "type": "array"}}, "required": ["images"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search articles from all over the world by keywords.", "name": "searchArticles", "parameters": {"properties": {"keywords": {"description": "The keywords that the user wants to search for, in English.", "type": "string"}, "limit": {"description": "The limit on the number of articles to be returned. The default value is 10.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for relevant articles based on the author.", "name": "searchAuthorsArticles", "parameters": {"properties": {"authors": {"description": "Author.", "items": {"type": "string"}, "type": "array"}, "limit": {"description": "The limit on the number of articles to return, with a default value of 10.", "type": "integer"}}, "required": ["authors"], "type": "object"}}, "type": "function"}, {"function": {"description": "Filter articles from around the world by category or language.", "name": "filterArticles", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'general'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve top headlines from around the world published within a specific time period.", "name": "getHeadlines", "parameters": {"properties": {"domains": {"description": "List of news source domains, default is empty.", "items": {"description": "Domain name of the news source.", "type": "string"}, "type": "array"}, "endDate": {"description": "End date, in the format 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve trending news from around the world and generate a news feed.", "name": "getTrendingNews", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'general'.", "type": "string"}, "country": {"description": "Country code, e.g., 'US' for the United States.", "type": "string"}, "refreshInterval": {"description": "The news refresh interval in minutes. The default value is 60.", "type": "integer"}}, "required": ["country"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve information about a specific music artist, including their name, aliases, and representative works.", "name": "retrieveArtistInfo", "parameters": {"properties": {"artist": {"description": "Artist.", "type": "string"}, "include_aliases": {"description": "Whether to include the artist's aliases. The default value is true.", "type": "boolean"}}, "required": ["artist"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about a specific music album, including only the release date, cover art, and track list.", "name": "getAlbumInfo", "parameters": {"properties": {"album": {"description": "Album.", "type": "string"}, "include_tracks": {"description": "Whether to include the track list of the album. The default value is true.", "type": "boolean"}}, "required": ["album"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a music single, including only the artist, background, album it belongs to, duration, and recording location.", "name": "getTrackDetails", "parameters": {"properties": {"include_artist": {"description": "Whether to include the artist information of the single. The default value is true.", "type": "boolean"}, "track": {"description": "The single.", "type": "string"}}, "required": ["track"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for music based on various criteria such as artist name, album title, track name, or ISRC code.", "name": "searchMusic", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return. The default value is 10.", "type": "integer"}, "offset": {"description": "The offset of the search results. The default value is 0.", "type": "integer"}, "query": {"description": "The search query, which can be an artist name, album title, track name, or ISRC code.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Brazilian company information, including name, address, and registration details.", "name": "retrieveCompanyInfo", "parameters": {"properties": {"cnpj": {"description": "The National Registry of Legal Entities number of the Brazilian company", "type": "string"}, "include_address": {"description": "Whether to include the company's address information. The default is true", "type": "boolean"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the tax information of Brazilian companies, such as legal status and tax payments.", "name": "getTaxInfo", "parameters": {"properties": {"cnpj": {"description": "The National Registry of Legal Entities number of the Brazilian company", "type": "string"}, "year": {"description": "The year of the query, defaulting to the current year", "type": "integer"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}, {"function": {"description": "View the shareholders and their ownership information of Brazilian companies.", "name": "checkShareholders", "parameters": {"properties": {"cnpj": {"description": "The national legal entity registration number of the Brazilian company", "type": "string"}, "shareholder_type": {"description": "Shareholder type, for example: 'individual' or 'company', default is 'all'", "type": "string"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time data of sensors in UK cities.", "name": "getRealTimeSensorData", "parameters": {"properties": {"city": {"description": "The name of the city to be queried, in English.", "type": "string"}, "limit": {"description": "The limit on the number of data returned, default is 100.", "type": "integer"}, "sensorType": {"description": "The type of sensor, default is 'all'.", "enum": ["temperature", "humidity", "air_quality", "all"], "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data of sensors in the UK.", "name": "getHistoricalSensorData", "parameters": {"properties": {"city": {"description": "The name of the city to be queried, in English.", "type": "string"}, "endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "sensorType": {"description": "Sensor type, default is 'all'.", "enum": ["temperature", "humidity", "air_quality", "all"], "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use built-in visualization tools to interpret data of UK cities.", "name": "getCityDataVisualization", "parameters": {"properties": {"city": {"description": "The name of the city to be visualized, in English.", "type": "string"}, "data": {"description": "An array of data to be visualized.", "items": {"type": "string"}, "type": "array"}, "dataTypes": {"description": "The type of data to be visualized.", "enum": ["traffic", "air_quality", "weather", "traffic"], "type": "string"}, "timeRange": {"description": "The time range for visualization, defaulting to the last 24 hours.", "properties": {"end": {"description": "The end time, in the format of 'YYYY-MM-DD HH:MM:SS'.", "type": "string"}, "start": {"description": "The start time, in the format of 'YYYY-MM-DD HH:MM:SS'.", "type": "string"}}, "type": "object"}}, "required": ["city", "data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the UK city dataset from any location.", "name": "accessCityDataFromAnywhere", "parameters": {"properties": {"apiKey": {"description": "The user's API key.", "type": "string"}, "city": {"description": "The name of the city for which data needs to be accessed, in English.", "type": "string"}, "dataType": {"description": "The type of data to be accessed.", "enum": ["traffic", "air_quality", "weather"], "type": "string"}}, "required": ["city", "dataType", "apiKey"], "type": "object"}}, "type": "function"}, {"function": {"description": "Integrate UK city data with other applications or services.", "name": "integrateCityDataWithApps", "parameters": {"properties": {"appDetails": {"description": "Details of the application.", "properties": {"appName": {"description": "The name of the application.", "type": "string"}, "appVersion": {"description": "The version of the application.", "type": "string"}}, "type": "object"}, "city": {"description": "The name of the city for which data needs to be integrated, in English.", "type": "string"}, "dataTypes": {"description": "An array of data types to be integrated. Defaults to all types.", "items": {"enum": ["traffic", "air_quality", "weather", "all"], "type": "string"}, "type": "array"}}, "required": ["city", "appDetails"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the high scores of RuneScape players.", "name": "getPlayerScores", "parameters": {"properties": {"playerName": {"description": "The player's username", "type": "string"}, "skill": {"description": "The name of the skill to retrieve. Defaults to 'all' for all skills", "enum": ["all", "attack", "defense", "strength", "hitpoints", "ranged", "prayer", "magic", "cooking", "woodcutting", "fletching", "fishing", "firemaking", "crafting", "smithing", "mining", "herblore", "agility", "thieving", "slayer", "farming", "runecrafting", "hunter", "construction"], "type": "string"}}, "required": ["playerName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about specific items in RuneScape.", "name": "getItemInformation", "parameters": {"properties": {"includeStats": {"description": "Whether to include the item's statistics. Defaults to true.", "type": "boolean"}, "items": {"description": "Items", "items": {"type": "string"}, "type": "array"}}, "required": ["items"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about RuneScape quests.", "name": "getQuests", "parameters": {"properties": {"difficulty": {"description": "The difficulty of the quests to retrieve. Defaults to 'all' for all difficulties", "enum": ["all", "easy", "medium", "hard", "elite", "master"], "type": "string"}, "status": {"description": "The status of the quests to retrieve. Defaults to 'all' for all quests", "enum": ["all", "completed", "started", "not_started"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Perform in-game actions in RuneScape, such as buying and selling items, casting spells, etc.", "name": "performGameAction", "parameters": {"properties": {"action": {"description": "The type of in-game action to perform", "enum": ["buy", "sell", "cast_spell", "equip_item"], "type": "string"}, "details": {"description": "Detailed parameters for performing the action", "properties": {"items": {"description": "Items, required when buying and selling items", "items": {"type": "string"}, "type": "array"}, "quantity": {"description": "The quantity of items, required when buying and selling items", "type": "integer"}, "spellName": {"description": "The name of the spell, required when casting a spell", "type": "string"}}, "type": "object"}}, "required": ["action", "details"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Kroger product data based on the provided search parameters, such as product name, UPC code, or location.", "name": "searchProducts", "parameters": {"properties": {"limit": {"description": "The maximum number of returned results. The default value is 10.", "type": "integer"}, "location": {"description": "The location of the user, used to find nearby Kroger stores. The format is 'City, State'. The default value is empty.", "type": "string"}, "query": {"description": "The product name that the user wants to search for.", "items": {"type": "string"}, "type": "array"}, "upc": {"description": "The Universal Product Code (UPC) of the product. The default value is empty.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find Kroger stores based on location, type, and other search criteria.", "name": "locateStores", "parameters": {"properties": {"radius": {"description": "Search radius (in miles), default value is 5.0.", "type": "float"}, "storeType": {"description": "Store type, such as'supermarket' or 'pharmacy', default value is empty.", "type": "string"}, "zipCode": {"description": "Zip code used for the search.", "type": "string"}}, "required": ["zipCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access Kroger's extensive recipe data with full descriptions, ingredients, and instructions.", "name": "getRecipes", "parameters": {"properties": {"cuisine": {"description": "Cuisine type, such as 'Italian' or 'Mexican'. The default value is empty.", "type": "string"}, "diet": {"description": "Dietary preferences, such as 'Vegetarian' or 'Gluten-Free'. The default value is empty.", "type": "string"}, "keywords": {"description": "An array of keywords used to search for recipes. The default value is empty.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access user-specific Kroger data such as shopping lists, purchase history, and loyalty program information.", "name": "getUserData", "parameters": {"properties": {"dataType": {"description": "The type of data requested, such as 'Shopping List', 'Purchase History'.", "type": "string"}, "dateRange": {"description": "The date range for the purchase history, with the default value being the past month.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD', with the default value being the current date.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD', with the default value being the current date minus 30 days.", "type": "string"}}, "type": "object"}, "userId": {"description": "The user's unique identifier.", "type": "string"}}, "required": ["userId", "dataType"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a shortened URL for the given long URL and provide options for custom short links.", "name": "shortenUrl", "parameters": {"properties": {"domain": {"description": "The domain name of the custom short link, default is bit.ly.", "type": "string"}, "longUrl": {"description": "The long URL that needs to be shortened.", "type": "string"}, "tags": {"description": "An array of tags used for categorizing and tracking URL performance.", "items": {"description": "A single tag.", "type": "string"}, "type": "array"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve statistics for a specified shortened URL, such as click counts, referral sources, and geographical locations.", "name": "getMetrics", "parameters": {"properties": {"shortUrl": {"description": "The shortened URL for which statistics are to be retrieved.", "type": "string"}, "unit": {"description": "The time unit. Optional values include minute, hour, day, week, month. The default is hour.", "enum": ["minute", "hour", "day", "week", "month"], "type": "string"}, "units": {"description": "The number of time spans. The default is 1.", "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "type": "integer"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Organize multiple links into a single campaign to track overall performance metrics.", "name": "organizeCampaign", "parameters": {"properties": {"campaignName": {"description": "The name of the campaign.", "type": "string"}, "endDate": {"description": "The end date of the campaign, in the format YYYY-MM-DD. If not set, the campaign will continue indefinitely.", "type": "string"}, "links": {"description": "An array of shortened URLs to add to the campaign.", "items": {"description": "A single shortened URL.", "type": "string"}, "type": "array"}, "startDate": {"description": "The start date of the campaign, in the format YYYY-MM-DD. The default is the current date.", "type": "string"}}, "required": ["campaignName", "links"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the population statistics data of specific regions in Denmark.", "name": "getPopulationStatistics", "parameters": {"properties": {"region": {"description": "The region to be queried.", "type": "string"}, "year": {"description": "The year to be queried.", "type": "integer"}}, "required": ["year", "region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Query specific Danish government data based on keywords, location, or data filters.", "name": "searchGovernmentData", "parameters": {"properties": {"filters": {"description": "Additional filters to be applied to the query.", "properties": {"endDate": {"description": "End date, defaulting to the current year.", "type": "string"}, "startDate": {"description": "Start date, defaulting to the current year.", "type": "string"}}, "type": "object"}, "keywords": {"description": "List of keywords for the query.", "items": {"type": "string"}, "type": "array"}, "location": {"description": "Geographical location for the query, defaulting to the whole country.", "type": "string"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create reports and dashboards containing data from the Danish government using advanced data visualization capabilities.", "name": "createDataVisualization", "parameters": {"properties": {"dataSources": {"description": "List of data sources.", "items": {"type": "string"}, "type": "array"}, "includeCharts": {"default": true, "description": "Whether to include charts, default is true.", "type": "boolean"}, "reportType": {"description": "Report type, such as 'Annual Report', 'Quarterly Report', etc.", "type": "string"}}, "required": ["reportType", "dataSources"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain historical data of Denmark dating back to the 1980s.", "name": "getHistoricalData", "parameters": {"properties": {"dataType": {"description": "The type of data, such as 'population', 'economy', etc.", "type": "string"}, "endYear": {"description": "The ending year.", "type": "integer"}, "startYear": {"description": "The starting year.", "type": "integer"}}, "required": ["dataType", "startYear", "endYear"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve traffic alerts issued by the Arizona Department of Transportation (ADOT) that may affect driving conditions.", "name": "getTrafficAlerts", "parameters": {"properties": {"region": {"description": "The name of the region for which traffic alerts need to be retrieved.", "type": "string"}, "severity": {"description": "The severity level of the alerts. The available values include 'low','medium', 'high'. The default value is'medium'.", "enum": ["low", "medium", "high"], "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time information about road conditions in Arizona, including accidents, construction, and traffic flow.", "name": "getRoadConditions", "parameters": {"properties": {"includeIncidents": {"description": "Whether to include accident information. The default value is false.", "type": "boolean"}, "roadName": {"description": "The name of the road.", "type": "string"}}, "required": ["roadName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a route considering the current traffic conditions in Arizona.", "name": "planRoute", "parameters": {"properties": {"avoidAreas": {"description": "List of areas to avoid, default is empty.", "items": {"properties": {"latitude": {"description": "Latitude of the center point of the area.", "type": "float"}, "longitude": {"description": "Longitude of the center point of the area.", "type": "float"}, "radius": {"description": "Radius of the area to avoid (in meters).", "type": "integer"}}, "type": "object"}, "type": "array"}, "endPoint": {"description": "Information about the end point location.", "properties": {"latitude": {"description": "Latitude of the end point.", "type": "float"}, "longitude": {"description": "Longitude of the end point.", "type": "float"}}, "type": "object"}, "startPoint": {"description": "Information about the start point location.", "properties": {"latitude": {"description": "Latitude of the start point.", "type": "float"}, "longitude": {"description": "Longitude of the start point.", "type": "float"}}, "type": "object"}}, "required": ["startPoint", "endPoint"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the real-time images of Arizona's statewide traffic cameras.", "name": "getCameraImages", "parameters": {"properties": {"cameraId": {"description": "Camera ID.", "type": "integer"}, "imageSize": {"description": "Image size. The available values are'small','medium', 'large'. The default value is'medium'.", "enum": ["small", "medium", "large"], "type": "string"}}, "required": ["cameraId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert an address to geographical coordinates.", "name": "geocode", "parameters": {"properties": {"address": {"description": "The address to be converted.", "type": "string"}, "limit": {"description": "The maximum number of returned results, with a default value of 5.", "type": "integer"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the optimal route planning from point A to point B for cars, bicycles, or pedestrians.", "name": "getRoute", "parameters": {"properties": {"end": {"description": "The geographical coordinates of the destination, in the format of 'latitude,longitude'.", "type": "string"}, "locale": {"description": "Localization language setting, the default value is 'en'.", "enum": ["en", "de", "fr", "zh"], "type": "string"}, "points_encoded": {"description": "Whether to encode the route points, the default value is true.", "type": "boolean"}, "start": {"description": "The geographical coordinates of the starting point, in the format of 'latitude,longitude'.", "type": "string"}, "vehicle": {"description": "Mode of transportation, the optional values are 'car', 'bike', 'foot', and the default value is 'car'.", "enum": ["car", "bike", "foot"], "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time traffic data.", "name": "getTrafficInfo", "parameters": {"properties": {"bbox": {"description": "The bounding box of the query area, in the format of 'latitude of the southwest corner, longitude of the southwest corner, latitude of the northeast corner, longitude of the northeast corner'.", "type": "string"}, "time_interval": {"description": "Time interval (in seconds), with a default value of 300.", "type": "integer"}}, "required": ["bbox"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the nearest address based on geographical coordinates.", "name": "reverseGeocode", "parameters": {"properties": {"location": {"description": "Geographical coordinates, in the format of 'latitude,longitude'.", "type": "string"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve meaningful location information from latitude and longitude coordinates.", "name": "LatLonToLocation", "parameters": {"properties": {"language": {"description": "The language of the returned result. The default value is 'zh'.", "enum": ["zh", "en", "de", "fr"], "type": "string"}, "location": {"description": "The latitude and longitude coordinates to be converted, in the format 'longitude,latitude'.", "type": "string"}, "radius": {"description": "The search radius (in meters). The default value is 50.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve synonyms of a specific word.", "name": "getSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The word for which synonyms are to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the definition of an English word.", "name": "getWordDefinition", "parameters": {"properties": {"partOfSpeech": {"description": "Specify the part of speech to be queried. The default value is all parts of speech.", "type": "string"}, "word": {"description": "The English word to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get example sentences of English words.", "name": "getWordExamples", "parameters": {"properties": {"useCase": {"description": "Specify the usage scenario of the example sentences, defaulting to all scenarios.", "type": "string"}, "word": {"description": "The English word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the part of speech of an English word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"word": {"description": "The English word whose part of speech is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation of an English word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The format of the pronunciation file, default is mp3.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The English word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Check the availability of a specific trademark in a specified country/region.", "name": "checkTrademarkAvailability", "parameters": {"properties": {"country": {"description": "The country/region code for trademark inspection.", "type": "string"}, "trademark": {"description": "The trademark name to be checked.", "type": "string"}}, "required": ["trademark", "country"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the authoritative definition of a word.", "name": "getWordDefinition", "parameters": {"properties": {"useCache": {"description": "Whether to use the cached result. The default value is true.", "type": "boolean"}, "word": {"description": "The word for which the definition needs to be retrieved.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"limit": {"description": "The limit on the number of parts of speech to return. The default value is 3.", "type": "integer"}, "word": {"description": "The word for which to obtain the part of speech.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get authoritative example sentences using a specific word.", "name": "getWordExamples", "parameters": {"properties": {"maxExamples": {"description": "The maximum number of example sentences to return. The default value is 5.", "type": "integer"}, "word": {"description": "The word for which example sentences are to be obtained.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for authoritative images related to a specific word.", "name": "getWordImages", "parameters": {"properties": {"imageType": {"description": "Image type, such as 'clipart' or 'photo'. The default value is 'photo'.", "enum": ["clipart", "photo", "lineart"], "type": "string"}, "word": {"description": "The word for which images need to be searched.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation information of a word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "Audio format, supports'mp3' or 'wav', and the default value is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The word for which the pronunciation needs to be obtained.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query malware data based on various filters such as file name, MD5 hash, or tags.", "name": "queryMalwareData", "parameters": {"properties": {"filename": {"description": "The file name to query, default is empty", "type": "string"}, "limit": {"description": "The limit on the number of returned results, default is 100", "type": "integer"}, "md5": {"description": "The MD5 hash value to query, default is empty", "type": "string"}, "tag": {"description": "The tag to query, default is empty", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific malware sample, including the sample source, timestamp, detection rate, and relevant metadata.", "name": "retrieveMalwareDetails", "parameters": {"properties": {"sample_id": {"description": "The unique identifier of the malware sample", "type": "string"}}, "required": ["sample_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Submit a new malware sample to the database for analysis and include it in the MalwareBazaar collection.", "name": "submitMalwareSample", "parameters": {"properties": {"delivery_method": {"description": "The delivery method of the malware, default is 'email'", "type": "string"}, "file": {"description": "The Base64 encoding of the malware sample file", "type": "string"}, "tags": {"description": "An array of tags related to the malware sample, default is empty", "items": {"description": "Tags related to the malware", "type": "string"}, "type": "array"}}, "required": ["file"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Perform sentiment analysis on the given text and return the sentiment tendency score.", "name": "analyzeSentiment", "parameters": {"properties": {"language": {"description": "The language code of the text, default is 'zh'.", "enum": ["zh", "en", "es", "fr", "de"], "type": "string"}, "text": {"description": "The text content that needs to be sentiment analyzed.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Categorize the given text content according to predefined categories.", "name": "categorizeContent", "parameters": {"properties": {"categories": {"description": "Predefined list of categories.", "items": {"description": "Category name.", "type": "string"}, "type": "array"}, "text": {"description": "Text content to be categorized.", "type": "string"}}, "required": ["text", "categories"], "type": "object"}}, "type": "function"}, {"function": {"description": "Extract named entities from the given text and organize these entities.", "name": "extractEntities", "parameters": {"properties": {"entityTypes": {"description": "List of entity types to be extracted. By default, all types are extracted.", "items": {"description": "Entity types, such as 'PERSON', 'ORGANIZATION', 'LOCATION', etc.", "enum": ["PERSON", "ORGANIZATION", "LOCATION", "DATE", "TIME", "MONEY", "PERCENT"], "type": "string"}, "type": "array"}, "text": {"description": "The text content from which entities need to be extracted.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Summarize long text content and extract key information.", "name": "summarizeText", "parameters": {"properties": {"summary_length": {"description": "The expected length of the summary, default is 100 words.", "enum": [50, 100, 150, 200], "type": "integer"}, "text": {"description": "The text content for which a summary needs to be generated.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Classify text into predefined categories.", "name": "classifyText", "parameters": {"properties": {"categories": {"description": "List of possible categories.", "items": {"type": "string"}, "type": "array"}, "text": {"description": "The text content to be classified.", "type": "string"}}, "required": ["text", "categories"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert the original text data into a refined dataset for training machine learning models.", "name": "refineDataset", "parameters": {"properties": {"dataset": {"description": "An array containing the original text data.", "items": {"type": "string"}, "type": "array"}, "refinement_options": {"description": "Options for data refinement, default is null.", "properties": {"lemmatize": {"description": "Whether to perform lemmatization, default is false.", "type": "boolean"}, "remove_stopwords": {"description": "Whether to remove stop words, default is false.", "type": "boolean"}}, "type": "object"}}, "required": ["dataset"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Check whether a URL is marked as unsafe by Google.", "name": "checkUrlSafety", "parameters": {"properties": {"clientInfo": {"description": "Client information object, with a default value of null.", "properties": {"clientId": {"description": "Client identifier.", "type": "string"}, "clientVersion": {"description": "Client version number.", "type": "string"}}, "type": "object"}, "url": {"description": "The URL address to be checked.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific URL being marked as insecure by Google.", "name": "getUrlThreatDetails", "parameters": {"properties": {"platformTypes": {"description": "The types of platforms to be retrieved. The default value is ['ANY_PLATFORM'].", "items": {"description": "The type of platform.", "enum": ["ANY_PLATFORM", "WINDOWS", "LINUX", "ANDROID", "OSX", "IOS", "ANY_MOBILE", "ALL_PLATFORMS"], "type": "string"}, "type": "array"}, "threatEntryTypes": {"description": "The types of threat entries to be retrieved. The default value is ['URL'].", "items": {"description": "The type of threat entry.", "enum": ["URL", "EXECUTABLE"], "type": "string"}, "type": "array"}, "url": {"description": "The URL address to be retrieved.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get candidate data for the two major parties in the United States.", "name": "getCandidateData", "parameters": {"properties": {"party": {"description": "The party the candidate belongs to, such as 'Democrat' or 'Republican'.", "type": "string"}, "year": {"description": "The election year. Defaults to the most recent election year.", "type": "integer"}}, "required": ["party"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time electoral votes of each party in each state of the United States.", "name": "getElectoralVotes", "parameters": {"properties": {"includeHistorical": {"description": "Whether to include historical data, default is false.", "type": "boolean"}, "party": {"description": "The name of the political party. If not provided, data for all parties will be returned.", "type": "string"}, "state": {"description": "The name of a state in the United States. If not provided, data for all states will be returned.", "type": "string"}}, "required": ["party"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest updates on the US presidential election.", "name": "getElectionUpdates", "parameters": {"properties": {"limit": {"description": "The number of updates to return, default is 10.", "type": "integer"}, "since": {"description": "Return updates since this date. The date format is 'YYYY-MM-DD', and the default is the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the political positions and policy proposals of a specific candidate.", "name": "getCandidatePositions", "parameters": {"properties": {"candidateId": {"description": "The unique identifier of the candidate.", "type": "string"}, "issue": {"description": "List of political issues of interest. Defaults to empty, returning all issues.", "items": {"description": "The name of the political issue.", "type": "string"}, "type": "array"}}, "required": ["candidateId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get voting statistics for a specific state or nationwide.", "name": "getVotingStatistics", "parameters": {"properties": {"ageRange": {"description": "The age range of voters, defaulting to all age groups.", "properties": {"maxAge": {"description": "The maximum age, defaulting to no upper limit.", "type": "integer"}, "minAge": {"description": "The minimum age, defaulting to 18.", "type": "integer"}}, "type": "object"}, "gender": {"description": "The gender of voters. The available values are 'Male', 'Female', 'Other', defaulting to all genders.", "type": "string"}, "state": {"description": "The name of a U.S. state. If not provided, nationwide data will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert the given color value to the specified format.", "name": "convertColor", "parameters": {"properties": {"color": {"description": "The original color value, in Hex or RGB format.", "type": "string"}, "targetFormat": {"description": "The target color format. Optional values are 'RGB', 'Hex', 'HSL'.", "type": "string"}}, "required": ["color", "targetFormat"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the complementary color of the given color.", "name": "getComplementaryColor", "parameters": {"properties": {"color": {"description": "The original color value, in Hex format.", "type": "string"}}, "required": ["color"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate the grayscale version of a color for monochromatic designs.", "name": "generateGrayscale", "parameters": {"properties": {"color": {"description": "The original color value in Hex format.", "type": "string"}}, "required": ["color"], "type": "object"}}, "type": "function"}, {"function": {"description": "Calculate the contrast between two colors.", "name": "calculateContrast", "parameters": {"properties": {"color1": {"description": "The first color value, in Hex format.", "type": "string"}, "color2": {"description": "The second color value, in Hex format.", "type": "string"}}, "required": ["color1", "color2"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the train schedule for a specific station or route in Spain.", "name": "getTrainSchedule", "parameters": {"properties": {"date": {"description": "Date, in the format YYYY-MM-DD", "type": "string"}, "route": {"description": "Route name, default value is empty", "type": "string"}, "station": {"description": "Station name", "type": "string"}}, "required": ["station", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Track the current location of Spanish trains in real time.", "name": "trackTrainLocation", "parameters": {"properties": {"includeStations": {"description": "Whether to include information about the stations passed through. The default is false.", "type": "boolean"}, "trainNumber": {"description": "Train number", "type": "string"}}, "required": ["trainNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest information on train delays, cancellations and other disruptions in Spain.", "name": "getTrainDisruptions", "parameters": {"properties": {"date": {"description": "Date, in the format YYYY-MM-DD", "type": "string"}, "station": {"description": "Station name, default value is empty", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the geographical location information of an IP address, including country, city, postal code, etc.", "name": "getLocationByIP", "parameters": {"properties": {"ip": {"description": "The IP address to be queried. The format must conform to the IPv4 or IPv6 standard.", "type": "string"}, "language": {"description": "The language of the returned result. The default is English.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed location information of an IP address, including time zone, currency, population, etc.", "name": "getDetailedInfoByIP", "parameters": {"properties": {"fields": {"description": "Specify the fields of the returned information. By default, all fields are returned.", "items": {"description": "Optional fields include: 'timezone', 'currency', 'population', etc.", "type": "string"}, "type": "array"}, "ip": {"description": "The IP address to be queried. The format must conform to the IPv4 or IPv6 standard.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Reverse lookup of associated domain name information based on the IP address.", "name": "getDomainByIP", "parameters": {"properties": {"ip": {"description": "The IP address to be queried. The format must conform to the IPv4 or IPv6 standard.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve statistics for a specified shortened URL, such as click counts, referral sources, and geographical locations.", "name": "getMetrics", "parameters": {"properties": {"position": {"description": "Whether geographical location is required. Defaults to true.", "type": "string"}, "shortUrl": {"description": "The shortened URL for which statistics are to be retrieved.", "type": "string"}, "unit": {"description": "Time unit. Optional values include minute, hour, day, week, month. Defaults to hour.", "enum": ["minute", "hour", "day", "week", "month"], "type": "string"}, "units": {"description": "The number of time spans. Defaults to 1.", "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "type": "integer"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Organize multiple links into a single campaign to track overall performance metrics.", "name": "organizeCampaign", "parameters": {"properties": {"campaignName": {"description": "The name of the campaign.", "type": "string"}, "endDate": {"description": "The end date of the campaign, in the format YYYY-MM-DD. If not set, the campaign will continue indefinitely.", "type": "string"}, "links": {"description": "An array of shortened URLs to add to the campaign.", "items": {"description": "A single shortened URL.", "type": "string"}, "type": "array"}, "startDate": {"description": "The start date of the campaign, in the format YYYY-MM-DD. The default is the current date.", "type": "string"}}, "required": ["campaignName", "links"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a shortened URL for the given long URL and provide options for custom short links.", "name": "shortenUrl", "parameters": {"properties": {"domain": {"description": "The domain name of the custom short link, default is bit.ly.", "type": "string"}, "longUrl": {"description": "The long URL that needs to be shortened.", "type": "string"}, "tags": {"description": "An array of tags used for categorizing and tracking URL performance.", "items": {"description": "A single tag.", "type": "string"}, "type": "array"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the high scores of RuneScape players.", "name": "getPlayerScores", "parameters": {"properties": {"playerName": {"description": "The player's username", "type": "string"}, "skill": {"description": "The name of the skill to retrieve. Defaults to 'all' for all skills", "enum": ["all", "attack", "defense", "strength", "hitpoints", "ranged", "prayer", "magic", "cooking", "woodcutting", "fletching", "fishing", "firemaking", "crafting", "smithing", "mining", "herblore", "agility", "thieving", "slayer", "farming", "runecrafting", "hunter", "construction"], "type": "string"}}, "required": ["playerName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a specific item in RuneScape.", "name": "getItemInformation", "parameters": {"properties": {"includeStats": {"description": "Whether to include the item's statistics, default is false", "type": "boolean"}, "itemId": {"description": "The unique ID of the item", "type": "integer"}}, "required": ["itemId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about RuneScape quests.", "name": "getQuests", "parameters": {"properties": {"difficulty": {"description": "The difficulty of the quests to retrieve. Defaults to 'all' for all difficulties", "enum": ["all", "easy", "medium", "hard", "elite", "master"], "type": "string"}, "status": {"description": "The status of the quests to retrieve. Defaults to 'all' for all quests", "enum": ["all", "completed", "started", "not_started"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Perform in-game actions in RuneScape, such as buying and selling items, casting spells, etc.", "name": "performGameAction", "parameters": {"properties": {"action": {"description": "The type of in-game action to perform", "enum": ["buy", "sell", "cast_spell", "equip_item"], "type": "string"}, "details": {"description": "Detailed parameters for performing the action", "properties": {"itemId": {"description": "The unique ID of the item, required when buying or selling items", "type": "integer"}, "quantity": {"description": "The quantity of the item, required when buying or selling items", "type": "integer"}, "spellName": {"description": "The name of the spell, required when casting a spell", "type": "string"}}, "type": "object"}}, "required": ["action", "details"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a player's RuneScape quests.", "name": "getQuestsByPlayer", "parameters": {"properties": {"difficulty": {"description": "The difficulty of the quests to retrieve. Defaults to 'all' for all difficulties", "enum": ["all", "easy", "medium", "hard", "elite", "master"], "type": "string"}, "playerName": {"description": "The player's username", "type": "string"}, "questId": {"description": "The ID of the quest to retrieve. Defaults to empty", "type": "integer"}, "status": {"description": "The status of the quests to retrieve. Defaults to 'all' for all quests", "enum": ["all", "completed", "started", "not_started"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random programming-related quote.", "name": "getRandomQuote", "parameters": {"properties": {"language": {"description": "The language in which the quote is returned. Defaults to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve programming-related quotes by a specific author.", "name": "getQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The name of the author.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page, defaulting to 10.", "type": "integer"}, "page": {"description": "The page number of the results, defaulting to the first page.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve specific programming-related quotes by tag.", "name": "getQuotesByTag", "parameters": {"properties": {"sortBy": {"description": "The sorting method. The available values are 'author' or 'date', and the default value is 'author'.", "type": "string"}, "sortOrder": {"description": "The sorting order. The available values are 'asc' or 'desc', and the default value is 'asc'.", "type": "string"}, "tag": {"description": "The tag of the quote.", "type": "string"}}, "required": ["tag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new programming quote to the collection.", "name": "addQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "tags": {"description": "The list of tags related to the quote, default is empty.", "items": {"description": "The name of the tag.", "type": "string"}, "type": "array"}, "text": {"description": "The content of the quote.", "type": "string"}}, "required": ["text", "author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update a specific programming quote in the collection.", "name": "updateQuote", "parameters": {"properties": {"author": {"description": "The updated author name.", "type": "string"}, "id": {"description": "The unique identifier of the quote to be updated.", "type": "string"}, "text": {"description": "The updated content of the quote.", "type": "string"}}, "required": ["id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time route schedules and status updates for Ottawa buses and trains.", "name": "getRealTimeSchedule", "parameters": {"properties": {"dayOfWeek": {"description": "The day of the week to query the schedule. The default value is 'Weekday'.", "enum": ["Weekday", "Saturday", "Sunday"], "type": "string"}, "direction": {"description": "The direction of travel, such as 'Northbound' or 'Southbound'. The default value is 'Northbound'.", "type": "string"}, "routeId": {"description": "The route number of the bus or train.", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the locations of stations near Ottawa.", "name": "getNearbyStations", "parameters": {"properties": {"latitude": {"description": "The user's current latitude.", "type": "float"}, "longitude": {"description": "The user's current longitude.", "type": "float"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a trip itinerary in Ottawa by providing the starting and ending destinations, time, and other criteria.", "name": "planTrip", "parameters": {"properties": {"departureTime": {"description": "Departure time, in the format 'HH:mm'. The default value is the current time.", "type": "string"}, "endLocation": {"description": "The latitude and longitude of the destination location.", "properties": {"latitude": {"description": "The latitude of the destination location.", "type": "float"}, "longitude": {"description": "The longitude of the destination location.", "type": "float"}}, "type": "object"}, "preferences": {"description": "The user's trip preferences.", "properties": {"leastTransfers": {"description": "Whether to prefer the least number of transfers. The default is true.", "type": "boolean"}, "leastWalking": {"description": "Whether to prefer the least amount of walking. The default is true.", "type": "boolean"}}, "type": "object"}, "startLocation": {"description": "The latitude and longitude of the starting location.", "properties": {"latitude": {"description": "The latitude of the starting location.", "type": "float"}, "longitude": {"description": "The longitude of the starting location.", "type": "float"}}, "type": "object"}}, "required": ["startLocation", "endLocation"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about service disruptions and alerts in Ottawa.", "name": "getServiceDisruptions", "parameters": {"properties": {"date": {"description": "The query date, in the format 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "routeId": {"description": "The specific route number. If not provided, service disruption information for all routes will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Subnet calculator API, used to calculate subnets, hosts, and other network parameters.", "name": "calculateSubnet", "parameters": {"properties": {"ip_address": {"description": "The IP address to be calculated, in the format of an IPv4 address.", "type": "string"}, "subnet_mask": {"description": "The subnet mask, in the format of an IPv4 address.", "type": "string"}}, "required": ["ip_address", "subnet_mask"], "type": "object"}}, "type": "function"}, {"function": {"description": "DNS tool API, providing domain name query and management.", "name": "queryDNS", "parameters": {"properties": {"domain": {"description": "The domain name to be queried.", "type": "string"}, "record_type": {"description": "DNS record type, such as A, MX, TXT, etc., default is 'A'.", "enum": ["A", "MX", "TXT", "CNAME", "NS"], "type": "string"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Binary calculator API for converting binary numbers to decimal numbers and vice versa.", "name": "convertBinary", "parameters": {"properties": {"binary_value": {"description": "The binary number to be converted, default is '0'.", "type": "string"}, "convert_to": {"description": "The target type of conversion. 'binary' means convert to binary, 'decimal' means convert to decimal.", "enum": ["binary", "decimal"], "type": "string"}, "decimal_value": {"description": "The decimal number to be converted, default is 0.", "type": "integer"}}, "required": ["convert_to"], "type": "object"}}, "type": "function"}, {"function": {"description": "Security tool API, providing a hash generator function.", "name": "generateHash", "parameters": {"properties": {"algorithm": {"description": "The type of hash algorithm, default is 'SHA256'.", "enum": ["MD5", "SHA1", "SHA256", "SHA512"], "type": "string"}, "input_string": {"description": "The string for which the hash needs to be generated.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Parse and standardize addresses globally into components such as street, city, state, and postal code.", "name": "parseAddress", "parameters": {"properties": {"address": {"description": "The global address to be parsed", "type": "string"}, "language": {"description": "The language of the response result, defaulting to English", "type": "string"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert addresses worldwide into geographical coordinates (latitude and longitude) for location-based services.", "name": "geocodeAddress", "parameters": {"properties": {"address": {"description": "The worldwide address to be converted into geographical coordinates", "type": "string"}, "includeExtraInfo": {"description": "Whether to include extra address information, default is false", "type": "boolean"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Suggest possible addresses globally as the user types to improve the accuracy and efficiency of the search.", "name": "autocompleteAddress", "parameters": {"properties": {"maxResults": {"description": "The maximum number of suggested addresses to return, default is 5", "type": "integer"}, "query": {"description": "The address query string entered by the user", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve basic information and pictures of a specific fish species.", "name": "getFishBasicInfo", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "includeImage": {"description": "Whether to include pictures, the default value is true.", "type": "boolean"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access detailed information about the nutritional value of fish and how it benefits human health.", "name": "getFishNutritionInfo", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "nutrientType": {"description": "The type of nutrient to be queried. By default, it includes all nutrients.", "items": {"type": "string"}, "type": "array"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information on the status and sustainability ratings of fish populations.", "name": "getFishPopulationStatus", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "region": {"description": "The region where the fish is located. Defaults to global.", "type": "string"}, "sustainability": {"description": "Whether to retrieve only fish with high sustainability ratings. The default value is false.", "type": "boolean"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest news and featured articles about fisheries and seafood.", "name": "getFisheryNews", "parameters": {"properties": {"dateRange": {"description": "The date range when the news was published, defaulting to the past week.", "properties": {"endDate": {"description": "The end date, defaulting to the current date.", "type": "string"}, "startDate": {"description": "The start date, defaulting to 7 days before the current date.", "type": "string"}}, "type": "object"}, "keywords": {"description": "Search keywords, defaulting to empty, returning all news.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for global securities based on detailed information such as stock codes or security names.", "name": "searchGlobalSecurities", "parameters": {"properties": {"marketSector": {"description": "Market sector, the default value is 'all'", "type": "string"}, "ticker": {"description": "Stock code", "type": "string"}}, "required": ["ticker"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve all relevant information for a specific global security, including all relevant identifiers.", "name": "retrieveSecurityInfo", "parameters": {"properties": {"figi": {"description": "Global Financial Instrument Identifier", "type": "string"}}, "required": ["figi"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update global security records by providing new or corrected data.", "name": "updateSecurityRecord", "parameters": {"properties": {"figi": {"description": "Global Financial Instrument Identifier", "type": "string"}, "newData": {"description": "New or corrected security data", "properties": {"exchangeCode": {"description": "Exchange code, the default value is 'NYSE'", "type": "string"}, "name": {"description": "Security name", "type": "string"}, "ticker": {"description": "Stock ticker", "type": "string"}}, "type": "object"}}, "required": ["figi", "newData"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time air quality measurement data from various locations in the United States.", "name": "getAirQualityData", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}, "includeSubstances": {"description": "Whether to include information on specific pollutants, defaulting to false.", "type": "boolean"}, "location": {"description": "The geographical location for which air quality data needs to be queried.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information on U.S. industrial facilities that report the release of toxic chemicals.", "name": "getToxicReleaseInventory", "parameters": {"properties": {"chemicals": {"description": "List of chemicals to query. Defaults to empty, meaning all chemicals will be queried.", "items": {"type": "string"}, "type": "array"}, "year": {"description": "Year to query.", "type": "integer"}, "zipCode": {"description": "Used to limit the geographical area of the query. Defaults to empty.", "type": "string"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve compliance and enforcement action data for EPA-regulated facilities in the United States.", "name": "getComplianceHistory", "parameters": {"properties": {"complianceStatus": {"description": "Compliance status. Optional values include 'active', 'inactive'. Default is 'active'.", "enum": ["active", "inactive"], "type": "string"}, "facilityId": {"description": "The unique identifier of the facility.", "type": "string"}, "timeFrame": {"description": "The time range for the query. Default is the past year.", "properties": {"endDate": {"description": "The end date. Default is the current date.", "type": "string"}, "startDate": {"description": "The start date. Default is one year before the current date.", "type": "string"}}, "type": "object"}}, "required": ["facilityId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time data of sensors in UK cities.", "name": "getRealTimeSensorData", "parameters": {"properties": {"city": {"description": "The name of the city to be queried.", "type": "string"}, "limit": {"description": "The limit on the number of returned data, default is 100.", "type": "integer"}, "sensorType": {"description": "The type of sensor, default is 'all'.", "enum": ["temperature", "humidity", "air_quality", "all"], "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data of sensors in the UK.", "name": "getHistoricalSensorData", "parameters": {"properties": {"city": {"description": "The name of the city to be queried.", "type": "string"}, "endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "sensorType": {"description": "The type of sensor, default is 'all'.", "enum": ["temperature", "humidity", "air_quality", "all"], "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use the built-in visualization tool to interpret data of UK cities.", "name": "getCityDataVisualization", "parameters": {"properties": {"city": {"description": "The name of the city to be visualized.", "type": "string"}, "dataTypes": {"description": "An array of data types to be visualized.", "items": {"enum": ["traffic", "air_quality", "weather"], "type": "string"}, "type": "array"}, "timeRange": {"description": "The time range for visualization, defaulting to the last 24 hours.", "properties": {"end": {"description": "The end time, in the format of 'YYYY-MM-DD HH:MM:SS'.", "type": "string"}, "start": {"description": "The start time, in the format of 'YYYY-MM-DD HH:MM:SS'.", "type": "string"}}, "type": "object"}}, "required": ["city", "dataTypes"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the UK city dataset from anywhere.", "name": "accessCityDataFromAnywhere", "parameters": {"properties": {"apiKey": {"description": "The user's API key.", "type": "string"}, "city": {"description": "The name of the city for which data needs to be accessed.", "type": "string"}, "dataType": {"description": "The type of data to be accessed.", "enum": ["traffic", "air_quality", "weather"], "type": "string"}}, "required": ["city", "dataType", "apiKey"], "type": "object"}}, "type": "function"}, {"function": {"description": "Integrate UK city data with other applications or services.", "name": "integrateCityDataWithApps", "parameters": {"properties": {"appDetails": {"description": "Details of the application.", "properties": {"appName": {"description": "Name of the application.", "type": "string"}, "appVersion": {"description": "Version of the application.", "type": "string"}}, "type": "object"}, "city": {"description": "Name of the city for which data needs to be integrated.", "type": "string"}, "dataTypes": {"description": "Array of data types to be integrated, defaulting to all types.", "items": {"enum": ["traffic", "air_quality", "weather", "all"], "type": "string"}, "type": "array"}}, "required": ["city", "appDetails"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for electronic component parts by part number, keyword, or manufacturer name.", "name": "searchComponents", "parameters": {"properties": {"keyword": {"description": "Search keyword, default is empty", "type": "string"}, "manufacturer": {"description": "Manufacturer name, default is empty", "type": "string"}, "page": {"description": "Page number of the results, default is 1", "type": "integer"}, "partNumber": {"description": "Part number of the component", "type": "string"}}, "required": ["partNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve pricing and inventory information for electronic component parts.", "name": "getPricingAndStock", "parameters": {"properties": {"partNumber": {"description": "The part number", "type": "string"}, "quantity": {"description": "The quantity to query", "type": "integer"}}, "required": ["partNumber", "quantity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for electronic component parts and retrieve order status updates.", "name": "placeOrder", "parameters": {"properties": {"customerID": {"description": "Customer ID", "type": "string"}, "items": {"description": "List of parts in the order", "items": {"properties": {"partNumber": {"description": "Part number", "type": "string"}, "quantity": {"description": "Quantity of the part", "type": "integer"}}, "type": "object"}, "type": "array"}, "paymentMethod": {"description": "Payment method", "type": "string"}}, "required": ["customerID", "items", "paymentMethod"], "type": "object"}}, "type": "function"}, {"function": {"description": "View the shipping tracking information of electronic component parts.", "name": "trackShipment", "parameters": {"properties": {"orderID": {"description": "Order ID", "type": "string"}}, "required": ["orderID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the technical data sheets and related documents of electronic component parts.", "name": "getTechnicalDocs", "parameters": {"properties": {"partNumber": {"description": "The part number", "type": "string"}}, "required": ["partNumber"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Add a custom marker on the Google Maps map.", "name": "addCustomMarker", "parameters": {"properties": {"icon": {"description": "The URL of the custom marker. The default value is the Google Maps standard icon.", "type": "string"}, "mapId": {"description": "The unique identifier of the map.", "type": "string"}, "position": {"description": "The geographical coordinates of the marker.", "properties": {"latitude": {"description": "The latitude value.", "type": "float"}, "longitude": {"description": "The longitude value.", "type": "float"}}, "type": "object"}, "title": {"description": "The title of the marker displayed when the mouse hovers over it. The default value is empty.", "type": "string"}}, "required": ["mapId", "position"], "type": "object"}}, "type": "function"}, {"function": {"description": "Embed a Google Maps map in a web page or mobile application.", "name": "embedMap", "parameters": {"properties": {"location": {"description": "The address or geographical coordinates of the center of the map.", "type": "string"}, "mapType": {"description": "The type of the map, such as 'roadmap','satellite'. The default value is 'roadmap'.", "enum": ["roadmap", "satellite", "hybrid", "terrain"], "type": "string"}, "size": {"description": "The size of the map, in the format 'widthxheight', for example '600x400'. The default value is '600x400'.", "type": "string"}, "zoom": {"description": "The zoom level of the map. The default value is 8.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Overlay data on the Google Maps map.", "name": "overlayDataOnMap", "parameters": {"properties": {"data": {"description": "An array of data to overlay.", "items": {"properties": {"coordinates": {"description": "An array of data coordinate points.", "items": {"properties": {"latitude": {"description": "Latitude value.", "type": "float"}, "longitude": {"description": "Longitude value.", "type": "float"}}, "type": "object"}, "type": "array"}, "properties": {"description": "Other properties of the data, such as color, transparency, etc., default to empty.", "type": "object"}, "type": {"description": "Data type, such as 'circle', 'polygon'.", "type": "string"}}, "type": "object"}, "type": "array"}, "mapId": {"description": "The unique identifier of the map.", "type": "string"}}, "required": ["mapId", "data"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Access metadata information about an artist.", "name": "getArtistMetadata", "parameters": {"properties": {"artist": {"description": "The unique identifier or name of the artist.", "type": "string"}, "include_albums": {"description": "Whether to include the artist's album information. The default value is false.", "type": "boolean"}}, "required": ["artist"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about individual tracks and shows on Mixcloud, including descriptions and tags.", "name": "getTrackDetails", "parameters": {"properties": {"track_url": {"description": "The Mixcloud URL of the track", "type": "string"}}, "required": ["track_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a Mixcloud user, including their preferences and public activities on Mixcloud.", "name": "getUserInfo", "parameters": {"properties": {"include_favorites": {"description": "Whether to include the user's favorite content. The default value is false", "type": "boolean"}, "username": {"description": "The user's Mixcloud username", "type": "string"}}, "required": ["username"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific tracks, shows, or users in the Mixcloud library.", "name": "searchContent", "parameters": {"properties": {"limit": {"description": "The number of results per page, with a default value of 10", "type": "integer"}, "page": {"description": "The page number for pagination, with a default value of 1", "type": "integer"}, "query": {"description": "The search query string", "type": "string"}, "type": {"description": "The type of content to search for, such as 'track','show', 'user', with a default value of 'all'", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream audio content directly from Mixcloud.", "name": "streamAudioContent", "parameters": {"properties": {"quality": {"description": "The quality of the stream, such as 'high','medium', 'low'. The default value is 'high'", "type": "string"}, "stream_url": {"description": "The streaming URL of the audio content", "type": "string"}}, "required": ["stream_url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Access specific macroeconomic data in JSON format for use in your own applications.", "name": "accessDataInJSON", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The return format of the data, default is 'JSON'.", "enum": ["JSON", "CSV", "XML"], "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get macroeconomic indicator data for a specified country or region, such as GDP, inflation rate, unemployment rate, etc.", "name": "getEconomicIndicators", "parameters": {"properties": {"country": {"description": "Country or region code, e.g., 'US' represents the United States.", "type": "string"}, "indicators": {"description": "An array of macroeconomic indicators to query.", "items": {"description": "The English name of the macroeconomic indicator, such as 'GDP', 'Inflation', 'Unemployment', 'GDP Growth', etc.", "type": "string"}, "type": "array"}, "year": {"description": "The year to query, defaulting to the current year.", "type": "integer"}}, "required": ["country", "indicators"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the user's YNAB budget data, including accounts, categories, payees, transactions, and budgets.", "name": "getBudgets", "parameters": {"properties": {"last_knowledge_of_server": {"description": "The server knowledge point for synchronization, with a default value of 0", "type": "integer"}, "user_id": {"description": "The user's unique identifier", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new transaction record in YNAB.", "name": "createTransaction", "parameters": {"properties": {"account_id": {"description": "The ID of the account to which the transaction belongs", "type": "string"}, "amount": {"description": "The transaction amount, in the user's currency unit", "type": "float"}, "approved": {"description": "Whether the transaction is approved, default is false", "type": "boolean"}, "category_name": {"description": "The category name, default is empty", "type": "string"}, "cleared": {"description": "The transaction status. Optional values: 'cleared', 'uncleared','reconciled'. Default is 'uncleared'", "type": "string"}, "date": {"description": "The transaction date, in the format of YYYY-MM-DD", "type": "string"}, "memo": {"description": "The transaction memo, default is empty", "type": "string"}, "payee_name": {"description": "The name of the payee, default is empty", "type": "string"}}, "required": ["account_id", "date", "amount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access financial institutions through direct import and account synchronization to keep in line with YNAB accounts.", "name": "syncTransactions", "parameters": {"properties": {"sync": {"description": "Whether to start the synchronization operation, default is true", "type": "boolean"}, "user_id": {"description": "The unique identifier of the user", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update an existing transaction record in YNAB.", "name": "updateTransaction", "parameters": {"properties": {"account_id": {"description": "The ID of the account to which the transaction belongs", "type": "string"}, "amount": {"description": "The transaction amount, in the user's currency unit", "type": "float"}, "approved": {"description": "Whether the transaction has been approved, default is false", "type": "boolean"}, "category_name": {"description": "The category name, default is empty", "type": "string"}, "cleared": {"description": "The transaction status. Optional values: 'cleared', 'uncleared','reconciled'. Default is 'uncleared'", "type": "string"}, "date": {"description": "The transaction date, in the format of YYYY-MM-DD", "type": "string"}, "memo": {"description": "The transaction memo, default is empty", "type": "string"}, "payee_name": {"description": "The name of the payee, default is empty", "type": "string"}, "transaction_id": {"description": "The ID of the transaction to be updated", "type": "string"}}, "required": ["transaction_id", "account_id", "date", "amount"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for songs on the Gaana platform based on keywords, movie names, artist names, or album names.", "name": "searchSongs", "parameters": {"properties": {"filter": {"description": "The type of search filter, which can be 'artist', 'album', 'track', and the default value is 'all'.", "enum": ["artist", "album", "track", "all"], "type": "string"}, "limit": {"description": "The number of search results displayed per page, and the default value is 10.", "type": "integer"}, "page": {"description": "The page number of the search results, and the default value is 1.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specific song on the Gaana platform.", "name": "getSongDetails", "parameters": {"properties": {"songId": {"description": "The unique identifier of the song.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the MP3 file link of the song searched on the Gaana platform.", "name": "getSongMP3", "parameters": {"properties": {"quality": {"description": "The requested audio quality level, which can be 'low','medium', or 'high'. The default value is 'high'.", "enum": ["low", "medium", "high"], "type": "string"}, "songId": {"description": "The unique identifier of the song.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for jobs on the ZipRecruiter platform.", "name": "searchJobs", "parameters": {"properties": {"job_type": {"description": "Job type (full-time, part-time, etc.). The default value is 'All Types'.", "type": "string"}, "keywords": {"description": "Keywords for the search.", "type": "string"}, "location": {"description": "Location of the job. The default value is 'Nationwide'.", "type": "string"}, "radius": {"description": "Search radius (in miles). The default value is 25.", "type": "integer"}, "salary_range": {"description": "Salary range, in the format'min-max'. The default value is 'Unlimited'.", "type": "string"}}, "required": ["keywords", "location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a specified job.", "name": "getJobDetails", "parameters": {"properties": {"job_id": {"description": "The unique identifier of the job.", "type": "string"}}, "required": ["job_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Apply for the specified job position.", "name": "applyForJob", "parameters": {"properties": {"applicant_info": {"description": "Information of the applicant.", "properties": {"email": {"description": "The applicant's email address.", "type": "string"}, "name": {"description": "The full name of the applicant.", "type": "string"}, "resume": {"description": "The link to the applicant's resume, with the default value of 'None'.", "type": "string"}}, "type": "object"}, "job_id": {"description": "The unique identifier of the job position.", "type": "string"}}, "required": ["job_id", "applicant_info"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for songs on the Gaana platform based on keywords, movie names, artist names, or album names.", "name": "searchSongs", "parameters": {"properties": {"filter": {"description": "The type of search filter, which can be 'artist', 'album', 'track', and the default value is 'all'.", "enum": ["artist", "album", "track", "all"], "type": "string"}, "limit": {"description": "The number of search results displayed per page, and the default value is 10.", "type": "integer"}, "page": {"description": "The page number of the search results, and the default value is 1.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specific song on the Gaana platform.", "name": "getSongDetails", "parameters": {"properties": {"songId": {"description": "The unique identifier of the song.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the MP3 file link of the song searched on the Gaana platform.", "name": "getSongMP3", "parameters": {"properties": {"quality": {"description": "The requested audio quality level, which can be 'low','medium', or 'high'. The default value is 'high'.", "enum": ["low", "medium", "high"], "type": "string"}, "songId": {"description": "The unique identifier of the song.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Calculate the carbon emissions of a specified website page.", "name": "calculateCarbonEmission", "parameters": {"properties": {"includeSubpages": {"description": "Whether to include the carbon emissions calculation of subpages. The default value is false.", "type": "boolean"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get recommended methods to reduce the carbon footprint of a website.", "name": "getReductionSuggestions", "parameters": {"properties": {"url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a detailed report on the carbon emissions of a website, including emissions and suggestions for emission reduction.", "name": "getDetailedReport", "parameters": {"properties": {"email": {"description": "The email address to receive the detailed report. Defaults to empty.", "type": "string"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest confirmed cases, deaths, and recovery data for countries around the world.", "name": "getLatestGlobalCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. For example, 'US' represents the United States. The default value is 'all', which means retrieving global data.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the daily new cases, deaths and recoveries data of countries around the world.", "name": "getDailyNewCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. The default value is 'all'.", "type": "string"}, "date": {"description": "Date, in the format of 'YYYY-MM-DD', for example '2023-04-01'.", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the total number of cases, deaths, and recoveries globally.", "name": "getTotalCasesSummary", "parameters": {"properties": {"includeDetails": {"description": "Whether to include detailed country data. The default value is false.", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time cryptocurrency market data for all supported exchanges.", "name": "getRealtimeData", "parameters": {"properties": {"asset_base": {"description": "The identifier of the base asset.", "type": "string"}, "asset_quote": {"description": "The identifier of the quote asset.", "type": "string"}, "exchange": {"description": "The identifier of the exchange.", "type": "string"}, "limit": {"description": "The limit on the number of data items to return. The default value is 100.", "type": "integer"}}, "required": ["exchange", "asset_base", "asset_quote"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get up to six years of cryptocurrency historical data.", "name": "getHistoricalData", "parameters": {"properties": {"limit": {"description": "The limit on the number of data points to return. The default value is 100.", "type": "integer"}, "period_id": {"description": "The identifier for the time period, such as '1MIN', '5MIN', '1HRS'.", "type": "string"}, "symbol_id": {"description": "The identifier for the cryptocurrency symbol.", "type": "string"}, "time_end": {"description": "The end time, in ISO 8601 format. The default is the current time.", "type": "string"}, "time_start": {"description": "The start time, in ISO 8601 format.", "type": "string"}}, "required": ["period_id", "time_start"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get up to 24 hours of cryptocurrency time series data.", "name": "get24hSeriesData", "parameters": {"properties": {"period_id": {"description": "Identifier for the time period, such as '1MIN', '5MIN', '1HRS'.", "type": "string"}, "symbol_id": {"description": "Identifier for the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id", "period_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide data such as cryptocurrency trading, quotes, and order books.", "name": "getOrderBookData", "parameters": {"properties": {"level": {"description": "The depth level of the order book, with a default value of 1.", "type": "integer"}, "symbol_id": {"description": "The identifier of the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Normalize and transform cryptocurrency market data.", "name": "normalizeMarketData", "parameters": {"properties": {"convert_to": {"description": "The target currency identifier to convert to.", "type": "string"}, "market_data": {"description": "The market data object.", "properties": {"price": {"description": "The price of the cryptocurrency.", "type": "float"}, "volume_24h": {"description": "The trading volume in the past 24 hours. The default value is 0.", "type": "float"}}, "type": "object"}}, "required": ["market_data", "convert_to"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the metadata of a specific article on the arXiv platform, including its title, authors, abstract, and publication date.", "name": "GetArticleMetadata", "parameters": {"properties": {"articleId": {"description": "The unique identifier of the article. The prefix 'arxiv' should be retained.", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the full text of a specific article on the arXiv platform, subject to certain usage restrictions.", "name": "getFullText", "parameters": {"properties": {"acceptFormat": {"description": "The desired full text format, such as 'pdf' or 'text'. The default value is 'pdf'.", "type": "string"}, "articleId": {"description": "The unique identifier of the article", "type": "string"}}, "required": ["articleId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for research articles on the arXiv platform based on various fields such as author name, keywords, and publication date.", "name": "searchArticles", "parameters": {"properties": {"author": {"description": "The full name of the author. The default value is empty.", "type": "string"}, "categories": {"description": "List of article categories. The default value is empty.", "items": {"description": "A single article category", "type": "string"}, "type": "array"}, "keywords": {"description": "List of search keywords", "items": {"description": "A single search keyword", "type": "string"}, "type": "array"}, "publishedAfter": {"description": "The earliest publication date of the article, in the format YYYY-MM-DD. The default value is the current date.", "type": "string"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Subnet calculator API, used to calculate subnets, hosts, and other network parameters.", "name": "calculateSubnet", "parameters": {"properties": {"ip_address": {"description": "The IP address to be calculated, in the format of an IPv4 address.", "type": "string"}, "subnet_mask": {"description": "The subnet mask, in the format of an IPv4 address.", "type": "string"}}, "required": ["ip_address", "subnet_mask"], "type": "object"}}, "type": "function"}, {"function": {"description": "DNS tool API, providing domain name query and management.", "name": "queryDNS", "parameters": {"properties": {"domain": {"description": "The domain name to be queried.", "type": "string"}, "record_type": {"description": "DNS record type, such as A, MX, TXT, etc., default is 'A'.", "enum": ["A", "MX", "TXT", "CNAME", "NS"], "type": "string"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Binary calculator API for converting binary numbers to decimal numbers and vice versa.", "name": "convertBinary", "parameters": {"properties": {"binary_value": {"description": "The binary number to be converted, default is '0'.", "type": "string"}, "convert_to": {"description": "The target type of conversion. 'binary' means convert to binary, 'decimal' means convert to decimal.", "enum": ["binary", "decimal"], "type": "string"}, "decimal_value": {"description": "The decimal number to be converted, default is 0.", "type": "integer"}}, "required": ["convert_to"], "type": "object"}}, "type": "function"}, {"function": {"description": "Security tool API, providing a hash generator function.", "name": "generateHash", "parameters": {"properties": {"algorithm": {"description": "The type of hash algorithm, default is 'SHA256'.", "enum": ["MD5", "SHA1", "SHA256", "SHA512"], "type": "string"}, "input_string": {"description": "The string for which the hash needs to be generated.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Randomly generate a unique advice message.", "name": "getRandomAdvice", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a customized advice strip with the user-selected message.", "name": "getCustomAdvice", "parameters": {"properties": {"message": {"description": "The custom message that the user wants to see in the advice strip.", "type": "string"}}, "required": ["message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for relevant advice items based on keywords.", "name": "searchAdviceByKeyword", "parameters": {"properties": {"keyword": {"description": "The keyword used to search for advice items.", "type": "string"}, "limit": {"description": "The limit on the number of advice items to return, with a default value of 10.", "type": "integer"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a specific advice item by the ID of the advice item.", "name": "getAdviceById", "parameters": {"properties": {"adviceId": {"description": "The unique identification ID of the advice item.", "type": "integer"}}, "required": ["adviceId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the advice items for the specified date.", "name": "getAdviceByDate", "parameters": {"properties": {"date": {"description": "The specified date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Perform sentiment analysis on the given text and return the sentiment tendency score.", "name": "analyzeSentiment", "parameters": {"properties": {"language": {"description": "The language code of the text, default is 'zh'.", "enum": ["zh", "en", "es", "fr", "de"], "type": "string"}, "text": {"description": "The text content that needs to be sentiment analyzed.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Categorize the given text content according to predefined categories.", "name": "categorizeContent", "parameters": {"properties": {"categories": {"description": "Predefined list of categories.", "items": {"description": "Category name.", "type": "string"}, "type": "array"}, "text": {"description": "Text content to be categorized.", "type": "string"}}, "required": ["text", "categories"], "type": "object"}}, "type": "function"}, {"function": {"description": "Extract named entities from the given text and organize these entities.", "name": "extractEntities", "parameters": {"properties": {"entityTypes": {"description": "List of entity types to be extracted. By default, all types are extracted.", "items": {"description": "Entity types, such as 'PERSON', 'ORGANIZATION', 'LOCATION', etc.", "enum": ["PERSON", "ORGANIZATION", "LOCATION", "DATE", "TIME", "MONEY", "PERCENT"], "type": "string"}, "type": "array"}, "text": {"description": "The text content from which entities need to be extracted.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get a list of all provinces in Rwanda.", "name": "getProvinces", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of districts in Rwanda according to the province.", "name": "getDistrictsByProvince", "parameters": {"properties": {"includeCities": {"description": "Whether to include city information, default is false.", "type": "boolean"}, "provinceId": {"description": "The unique identifier of the province.", "type": "integer"}}, "required": ["provinceId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific location information in Rwanda.", "name": "searchLocation", "parameters": {"properties": {"locationType": {"description": "Location type, such as 'city', 'village', 'district', etc. Defaults to empty, searching for all types.", "type": "string"}, "maxResults": {"description": "The maximum number of returned results, default is 10.", "type": "integer"}, "query": {"description": "Search query string.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about a specific location in Rwanda.", "name": "getLocationDetails", "parameters": {"properties": {"locationId": {"description": "The unique identifier of the location.", "type": "integer"}}, "required": ["locationId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of streets in Rwanda according to the district.", "name": "getStreetsByDistrict", "parameters": {"properties": {"districtId": {"description": "The unique identifier of the district.", "type": "integer"}, "includeCoordinates": {"description": "Whether to include the coordinate information of the streets, default is false.", "type": "boolean"}}, "required": ["districtId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the navigation route from the starting point to the ending point.", "name": "getDirections", "parameters": {"properties": {"end": {"description": "The longitude and latitude coordinates of the ending point, in the format of 'longitude,latitude'.", "type": "string"}, "format": {"description": "The format of the returned data, with the default value 'json'.", "enum": ["json", "geojson"], "type": "string"}, "profile": {"description": "The traffic mode of the navigation route, with the default value 'driving-car'.", "enum": ["driving-car", "cycling-regular", "foot-walking"], "type": "string"}, "start": {"description": "The longitude and latitude coordinates of the starting point, in the format of 'longitude,latitude'.", "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for points of interest (POIs) within a specific area.", "name": "searchPOI", "parameters": {"properties": {"bbox": {"description": "Define the bounding box of the search area, in the format [min longitude, min latitude, max longitude, max latitude].", "items": {"description": "Longitude and latitude values within the bounding box.", "type": "float"}, "type": "array"}, "limit": {"description": "The maximum number of returned results, with a default value of 10.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query", "bbox"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the areas that can be reached from a given location within a specific time or distance.", "name": "getIsochrones", "parameters": {"properties": {"location": {"description": "The longitude and latitude coordinates of the center point, in the format 'longitude,latitude'.", "type": "string"}, "mode": {"description": "The travel mode, with the default value 'driving'.", "enum": ["driving", "cycling", "walking"], "type": "string"}, "range": {"description": "A series of time or distance values representing the reachable range from the center point.", "items": {"description": "Time (in seconds) or distance (in meters).", "type": "integer"}, "type": "array"}, "units": {"description": "The unit of the range, with the default value'm'.", "enum": ["m", "km", "miles"], "type": "string"}}, "required": ["location", "range"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get up to 24 hours of cryptocurrency time series data.", "name": "get24hSeriesData", "parameters": {"properties": {"period_id": {"description": "Identifier for the time period, such as '1MIN', '5MIN', '1HRS'.", "type": "string"}, "symbol_id": {"description": "Identifier for the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id", "period_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access account information and balance.", "name": "getAccountInfo", "parameters": {"properties": {"apiKey": {"description": "The user's API key.", "type": "string"}}, "required": ["apiKey"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get up to six years of cryptocurrency historical data.", "name": "getHistoricalData", "parameters": {"properties": {"limit": {"description": "The limit on the number of data points to return. The default value is 100.", "type": "integer"}, "period_id": {"description": "The identifier for the time period, such as '1MIN', '5MIN', '1HRS'.", "type": "string"}, "symbol_id": {"description": "The identifier for the cryptocurrency symbol.", "type": "string"}, "time_end": {"description": "The end time, in ISO 8601 format. The default is the current time.", "type": "string"}, "time_start": {"description": "The start time, in ISO 8601 format.", "type": "string"}}, "required": ["period_id", "time_start"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide data such as cryptocurrency trading, quotes, and order books.", "name": "getOrderBookData", "parameters": {"properties": {"level": {"description": "The depth level of the order book, with a default value of 1.", "type": "integer"}, "symbol_id": {"description": "The identifier of the cryptocurrency symbol.", "type": "string"}}, "required": ["symbol_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time cryptocurrency market data for all supported exchanges.", "name": "getRealtimeData", "parameters": {"properties": {"asset_base": {"description": "The identifier of the base asset.", "type": "string"}, "asset_quote": {"description": "The identifier of the quote asset.", "type": "string"}, "exchange": {"description": "The identifier of the exchange.", "type": "string"}, "limit": {"description": "The limit on the number of data items to return. The default value is 100.", "type": "integer"}}, "required": ["exchange", "asset_base", "asset_quote"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert the amount of one currency to another currency.", "name": "convertCurrency", "parameters": {"properties": {"amount": {"description": "The numerical value of the amount to be converted.", "type": "float"}, "fromCurrency": {"description": "The original currency code, such as 'JPY'.", "type": "string"}, "rounding": {"description": "Whether to round the conversion result. The default is true.", "type": "boolean"}, "toCurrency": {"description": "The target currency code, such as 'CNY'.", "type": "string"}}, "required": ["amount", "fromCurrency", "toCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the exchange rate between two currencies and specify a date range to obtain historical data.", "name": "getExchangeRate", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'USD'.", "type": "string"}, "endDate": {"description": "End date, default is the current date. Format: 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, default is the current date. Format: 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'EUR'.", "type": "string"}}, "required": ["baseCurrency", "targetCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical exchange rate data for a specified currency pair.", "name": "getHistoricalRates", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'EUR'.", "type": "string"}, "date": {"description": "Specified date. The format is 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'GBP'.", "type": "string"}}, "required": ["baseCurrency", "targetCurrency", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the latest exchange rates for over 179 currencies worldwide.", "name": "getLatestRates", "parameters": {"properties": {"base": {"description": "Base currency, default is USD.", "enum": ["USD", "EUR", "GBP", "JPY", "CNY"], "type": "string"}, "symbols": {"description": "List of currency symbols to query, default is all currencies.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "List all available currency symbols and retrieve their detailed information, such as name, code, and symbol.", "name": "listCurrencies", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage currency conversion rates for multiple countries and time zones.", "name": "manageCurrencyConversion", "parameters": {"properties": {"countries": {"description": "List of country codes. Defaults to all countries.", "items": {"type": "string"}, "type": "array"}, "timezones": {"description": "List of time zones. Defaults to all time zones.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Estimate the age based on the provided name and country code.", "name": "estimateAgeByCountry", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country.", "type": "string"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name", "country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Estimate the age based on the provided name.", "name": "estimateAgeByName", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country. The default value is for the global scope.", "type": "string"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Estimate the average age of a series of names.", "name": "estimateAgeForMultipleNames", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country. The default value is global.", "type": "string"}, "names": {"description": "An array containing multiple names.", "items": {"type": "string"}, "type": "array"}}, "required": ["names"], "type": "object"}}, "type": "function"}, {"function": {"description": "Estimate the age corresponding to the name and its probability.", "name": "estimateAgeWithProbability", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country. The default value is global.", "type": "string"}, "include_probability": {"description": "Whether to include the probability of the estimated age. The default value is false.", "type": "boolean"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the age distribution statistics of a specific name.", "name": "getAgeDistribution", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country. The default value is for the global scope.", "type": "string"}, "gender": {"description": "Gender. The optional values are'male' or 'female'. By default, gender is not distinguished.", "type": "string"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest confirmed cases, deaths, and recovery data for countries around the world.", "name": "getLatestGlobalCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. For example, 'US' represents the United States. The default value is 'all', which means retrieving global data.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the daily new cases, deaths and recoveries data of countries around the world.", "name": "getDailyNewCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. The default value is 'all'.", "type": "string"}, "date": {"description": "Date, in the format of 'YYYY-MM-DD', for example '2023-04-01'.", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the total number of cases, deaths, and recoveries globally.", "name": "getTotalCasesSummary", "parameters": {"properties": {"includeDetails": {"description": "Whether to include detailed country data. The default value is false.", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get Covid-19 statistics for different age groups.", "name": "getStatisticsByAgeGroup", "parameters": {"properties": {"ageGroups": {"description": "An array of age groups, e.g., ['0-9', '10-19', '20-29'].", "items": {"type": "string"}, "type": "array"}, "country": {"description": "The name of the country, using ISO country codes. The default value is 'all'.", "type": "string"}}, "required": ["ageGroups"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the current COVID-19 statistics, including information such as new cases and total cases.", "name": "getCurrentCovidStats", "parameters": {"properties": {"country": {"description": "The name of the country, used to specify the country to query.", "type": "string"}, "date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}}, "required": ["country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data of COVID-19, with information covering different geographical locations.", "name": "getCovidHistoryData", "parameters": {"properties": {"country": {"description": "The name of the country, used to specify the country to query.", "type": "string"}, "endDate": {"description": "End date, in the format of YYYY-MM-DD.", "type": "string"}, "startDate": {"description": "Start date, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["country", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide influenza virus data, including new cases, active cases, deaths, and vaccination status.", "name": "getInfluenzaData", "parameters": {"properties": {"ageGroup": {"description": "Age group, used to filter data for specific age ranges. By default, it includes all age groups.", "items": {"description": "The specific range of the age group.", "type": "string"}, "type": "array"}, "region": {"description": "The name of the region, used to specify the region to query.", "type": "string"}, "season": {"description": "Influenza season. If not specified, the default is the current season.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definition of an English word.", "name": "getWordDefinition", "parameters": {"properties": {"partOfSpeech": {"description": "Specify the part of speech to be queried. The default value is all parts of speech.", "type": "string"}, "word": {"description": "The English word to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation of an English word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The format of the pronunciation file, default is mp3.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The English word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get example sentences of English words.", "name": "getWordExamples", "parameters": {"properties": {"useCase": {"description": "Specify the usage scenario of the example sentences, defaulting to all scenarios.", "type": "string"}, "word": {"description": "The English word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the part of speech of an English word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"word": {"description": "The English word whose part of speech is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for authoritative images related to a specific word.", "name": "getWordImages", "parameters": {"properties": {"imageType": {"description": "Image type, such as 'clipart' or 'photo'. The default value is 'photo'.", "enum": ["clipart", "photo", "lineart"], "type": "string"}, "word": {"description": "The word for which images need to be searched.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time data for Lisbon bus routes, including timetables and arrival times, to help commuters plan their trips more effectively.", "name": "getBusRoutes", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date", "type": "string"}, "routeId": {"description": "The unique identifier of the bus route", "type": "string"}, "time": {"description": "The time of the query, defaulting to the current time", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide parking availability and location information near key destinations in Lisbon, enabling drivers to quickly find parking spaces.", "name": "getParkingAvailability", "parameters": {"properties": {"location": {"description": "Geographical coordinates or address of the destination", "type": "string"}, "radius": {"description": "Search radius (in meters), default value is 500", "type": "float"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Lisbon traffic data to help businesses and individuals plan routes based on traffic trends and avoid congested roads.", "name": "getTrafficData", "parameters": {"properties": {"area": {"description": "The name of the area or geographical coordinates for which traffic data needs to be queried", "type": "string"}, "timeRange": {"description": "The time range for the query, defaulting to the current time", "properties": {"end": {"description": "The end time of the time range", "type": "string"}, "start": {"description": "The start time of the time range", "type": "string"}}, "type": "object"}, "trafficType": {"description": "Traffic type, such as 'Vehicles', 'Public Transportation', etc., defaulting to all types", "enum": ["Vehicles", "Public Transportation", "Walking", "Bicycle"], "type": "string"}}, "required": ["area"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Estimate the age based on the provided name and country code.", "name": "estimateAgeByCountry", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country.", "type": "string"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name", "country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Estimate the age based on the provided name.", "name": "estimateAgeByName", "parameters": {"properties": {"name": {"description": "The user's name.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the age distribution statistics of a specific name.", "name": "getAgeDistribution", "parameters": {"properties": {"country": {"description": "The ISO 3166-1 alpha-2 country code of the user's country. The default value is for the global scope.", "type": "string"}, "gender": {"description": "Gender. The optional values are'male' or 'female'. By default, gender is not distinguished.", "type": "string"}, "name": {"description": "The user's name.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the authoritative definition of a word.", "name": "getWordDefinition", "parameters": {"properties": {"useCache": {"description": "Whether to use the cached result. The default value is true.", "type": "boolean"}, "word": {"description": "The word for which the definition needs to be retrieved.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"limit": {"description": "The limit on the number of parts of speech to return. The default value is 3.", "type": "integer"}, "word": {"description": "The word for which to obtain the part of speech.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get authoritative example sentences using a specific word.", "name": "getWordExamples", "parameters": {"properties": {"maxExamples": {"description": "The maximum number of example sentences to return. The default value is 5.", "type": "integer"}, "word": {"description": "The word for which example sentences are to be obtained.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for authoritative images related to a specific word.", "name": "getWordImages", "parameters": {"properties": {"imageType": {"description": "Image type, such as 'clipart' or 'photo'. The default value is 'photo'.", "enum": ["clipart", "photo", "lineart"], "type": "string"}, "word": {"description": "The word for which images need to be searched.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation information of a word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "Audio format, supports'mp3' or 'wav', and the default value is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The word for which the pronunciation needs to be obtained.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search historical newspapers by keyword, date range, and US geographical location. The returned results include information such as the newspaper's unique identifier and title.", "name": "searchHistoricalNewspapers", "parameters": {"properties": {"endDate": {"description": "End date, in the format of YYYY-MM-DD. Defaults to the current date.", "type": "string"}, "keyword": {"description": "Search keyword.", "type": "string"}, "location": {"description": "Geographical location in the US, such as the state name. Defaults to empty.", "type": "string"}, "startDate": {"description": "Start date, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["keyword", "startDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve metadata of American historical newspapers based on the title, publication date, and number of pages.", "name": "retrieveMetadata", "parameters": {"properties": {"date": {"description": "Publication date in the format of YYYY-MM-DD. Defaults to empty, indicating retrieval of all dates.", "type": "string"}, "pageCount": {"description": "The number of pages of the newspaper. Defaults to 0, indicating retrieval of all possible page counts.", "type": "integer"}, "title": {"description": "The title of the newspaper.", "type": "string"}}, "required": ["title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the full-text and image data of individual historical American newspaper pages.", "name": "getFullTextAndImageData", "parameters": {"properties": {"includeImage": {"description": "Whether to include image data, default is true.", "type": "boolean"}, "includeText": {"description": "Whether to include full-text data, default is true.", "type": "boolean"}, "pageId": {"description": "The unique identifier of the newspaper page.", "type": "string"}}, "required": ["pageId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for hosts and devices on the Internet according to various criteria such as geographical location, software version, and hostname.", "name": "searchHosts", "parameters": {"properties": {"hostname": {"description": "The hostname, such as 'example.com'. The default value is empty.", "type": "string"}, "location": {"description": "A description of the geographical location, such as 'China' or 'USA'. The default value is 'Global'.", "type": "string"}, "page": {"description": "The page number of the results, starting from 1. The default value is 1.", "type": "integer"}, "software_version": {"description": "The software version number, such as 'Apache 2.4.1'. The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Identify security vulnerabilities in SSL certificates and network protocols.", "name": "identifyVulnerabilities", "parameters": {"properties": {"certificate_sha256": {"description": "The SHA256 hash value of the SSL certificate.", "type": "string"}, "protocol": {"description": "The type of network protocol, such as 'HTTPS', 'FTP', etc.", "type": "string"}}, "required": ["certificate_sha256", "protocol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about specific internet hosts and devices, including open ports, DNS records, and other metadata.", "name": "retrieveHostDetails", "parameters": {"properties": {"fields": {"description": "The information fields to be retrieved, such as ['open_ports', 'dns_records']. The default value is all fields.", "items": {"type": "string"}, "type": "array"}, "ip": {"description": "The IP address of the internet host.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest confirmed cases, deaths, and recovery data for countries around the world.", "name": "getLatestGlobalCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. For example, 'US' represents the United States. The default value is 'all', which means retrieving global data.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the daily new cases, deaths and recoveries data of countries around the world.", "name": "getDailyNewCases", "parameters": {"properties": {"country": {"description": "The name of the country, using ISO country codes. The default value is 'all'.", "type": "string"}, "date": {"description": "Date, in the format of 'YYYY-MM-DD', for example '2023-04-01'.", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the total number of cases, deaths, and recoveries globally.", "name": "getTotalCasesSummary", "parameters": {"properties": {"includeDetails": {"description": "Whether to include detailed country data. The default value is false.", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Covid-19 confirmed cases, deaths, and recovery data by country.", "name": "getCasesByCountry", "parameters": {"properties": {"countries": {"description": "List of countries, each country using the ISO country code.", "items": {"type": "string"}, "type": "array"}, "status": {"description": "Case status, optional values are 'confirmed', 'deaths','recovered'. The default value is 'confirmed'.", "enum": ["confirmed", "deaths", "recovered"], "type": "string"}}, "required": ["countries"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get Covid-19 statistics for different age groups.", "name": "getStatisticsByAgeGroup", "parameters": {"properties": {"ageGroups": {"description": "An array of age groups, e.g., ['0-9', '10-19', '20-29'].", "items": {"type": "string"}, "type": "array"}, "country": {"description": "The name of the country, using ISO country codes. The default value is 'all'.", "type": "string"}}, "required": ["ageGroups"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current player roster of a specified Major League Baseball (MLB) team.", "name": "getCurrentPlayerRoster", "parameters": {"properties": {"teamId": {"description": "The unique identification ID of the team.", "type": "integer"}}, "required": ["teamId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the scorecard of a specific Major League Baseball (MLB) game.", "name": "getGameScorecard", "parameters": {"properties": {"gameId": {"description": "The unique identification ID of the game.", "type": "string"}, "includeDetails": {"description": "Whether to include detailed information about the game, default is false.", "type": "boolean"}}, "required": ["gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the statistical data of a specified Major League Baseball (MLB) player.", "name": "getPlayerStats", "parameters": {"properties": {"playerId": {"description": "The unique identification ID of the player.", "type": "integer"}, "season": {"description": "The season year for which to retrieve the statistical data, defaulting to the current year.", "type": "integer"}, "statsType": {"description": "The type of statistical data, such as 'batting' (batting average) or 'pitching' (earned run average), defaulting to 'batting'.", "enum": ["batting", "pitching"], "type": "string"}}, "required": ["playerId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Major League Baseball (MLB) team rankings and other league-wide statistics.", "name": "getTeamRankings", "parameters": {"properties": {"league": {"description": "The name of the league, such as 'American' or 'National'. Defaults to all leagues.", "enum": ["American", "National"], "type": "string"}, "season": {"description": "The season year for which to retrieve the rankings. Defaults to the current year.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query geographical location information, including city and postal code, based on the IP address.", "name": "getGeoLocation", "parameters": {"properties": {"ip": {"description": "The IP address to be queried, in the format of IPv4 or IPv6.", "type": "string"}, "language": {"description": "The language of the returned result, default is English (en).", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the geographical coordinates of an IP address, including latitude and longitude.", "name": "getCoordinates", "parameters": {"properties": {"accuracy": {"description": "Coordinate accuracy, ranging from 1 to 5, with a default of 5.", "type": "integer"}, "ip": {"description": "The IP address to be queried, in the format of IPv4 or IPv6.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the time zone information for a specific IP address.", "name": "getTimeZone", "parameters": {"properties": {"ip": {"description": "The IP address to query, in IPv4 or IPv6 format.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the country information of a specific IP address.", "name": "getCountryInfo", "parameters": {"properties": {"include_currency": {"description": "Whether to include currency information, default is false.", "type": "boolean"}, "ip": {"description": "The IP address to be queried, in the format of IPv4 or IPv6.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve regional information for a specific IP address.", "name": "getRegionInfo", "parameters": {"properties": {"include_population": {"description": "Whether to include population information, default is false.", "type": "boolean"}, "ip": {"description": "The IP address to query, in IPv4 or IPv6 format.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Suggest possible addresses globally as the user types to improve the accuracy and efficiency of the search.", "name": "autocompleteAddress", "parameters": {"properties": {"maxResults": {"description": "The maximum number of suggested addresses to return, default is 5", "type": "integer"}, "query": {"description": "The address query string entered by the user", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Geocode multiple addresses in one go.", "name": "batchGeocodeAddresses", "parameters": {"properties": {"addresses": {"description": "List of addresses to be converted.", "items": {"type": "string"}, "type": "array"}, "output_format": {"description": "Format of the output data. Optional values are 'json' or 'xml', and the default value is 'json'.", "enum": ["json", "xml"], "type": "string"}}, "required": ["addresses"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert addresses worldwide into geographical coordinates (latitude and longitude) for location-based services.", "name": "geocodeAddress", "parameters": {"properties": {"address": {"description": "The worldwide address to be converted into geographical coordinates", "type": "string"}, "includeExtraInfo": {"description": "Whether to include extra address information, default is false", "type": "boolean"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Parse and standardize addresses globally into components such as street, city, state, and postal code.", "name": "parseAddress", "parameters": {"properties": {"address": {"description": "The global address to be parsed", "type": "string"}, "language": {"description": "The language of the response result, defaulting to English", "type": "string"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert latitude and longitude coordinates to a physical address.", "name": "reverseGeocodeCoordinates", "parameters": {"properties": {"language": {"description": "The language of the returned address. The default value is 'zh-CN'.", "type": "string"}, "latitude": {"description": "The latitude value.", "type": "float"}, "longitude": {"description": "The longitude value.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Set a custom branded domain for a shortened link.", "name": "customizeDomain", "parameters": {"properties": {"customDomain": {"description": "The custom domain that the user wishes to set", "type": "string"}, "shortUrl": {"description": "The short link for which the custom domain needs to be set", "type": "string"}}, "required": ["customDomain", "shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the original URL information of a shortened link.", "name": "expandUrl", "parameters": {"properties": {"shortUrl": {"description": "The short link to be expanded", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a secure random string with a specific length.", "name": "generateSecureString", "parameters": {"properties": {"includeSymbols": {"description": "Whether to include symbols. The default value is false.", "type": "boolean"}, "length": {"description": "Specify the length of the generated string.", "type": "integer"}}, "required": ["length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve statistics for a specified shortened URL, such as click counts, referral sources, and geographical locations.", "name": "getMetrics", "parameters": {"properties": {"position": {"description": "Whether geographical location is required. Defaults to true.", "type": "string"}, "shortUrl": {"description": "The shortened URL for which statistics are to be retrieved.", "type": "string"}, "unit": {"description": "Time unit. Optional values include minute, hour, day, week, month. Defaults to hour.", "enum": ["minute", "hour", "day", "week", "month"], "type": "string"}, "units": {"description": "The number of time spans. Defaults to 1.", "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "type": "integer"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Organize multiple links into a single campaign to track overall performance metrics.", "name": "organizeCampaign", "parameters": {"properties": {"campaignName": {"description": "The name of the campaign.", "type": "string"}, "endDate": {"description": "The end date of the campaign, in the format YYYY-MM-DD. If not set, the campaign will continue indefinitely.", "type": "string"}, "links": {"description": "An array of shortened URLs to add to the campaign.", "items": {"description": "A single shortened URL.", "type": "string"}, "type": "array"}, "startDate": {"description": "The start date of the campaign, in the format YYYY-MM-DD. The default is the current date.", "type": "string"}}, "required": ["campaignName", "links"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a shortened URL for the given long URL and provide options for custom short links.", "name": "shortenUrl", "parameters": {"properties": {"domain": {"description": "The domain name of the custom short link, default is bit.ly.", "type": "string"}, "longUrl": {"description": "The long URL that needs to be shortened.", "type": "string"}, "tags": {"description": "An array of tags used for categorizing and tracking URL performance.", "items": {"description": "A single tag.", "type": "string"}, "type": "array"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create reports and dashboards containing data from the Danish government using advanced data visualization capabilities.", "name": "createDataVisualization", "parameters": {"properties": {"dataSources": {"description": "List of data sources.", "items": {"type": "string"}, "type": "array"}, "includeCharts": {"default": true, "description": "Whether to include charts, default is true.", "type": "boolean"}, "reportType": {"description": "Report type, such as 'Annual Report', 'Quarterly Report', etc.", "type": "string"}}, "required": ["reportType", "dataSources"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get Danish historical data dating back to the 1980s.", "name": "getHistoricalData", "parameters": {"properties": {"dataType": {"description": "The type of data, such as 'population', 'economy', etc.", "type": "string"}, "endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"default": 1980, "description": "The start year, defaulting to 1980.", "type": "integer"}}, "required": ["dataType"], "type": "object"}}, "type": "function"}, {"function": {"description": "Query specific Danish government data based on keywords, location, or data filters.", "name": "searchGovernmentData", "parameters": {"properties": {"filters": {"description": "Additional filters to be applied to the query.", "properties": {"endDate": {"description": "End date, defaulting to the current year.", "type": "string"}, "startDate": {"description": "Start date, defaulting to the current year.", "type": "string"}}, "type": "object"}, "keywords": {"description": "List of keywords for the query.", "items": {"type": "string"}, "type": "array"}, "location": {"description": "Geographical location for the query, defaulting to the whole country.", "type": "string"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Provide astronomical data such as sunrise and sunset times, moonrise and moonset times, etc.", "name": "getAstronomyData", "parameters": {"properties": {"date": {"description": "Specify the date in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The name or coordinates of the location.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide geographical location data for a specific location based on latitude and longitude coordinates.", "name": "getGeolocationData", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is 'en'.", "type": "string"}, "latitude": {"description": "Latitude value, ranging from -90 to 90.", "type": "float"}, "longitude": {"description": "Longitude value, ranging from -180 to 180.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for a past date.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "Historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "hourly": {"description": "Whether to return hourly data, default is false.", "type": "boolean"}, "location": {"description": "Name or coordinates of the location.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert latitude and longitude coordinates to a physical address.", "name": "reverseGeocodeCoordinates", "parameters": {"properties": {"language": {"description": "The language of the returned address. The default value is 'zh-CN'.", "type": "string"}, "latitude": {"description": "The latitude value.", "type": "float"}, "longitude": {"description": "The longitude value.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Geocode multiple addresses in one go.", "name": "batchGeocodeAddresses", "parameters": {"properties": {"addresses": {"description": "List of addresses to be converted.", "items": {"type": "string"}, "type": "array"}, "output_format": {"description": "Format of the output data. Optional values are 'json' or 'xml', and the default value is 'json'.", "enum": ["json", "xml"], "type": "string"}}, "required": ["addresses"], "type": "object"}}, "type": "function"}, {"function": {"description": "Route planning, providing navigation guidance between points on the map.", "name": "calculateRoute", "parameters": {"properties": {"end": {"description": "The geographical coordinates of the end point, in the format of 'latitude,longitude'.", "type": "string"}, "mode": {"description": "Navigation mode, such as 'driving', 'walking'. The default value is 'driving'.", "enum": ["driving", "walking", "cycling", "transit"], "type": "string"}, "start": {"description": "The geographical coordinates of the starting point, in the format of 'latitude,longitude'.", "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for points of interest, such as restaurants or stores.", "name": "searchPOI", "parameters": {"properties": {"location": {"description": "The geographical coordinates of the search center point, in the format of 'latitude,longitude'. The default value is the user's current location.", "type": "string"}, "query": {"description": "The search query term, such as 'restaurant','store'.", "type": "string"}, "radius": {"description": "The search radius (in meters). The default value is 1000.", "type": "integer"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert an address to geographical coordinates.", "name": "geocode", "parameters": {"properties": {"address": {"description": "The address to be converted.", "type": "string"}, "limit": {"description": "The maximum number of returned results, with a default value of 5.", "type": "integer"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the optimal route planning from point A to point B for cars, bicycles, or pedestrians.", "name": "getRoute", "parameters": {"properties": {"end": {"description": "The geographical coordinates of the destination, in the format of 'latitude,longitude'.", "type": "string"}, "locale": {"description": "Localization language setting, the default value is 'en'.", "enum": ["en", "de", "fr", "zh"], "type": "string"}, "points_encoded": {"description": "Whether to encode the route points, the default value is true.", "type": "boolean"}, "start": {"description": "The geographical coordinates of the starting point, in the format of 'latitude,longitude'.", "type": "string"}, "vehicle": {"description": "Mode of transportation, the optional values are 'car', 'bike', 'foot', and the default value is 'car'.", "enum": ["car", "bike", "foot"], "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time traffic data.", "name": "getTrafficInfo", "parameters": {"properties": {"bbox": {"description": "The bounding box of the query area, in the format of 'latitude of the southwest corner, longitude of the southwest corner, latitude of the northeast corner, longitude of the northeast corner'.", "type": "string"}, "time_interval": {"description": "Time interval (in seconds), with a default value of 300.", "type": "integer"}}, "required": ["bbox"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve meaningful location information from latitude and longitude coordinates.", "name": "ReverseGeocoding", "parameters": {"properties": {"language": {"description": "The language of the returned result. The default value is 'zh'.", "enum": ["zh", "en", "de", "fr"], "type": "string"}, "location": {"description": "The longitude and latitude coordinates to be converted, in the format 'longitude,latitude'.", "type": "string"}, "radius": {"description": "The search radius (in meters). The default value is 50.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve basic information and pictures of a specific fish species.", "name": "getFishBasicInfo", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "includeImage": {"description": "Whether to include pictures, the default value is true.", "type": "boolean"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access detailed information about the nutritional value of fish and how it benefits human health.", "name": "getFishNutritionInfo", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "nutrientType": {"description": "The type of nutrient to be queried. By default, it includes all nutrients.", "items": {"type": "string"}, "type": "array"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information on the status and sustainability ratings of fish populations.", "name": "getFishPopulationStatus", "parameters": {"properties": {"fishName": {"description": "The name of the fish.", "type": "string"}, "region": {"description": "The region where the fish is located. Defaults to global.", "type": "string"}, "sustainability": {"description": "Whether to retrieve only fish with high sustainability ratings. The default value is false.", "type": "boolean"}}, "required": ["fishName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest news and featured articles about fisheries and seafood.", "name": "getFisheryNews", "parameters": {"properties": {"dateRange": {"description": "The date range when the news was published, defaulting to the past week.", "properties": {"endDate": {"description": "The end date, defaulting to the current date.", "type": "string"}, "startDate": {"description": "The start date, defaulting to 7 days before the current date.", "type": "string"}}, "type": "object"}, "keywords": {"description": "Search keywords, defaulting to empty, returning all news.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Kroger product data based on the provided search parameters, such as product name, UPC code, or location.", "name": "searchProducts", "parameters": {"properties": {"limit": {"description": "The maximum number of returned results, with a default value of 10.", "type": "integer"}, "location": {"description": "The location of the user, used to find nearby Kroger stores, in the format 'City, State', with a default value of empty.", "type": "string"}, "query": {"description": "The product name that the user wants to search for.", "type": "string"}, "upc": {"description": "The Universal Product Code (UPC) of the product, with a default value of empty.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find Kroger stores based on location, type, and other search criteria.", "name": "locateStores", "parameters": {"properties": {"radius": {"description": "Search radius (in miles), default value is 5.0.", "type": "float"}, "storeType": {"description": "Store type, such as'supermarket' or 'pharmacy', default value is empty.", "type": "string"}, "zipCode": {"description": "Zip code used for the search.", "type": "string"}}, "required": ["zipCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access Kroger's extensive recipe data with full descriptions, ingredients, and instructions.", "name": "getRecipes", "parameters": {"properties": {"cuisine": {"description": "The type of cuisine, such as 'Italian' or 'Mexican'. The default value is empty.", "type": "string"}, "diet": {"description": "Dietary preferences, such as 'Vegetarian'. The default value is empty.", "type": "string"}, "keywords": {"description": "An array of keywords used to search for recipes. The default value is empty.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access user-specific Kroger data such as shopping lists, purchase history, and loyalty program information.", "name": "getUserData", "parameters": {"properties": {"dataType": {"description": "The type of data requested, such as 'Shopping List', 'Purchase History'.", "type": "string"}, "dateRange": {"description": "The date range for the purchase history, with the default value being the past month.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD', with the default value being the current date.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD', with the default value being the current date minus 30 days.", "type": "string"}}, "type": "object"}, "userId": {"description": "The user's unique identifier.", "type": "string"}}, "required": ["userId", "dataType"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve detailed information about a specific GIF on the Giphy platform, including its URL, rating, and user data.", "name": "getGIFDetails", "parameters": {"properties": {"gif_id": {"description": "The unique ID of the GIF to retrieve.", "type": "string"}}, "required": ["gif_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trending GIF images on the Giphy platform.", "name": "getTrendingGIFs", "parameters": {"properties": {"limit": {"description": "The maximum number of returned results, with a default value of 25.", "type": "integer"}, "rating": {"description": "The content rating of the GIF, with a default value of 'g'.", "enum": ["g", "pg", "pg-13", "r"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Randomly generate GIF images on the Giphy platform based on category or keywords.", "name": "randomGIF", "parameters": {"properties": {"rating": {"description": "The content rating of the GIF, with the default value being 'g'.", "enum": ["g", "pg", "pg-13", "r"], "type": "string"}, "tag": {"description": "Tags or keywords used to randomly generate GIFs, with the default being empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for GIF images on the Giphy platform using keywords or phrases.", "name": "searchGIFs", "parameters": {"properties": {"lang": {"description": "Language preference for search results, with the default value being 'en'.", "enum": ["en", "es", "pt", "it", "fr", "de", "zh-CN", "ja", "ko", "ru"], "type": "string"}, "limit": {"description": "The maximum number of returned results, with the default value being 25.", "type": "integer"}, "offset": {"description": "The offset of the results, with the default value being 0.", "type": "integer"}, "query": {"description": "Keywords or phrases that the user wants to search for.", "type": "string"}, "rating": {"description": "The content rating of the GIF, with the default value being 'g'.", "enum": ["g", "pg", "pg-13", "r"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get a list of all provinces in Rwanda.", "name": "getProvinces", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of districts in Rwanda according to the province.", "name": "getDistrictsByProvince", "parameters": {"properties": {"includeCities": {"description": "Whether to include city information, default is false.", "type": "boolean"}, "provinceId": {"description": "The unique identifier of the province.", "type": "integer"}}, "required": ["provinceId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific location information in Rwanda.", "name": "searchLocation", "parameters": {"properties": {"locationType": {"description": "Location type, such as 'city', 'village', etc. Defaults to empty, searching for all types.", "type": "string"}, "maxResults": {"description": "The maximum number of returned results, default is 10.", "type": "integer"}, "query": {"description": "Search query string.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about a specific location in Rwanda.", "name": "getLocationDetails", "parameters": {"properties": {"locationId": {"description": "The unique identifier of the location.", "type": "integer"}}, "required": ["locationId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of streets in Rwanda according to the district.", "name": "getStreetsByDistrict", "parameters": {"properties": {"districtId": {"description": "The unique identifier of the district.", "type": "integer"}, "includeCoordinates": {"description": "Whether to include the coordinate information of the streets, default is false.", "type": "boolean"}}, "required": ["districtId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Calculate the carbon emissions of a specified website page.", "name": "calculateCarbonEmission", "parameters": {"properties": {"includeSubpages": {"description": "Whether to include the carbon emissions calculation of subpages. The default value is false.", "type": "boolean"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get recommended methods to reduce the carbon footprint of a website.", "name": "getReductionSuggestions", "parameters": {"properties": {"url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a detailed report on the carbon emissions of a website, including emissions and suggestions for emission reduction.", "name": "getDetailedReport", "parameters": {"properties": {"email": {"description": "The email address to receive the detailed report. Defaults to empty.", "type": "string"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Check whether a series of URLs are marked as unsafe by Google.", "name": "checkUrlsSafety", "parameters": {"properties": {"threatTypes": {"description": "List of threat types to check. The default value is ['MALWARE','SOCIAL_ENGINEERING'].", "items": {"description": "Threat type.", "enum": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"], "type": "string"}, "type": "array"}, "urls": {"description": "List of URL addresses to check.", "items": {"description": "A single URL address.", "type": "string"}, "type": "array"}}, "required": ["urls"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific URL being marked as insecure by Google.", "name": "getUrlThreatDetails", "parameters": {"properties": {"platformTypes": {"description": "The types of platforms to be retrieved. The default value is ['ANY_PLATFORM'].", "items": {"description": "The type of platform.", "enum": ["ANY_PLATFORM", "WINDOWS", "LINUX", "ANDROID", "OSX", "IOS", "ANY_MOBILE", "ALL_PLATFORMS"], "type": "string"}, "type": "array"}, "threatEntryTypes": {"description": "The types of threat entries to be retrieved. The default value is ['URL'].", "items": {"description": "The type of threat entry.", "enum": ["URL", "EXECUTABLE"], "type": "string"}, "type": "array"}, "url": {"description": "The URL address to be retrieved.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Obtain survey data on population and employment from the Swiss government.", "name": "getPopulationAndEmploymentData", "parameters": {"properties": {"ageGroup": {"description": "Age group. If not filled, data for all age groups will be returned by default.", "items": {"type": "integer"}, "type": "array"}, "region": {"description": "The region to be queried. The default is the whole of Switzerland.", "type": "string"}, "year": {"description": "The year to be queried.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about schools and universities in Switzerland.", "name": "getSchoolsAndUniversitiesInfo", "parameters": {"properties": {"language": {"description": "The language of instruction, such as 'German', 'French', 'Italian', etc. Defaults to all languages.", "enum": ["German", "French", "Italian"], "type": "string"}, "location": {"description": "The region where the school is located. Defaults to the whole of Switzerland.", "type": "string"}, "type": {"description": "The type of school, such as 'primary','secondary', 'university', etc.", "enum": ["primary", "secondary", "university"], "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the weather forecast in Switzerland.", "name": "getWeatherForecast", "parameters": {"properties": {"city": {"description": "The name of the city.", "type": "string"}, "date": {"description": "The forecast date, in the format of 'YYYY-MM-DD'. The default is the current date.", "type": "string"}, "includeHourly": {"description": "Whether to include hourly forecasts. The default is false.", "type": "boolean"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about Swiss parliamentary debates.", "name": "getParliamentDebates", "parameters": {"properties": {"dateRange": {"description": "The date range of the debates, defaulting to the current legislative period.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "language": {"description": "The language of the debate records, such as 'German', 'French', 'Italian', etc., defaulting to 'German'.", "enum": ["German", "French", "Italian"], "type": "string"}, "topic": {"description": "The topic of the debate, defaulting to all topics.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the navigation route from the starting point to the ending point.", "name": "getDirections", "parameters": {"properties": {"end": {"description": "The longitude and latitude coordinates of the ending point, in the format of 'longitude,latitude'.", "type": "string"}, "format": {"description": "The format of the returned data, with the default value 'json'.", "enum": ["json", "geojson"], "type": "string"}, "profile": {"description": "The traffic mode of the navigation route, with the default value 'driving-car'.", "enum": ["driving-car", "cycling-regular", "foot-walking"], "type": "string"}, "start": {"description": "The longitude and latitude coordinates of the starting point, in the format of 'longitude,latitude'.", "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for points of interest (POIs) within a specific area.", "name": "searchPOI", "parameters": {"properties": {"bbox": {"description": "Define the bounding box of the search area, in the format [min longitude, min latitude, max longitude, max latitude].", "items": {"description": "Longitude and latitude values within the bounding box.", "type": "float"}, "type": "array"}, "limit": {"description": "The maximum number of returned results, with a default value of 10.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query", "bbox"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the areas that can be reached from a given location within a specific time or distance.", "name": "getIsochrones", "parameters": {"properties": {"location": {"description": "The longitude and latitude coordinates of the center point, in the format 'longitude,latitude'.", "type": "string"}, "mode": {"description": "The travel mode, with the default value 'driving'.", "enum": ["driving", "cycling", "walking"], "type": "string"}, "range": {"description": "A series of time or distance values representing the reachable range from the center point.", "items": {"description": "Time (in seconds) or distance (in meters).", "type": "integer"}, "type": "array"}, "units": {"description": "The unit of the range, with the default value'm'.", "enum": ["m", "km", "miles"], "type": "string"}}, "required": ["location", "range"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for jobs on the ZipRecruiter platform.", "name": "searchJobs", "parameters": {"properties": {"job_type": {"description": "Job type (full-time, part-time, etc.). The default value is 'All Types'.", "type": "string"}, "keywords": {"description": "Search keywords.", "type": "string"}, "location": {"description": "The location where the job is located. The default value is 'Nationwide'.", "type": "string"}, "radius": {"description": "Search radius (in miles). The default value is 25.", "type": "integer"}, "salary_range": {"description": "Salary range, in the format of'min-max'. The default value is 'Unlimited'.", "type": "string"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a specified job.", "name": "getJobDetails", "parameters": {"properties": {"job_id": {"description": "The unique identifier of the job.", "type": "string"}}, "required": ["job_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Apply for the specified job position.", "name": "applyForJob", "parameters": {"properties": {"applicant_info": {"description": "Information of the applicant.", "properties": {"email": {"description": "The applicant's email address.", "type": "string"}, "name": {"description": "The full name of the applicant.", "type": "string"}, "resume": {"description": "The link to the applicant's resume, with the default value of 'None'.", "type": "string"}}, "type": "object"}, "job_id": {"description": "The unique identifier of the job position.", "type": "string"}}, "required": ["job_id", "applicant_info"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the company profile information, including detailed information on corporate culture, values, and salary range.", "name": "getCompanyProfile", "parameters": {"properties": {"company_id": {"description": "The unique identifier of the company.", "type": "string"}}, "required": ["company_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Save the job search criteria and notify the user via email when new jobs match.", "name": "saveSearchAndNotify", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "search_criteria": {"description": "The saved search criteria.", "properties": {"keywords": {"description": "Search keywords, default is empty.", "type": "string"}, "location": {"description": "The job location, default is empty.", "type": "string"}}, "type": "object"}}, "required": ["search_criteria", "email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Track the status of a job application submitted by the user through the API.", "name": "trackJobApplication", "parameters": {"properties": {"application_id": {"description": "The unique identifier of the job application.", "type": "string"}}, "required": ["application_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for job postings in Europe and remote locations based on conditions such as location, job title, and keywords.", "name": "searchJobsInEuropeAndRemote", "parameters": {"properties": {"keywords": {"description": "Search keywords, default is empty", "items": {"type": "string"}, "type": "array"}, "location": {"description": "The location where the job is located", "type": "string"}, "page": {"description": "The page number of the results, default is 1", "enum": [1, 2, 3, 4, 5], "type": "integer"}, "title": {"description": "Job title, default is empty", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of chat rooms that the user has access to.", "name": "getChatRooms", "parameters": {"properties": {"limit": {"description": "The maximum number of chat rooms to return. The default value is 30.", "type": "integer"}, "user_id": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve messages from a specified chat room.", "name": "getMessages", "parameters": {"properties": {"before_id": {"description": "Message ID for pagination. The default value is the latest message.", "type": "string"}, "limit": {"description": "The maximum number of messages to return. By default, the messages are sorted by the most recent ones. The default value is 50.", "type": "integer"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a message to the chat room.", "name": "sendMessage", "parameters": {"properties": {"format": {"description": "The format of the message, for example: 'text','md'. The default value is 'text'.", "enum": ["text", "md"], "type": "string"}, "message": {"description": "The content of the message to be sent.", "type": "string"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id", "message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the user's activity information in the specified chat room.", "name": "getUserActivity", "parameters": {"properties": {"include_read": {"description": "Whether to include information about read messages. The default value is false.", "type": "boolean"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}, "user_id": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["room_id", "user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "User authentication, used for managing modules and accessing the platform.", "name": "authenticateUser", "parameters": {"properties": {"password": {"description": "The user's password", "type": "string"}, "username": {"description": "The user's username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get historical and real-time market data for the specified cryptocurrency.", "name": "getMarketData", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which market data needs to be obtained, such as BTC, ETH, etc.", "type": "string"}, "interval": {"description": "The time interval of the data, in minutes. The default value is 5.", "type": "integer"}, "since": {"description": "The time to start obtaining data, in the format of YYYY-MM-DD. The default is the current time.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the balance information of the Kraken account.", "name": "getAccountBalance", "parameters": {"properties": {"asset": {"description": "Asset code, such as 'BTC'. By default, the balances of all assets are returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trading history of the Kraken account.", "name": "getTradeHistory", "parameters": {"properties": {"end": {"description": "End time, in the format of Unix timestamp, default is the current time.", "type": "string"}, "ofs": {"description": "Result offset, default is 0.", "type": "integer"}, "start": {"description": "Start time, in the format of Unix timestamp, default is the account creation time.", "type": "string"}, "type": {"description": "The type of trade, 'all', 'any position', 'closed position', 'closing position', 'no position', default is 'all'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Kraken API keys.", "name": "manageAPIKeys", "parameters": {"properties": {"action": {"description": "The type of operation, 'create', 'update', 'delete'.", "type": "string"}, "key": {"description": "The API key, required only when updating or deleting.", "type": "string"}, "permissions": {"description": "List of API key permissions, such as ['query funds','manage trades']. Defaults to empty, meaning no permissions.", "items": {"type": "string"}, "type": "array"}}, "required": ["action"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of all administrative divisions of a specified country.", "name": "getCountryDivisions", "parameters": {"properties": {"countryCode": {"description": "The ISO 3166-1 alpha-2 code of the country.", "type": "string"}, "language": {"description": "The language code of the returned result, default is 'en'.", "type": "string"}}, "required": ["countryCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific administrative division in a specific country.", "name": "getDivisionDetails", "parameters": {"properties": {"countryCode": {"description": "The ISO 3166-1 alpha-2 code of the country.", "type": "string"}, "divisionCode": {"description": "The code of the administrative division.", "type": "string"}, "includeSubdivisions": {"description": "Whether to include information about sub-administrative divisions, default is false.", "type": "boolean"}}, "required": ["countryCode", "divisionCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search administrative divisions by name or code.", "name": "searchDivisions", "parameters": {"properties": {"countryCode": {"description": "Limit search results to the ISO 3166-1 alpha-2 code of the specified country. By default, there is no limit.", "type": "string"}, "limit": {"description": "The maximum number of results to return, default is 10.", "type": "integer"}, "query": {"description": "Search query, which can be the name or code of an administrative division.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all supported countries and their ISO codes.", "name": "listCountries", "parameters": {"properties": {"language": {"description": "The language code of the returned result, default is 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the IP address associated with a specific domain name.", "name": "getDomainIP", "parameters": {"properties": {"domain": {"description": "The domain name for which the IP address needs to be queried.", "type": "string"}, "recordType": {"description": "The DNS record type, defaulting to 'A' record.", "enum": ["A", "AAAA", "CNAME", "MX", "TXT", "NS"], "type": "string"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the mail servers and IP addresses associated with a specific domain name.", "name": "getDomainMailServers", "parameters": {"properties": {"domain": {"description": "The domain name for which to query the mail servers.", "type": "string"}, "includeIP": {"description": "Whether to include the IP addresses of the mail servers. The default is false.", "type": "boolean"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the name servers and IP addresses associated with a specific domain name.", "name": "getDomainNameServers", "parameters": {"properties": {"domain": {"description": "The domain name for which to query the name servers.", "type": "string"}, "resolveIP": {"default": true, "description": "Whether to resolve the IP addresses of the name servers, default is true.", "type": "boolean"}}, "required": ["domain"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of chat rooms that the user has access to.", "name": "getChatRooms", "parameters": {"properties": {"limit": {"description": "The maximum number of chat rooms to return. The default value is 30.", "type": "integer"}, "user_id": {"description": "The unique identifier of the user, in the format of a combination of English letters and numbers.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve messages from a specified chat room.", "name": "getMessages", "parameters": {"properties": {"before_id": {"description": "Message ID for pagination, with the default value being the latest message.", "type": "string"}, "limit": {"description": "The maximum number of messages to return, with the default value being 50.", "type": "integer"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a message to the chat room.", "name": "sendMessage", "parameters": {"properties": {"format": {"description": "The format of the message, for example: 'text','md'. The default value is 'text'.", "enum": ["text", "md"], "type": "string"}, "message": {"description": "The content of the message to be sent.", "type": "string"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id", "message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the user's activity information in the specified chat room.", "name": "getUserActivity", "parameters": {"properties": {"include_read": {"description": "Whether to include information about read messages. The default value is false.", "type": "boolean"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}, "user_id": {"description": "The unique identifier of the user, in the format of a combination of English letters and numbers.", "type": "string"}}, "required": ["room_id", "user_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert eastings and northings of the British National Grid to WGS84 latitude and longitude.", "name": "convertToWGS84", "parameters": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}, "output_format": {"description": "The output format. The available values are 'json' or 'xml', and the default is 'json'.", "enum": ["json", "xml"], "type": "string"}}, "required": ["eastings", "northings"], "type": "object"}}, "type": "function"}, {"function": {"description": "Reverse geocode WGS84 latitude and longitude to eastings and northings in the Ordnance Survey National Grid (OSGB36) of the UK.", "name": "reverseGeocodeToOSGB36", "parameters": {"properties": {"include_altitude": {"description": "Whether to include altitude information. The default value is false.", "type": "boolean"}, "latitude": {"description": "The WGS84 latitude value, which must be a floating-point number.", "type": "float"}, "longitude": {"description": "The WGS84 longitude value, which must be a floating-point number.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Batch convert the eastings and northings of multiple British National Grid coordinates to WGS84 latitudes and longitudes.", "name": "batchConvertToWGS84", "parameters": {"properties": {"coordinates": {"description": "An array containing eastings and northings coordinates.", "items": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}}, "type": "object"}, "type": "array"}}, "required": ["coordinates"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current weather conditions at a specified airport, including METAR and TAF reports.", "name": "getAirportWeather", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'JFK' represents John F. Kennedy International Airport in New York.", "type": "string"}, "includePIREP": {"description": "Whether to include Pilot Report (PIREP) data. The default value is false.", "type": "boolean"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain important meteorological information and pilot meteorological information in the United States.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning to be obtained, such as 'SIGMET' or 'AIRMET'. The default value is all types.", "type": "string"}, "region": {"description": "The region code for which meteorological information needs to be obtained.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the delay information of a specified airport.", "name": "getAirportDelays", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'LAX' represents Los Angeles International Airport.", "type": "string"}, "delayType": {"description": "The type of delay. For example, 'weather' represents weather-related delays. The default value is all types.", "type": "string"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve detailed information about a specific Estonian government dataset.", "name": "getDatasetDetails", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Estonian government-related datasets by author. The returned result is the corresponding dataset ID.", "name": "getDatasetDetailsByAuthor", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results, default is 5", "type": "integer"}, "user_id": {"description": "The unique identifier of the author.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage and update user profile and data of the Estonian government.", "name": "updateUserProfile", "parameters": {"properties": {"profile_data": {"description": "An object containing user profile update information.", "properties": {"email": {"description": "The user's email address. The default value is the current email address.", "type": "string"}, "name": {"description": "The user's full name. The default value is the current name.", "type": "string"}}, "type": "object"}, "user_id": {"description": "The user's unique identifier.", "type": "string"}}, "required": ["user_id", "profile_data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific Estonian government datasets according to different criteria such as theme, type, and keywords.", "name": "searchDatasets", "parameters": {"properties": {"keywords": {"description": "List of search keywords, with the default value being empty.", "items": {"description": "Search keyword.", "type": "string"}, "type": "array"}, "topic": {"description": "Theme of the dataset, with the default value being empty.", "type": "string"}, "type": {"description": "Type of the dataset, with the default value being empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve and analyze the metadata associated with each dataset of the Estonian government.", "name": "retrieveMetadata", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "include_statistics": {"description": "Whether to include statistics. The default value is true.", "type": "boolean"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random programming-related quote.", "name": "getRandomQuote", "parameters": {"properties": {"language": {"description": "The language in which the quote is returned. Defaults to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve programming-related quotes by a specific author.", "name": "getQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The name of the author.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page, defaulting to 10.", "type": "integer"}, "page": {"description": "The page number of the results, defaulting to the first page.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve specific programming-related quotes by tag.", "name": "getQuotesByTag", "parameters": {"properties": {"sortBy": {"description": "The sorting method. The available values are 'author' or 'date', and the default value is 'author'.", "type": "string"}, "sortOrder": {"description": "The sorting order. The available values are 'asc' or 'desc', and the default value is 'asc'.", "type": "string"}, "tag": {"description": "The tag of the quote.", "type": "string"}}, "required": ["tag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new programming quote to the collection.", "name": "addQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "tags": {"description": "The list of tags related to the quote, default is empty.", "items": {"description": "The name of the tag.", "type": "string"}, "type": "array"}, "text": {"description": "The content of the quote.", "type": "string"}}, "required": ["text", "author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update a specific programming quote in the collection.", "name": "updateQuote", "parameters": {"properties": {"author": {"description": "The updated author name.", "type": "string"}, "id": {"description": "The unique identifier of the quote to be updated.", "type": "string"}, "text": {"description": "The updated content of the quote.", "type": "string"}}, "required": ["id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for famous quotes by topic.", "name": "searchQuotesByTopic", "parameters": {"properties": {"page": {"description": "The page number of the results, default is 1.", "type": "integer"}, "topic": {"description": "The topic of the quotes to search for.", "type": "string"}}, "required": ["topic"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a specified famous quote.", "name": "retrieveQuoteById", "parameters": {"properties": {"quoteId": {"description": "The unique identifier of the quote to be retrieved.", "type": "string"}}, "required": ["quoteId"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all famous quotes by a specific author.", "name": "listQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The name of the author.", "type": "string"}, "limit": {"description": "The limit on the number of quotes to return, default is 10.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of famous quotes with pagination.", "name": "getQuotesWithPagination", "parameters": {"properties": {"page": {"description": "The page number to retrieve.", "type": "integer"}, "pageSize": {"description": "The number of quotes to display per page, default is 20.", "type": "integer"}}, "required": ["page"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time route schedules and status updates for Ottawa buses and trains.", "name": "getRealTimeSchedule", "parameters": {"properties": {"dayOfWeek": {"description": "The day of the week to query the schedule. The default value is 'Weekday'.", "enum": ["Weekday", "Saturday", "Sunday"], "type": "string"}, "direction": {"description": "The direction of travel, such as 'Northbound' or 'Southbound'. The default value is 'Northbound'.", "type": "string"}, "routeId": {"description": "The route number of the bus or train.", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the locations of stations near Ottawa.", "name": "getNearbyStations", "parameters": {"properties": {"latitude": {"description": "The user's current latitude.", "type": "float"}, "longitude": {"description": "The user's current longitude.", "type": "float"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a trip itinerary in Ottawa by providing the starting and ending destinations, time, and other criteria.", "name": "planTrip", "parameters": {"properties": {"departureTime": {"description": "Departure time, in the format 'HH:mm'. The default value is the current time.", "type": "string"}, "endLocation": {"description": "The latitude and longitude of the destination location.", "properties": {"latitude": {"description": "The latitude of the destination location.", "type": "float"}, "longitude": {"description": "The longitude of the destination location.", "type": "float"}}, "type": "object"}, "preferences": {"description": "The user's trip preferences.", "properties": {"leastTransfers": {"description": "Whether to prefer the least number of transfers. The default is true.", "type": "boolean"}, "leastWalking": {"description": "Whether to prefer the least amount of walking. The default is true.", "type": "boolean"}}, "type": "object"}, "startLocation": {"description": "The latitude and longitude of the starting location.", "properties": {"latitude": {"description": "The latitude of the starting location.", "type": "float"}, "longitude": {"description": "The longitude of the starting location.", "type": "float"}}, "type": "object"}}, "required": ["startLocation", "endLocation"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about service disruptions and alerts in Ottawa.", "name": "getServiceDisruptions", "parameters": {"properties": {"date": {"description": "The query date, in the format 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "routeId": {"description": "The specific route number. If not provided, service disruption information for all routes will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the location information of Ducks Unlimited chapters in the United States.", "name": "getChapterLocations", "parameters": {"properties": {"chapterId": {"description": "The unique identification ID of the chapter.", "type": "integer"}, "city": {"description": "The name of the city, used to filter the chapter location. The default value is 'all'.", "type": "string"}, "state": {"description": "The name of the state in the United States, used to filter the chapter location. The default value is 'all'.", "type": "string"}, "zipCode": {"description": "The postal code, used to filter the chapter location. The default value is 'all'.", "type": "string"}}, "required": ["chapterId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for Ducks Unlimited chapters in the United States according to specific criteria.", "name": "searchChapters", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results, with a default value of 10.", "type": "integer"}, "order": {"description": "The sorting order, with a default value of 'asc'.", "enum": ["asc", "desc"], "type": "string"}, "query": {"description": "The search query, which can be the chapter name or keywords.", "type": "string"}, "sortBy": {"description": "The sorting field, with a default value of 'name'.", "enum": ["name", "state", "city"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the event information of a specified Ducks Unlimited chapter.", "name": "getChapterDetails", "parameters": {"properties": {"chapterId": {"description": "The unique identification ID of the chapter, composed of numbers.", "type": "integer"}}, "required": ["chapterId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for food items and retrieve their comprehensive nutritional information.", "name": "searchFoodItems", "parameters": {"properties": {"pageNumber": {"description": "The page number of the results, with a default value of 1.", "type": "integer"}, "pageSize": {"description": "The number of results displayed per page, with a default value of 20.", "type": "integer"}, "query": {"description": "The name of the food item that the user wants to search for.", "items": {"type": "string"}, "type": "array"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a custom nutrition calculator.", "name": "createNutritionCalculator", "parameters": {"properties": {"ingredients": {"description": "List of ingredients, each ingredient contains name and quantity.", "items": {"properties": {"name": {"description": "Name of the ingredient.", "type": "string"}, "quantity": {"description": "Quantity of the ingredient, in grams.", "type": "float"}}, "type": "object"}, "type": "array"}, "servingSize": {"description": "Size of each serving, default value is 1.", "type": "float"}}, "required": ["ingredients"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve restaurant menus and detailed nutritional information.", "name": "retrieveMenuItems", "parameters": {"properties": {"includeNutrition": {"description": "Whether to include nutritional information. The default value is true.", "type": "boolean"}, "restaurantId": {"description": "The unique identifier of the restaurant.", "type": "string"}}, "required": ["restaurantId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Track physical activity and calculate the corresponding nutritional intake.", "name": "trackPhysicalActivity", "parameters": {"properties": {"activity": {"description": "The type of physical activity performed.", "type": "string"}, "duration": {"description": "The duration of the activity, in minutes.", "type": "integer"}, "intensity": {"description": "The intensity of the activity. The available values are 'Low', 'Medium', 'High', and the default value is 'Medium'.", "enum": ["Low", "Medium", "High"], "type": "string"}}, "required": ["activity", "duration"], "type": "object"}}, "type": "function"}, {"function": {"description": "Batch convert the eastings and northings of multiple British National Grid coordinates to WGS84 latitudes and longitudes.", "name": "batchConvertToWGS84", "parameters": {"properties": {"coordinates": {"description": "An array containing eastings and northings coordinates.", "items": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}}, "type": "object"}, "type": "array"}}, "required": ["coordinates"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert eastings and northings of the British National Grid to WGS84 latitude and longitude.", "name": "convertToWGS84", "parameters": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}, "output_format": {"description": "The output format. The available values are 'json' or 'xml', and the default is 'json'.", "enum": ["json", "xml"], "type": "string"}}, "required": ["eastings", "northings"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of all available activities by category.", "name": "getActivitiesByCategory", "parameters": {"properties": {"category": {"description": "The category of the activity.", "type": "string"}}, "required": ["category"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a random activity and all its details.", "name": "getRandomActivity", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Reverse geocode WGS84 latitude and longitude to eastings and northings in the Ordnance Survey National Grid (OSGB36) of the UK.", "name": "reverseGeocodeToOSGB36", "parameters": {"properties": {"include_altitude": {"description": "Whether to include altitude information. The default value is false.", "type": "boolean"}, "latitude": {"description": "The WGS84 latitude value, which must be a floating-point number.", "type": "float"}, "longitude": {"description": "The WGS84 longitude value, which must be a floating-point number.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for activities using specific parameters such as participants, difficulty level, and activity type.", "name": "searchActivities", "parameters": {"properties": {"accessibility": {"description": "The accessibility of the activity, ranging from 0.0 (easiest) to 1.0 (most difficult). The default value is 0.0.", "type": "float"}, "difficulty": {"description": "The difficulty level of the activity, ranging from 0.0 (easiest) to 1.0 (most difficult). The default value is 0.5.", "type": "float"}, "participants": {"description": "The number of people participating in the activity. The default value is 1.", "type": "integer"}, "price": {"description": "The budget cost of the activity, ranging from 0.0 (free) to 1.0 (expensive). The default value is 0.0.", "type": "float"}, "type": {"description": "The type of activity, e.g., educational, recreational, social, etc. The default is empty, indicating all types.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the exchange rate information of the specified currency against the Russian ruble.", "name": "getExchangeRate", "parameters": {"properties": {"currency": {"description": "The currency code for which the exchange rate needs to be queried. For example, 'USD' represents the US dollar.", "type": "string"}, "date": {"description": "The date for querying the exchange rate. The default is the current date. The format is 'YYYY-MM-DD'.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide dynamic information on the exchange rates of Russian currencies.", "name": "getExchangeTrends", "parameters": {"properties": {"currency": {"description": "The currency code for which the exchange rate dynamics need to be queried. For example, 'EUR' represents the euro.", "type": "string"}, "period": {"description": "The time range for querying exchange rate changes. The default value is '7d' representing the past 7 days. Optional values include '1d', '7d', '1m', '3m', '1y'.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Calculate the result of currency conversion based on the current exchange rate.", "name": "convertCurrency", "parameters": {"properties": {"amount": {"description": "The amount of the source currency to be converted.", "type": "float"}, "fromCurrency": {"description": "The code of the source currency.", "type": "string"}, "toCurrency": {"description": "The code of the target currency.", "type": "string"}}, "required": ["fromCurrency", "toCurrency", "amount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the exchange rates of all supported currencies and cryptocurrencies.", "name": "getAllExchangeRates", "parameters": {"properties": {"baseCurrency": {"description": "The base currency code, such as 'USD'.", "type": "string"}}, "required": ["baseCurrency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of all supported currencies and cryptocurrencies by the API.", "name": "getSupportedCurrencies", "parameters": {"properties": {"type": {"description": "Currency type. 'fiat' represents fiat currency, 'crypto' represents cryptocurrency, and the default is 'all'.", "enum": ["fiat", "crypto", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical exchange rate data for a specified currency pair.", "name": "getHistoricalRates", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'EUR'.", "type": "string"}, "date": {"description": "Specified date. The format is 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'GBP'.", "type": "string"}}, "required": ["baseCurrency", "targetCurrency", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the exchange rate between two currencies and specify a date range to obtain historical data.", "name": "RetrieveExchangeRate", "parameters": {"properties": {"baseCurrency": {"description": "Base currency code, such as 'USD'.", "type": "string"}, "endDate": {"description": "End date, defaulting to the current date. Format: 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, defaulting to the current date. Format: 'YYYY-MM-DD'.", "type": "string"}, "targetCurrency": {"description": "Target currency code, such as 'EUR'.", "type": "string"}}, "required": ["baseCurrency", "targetCurrency"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Perform a full-text search of European patents and patent applications, and refine the results using advanced search parameters.", "name": "searchPatents", "parameters": {"properties": {"date_range": {"description": "The date range of the search results.", "properties": {"end_date": {"description": "The end date, in the format of YYYY-MM-DD.", "type": "string"}, "start_date": {"description": "The start date, in the format of YYYY-MM-DD.", "type": "string"}}, "type": "object"}, "items_per_page": {"description": "The number of items displayed per page. The default value is 10.", "type": "integer"}, "page": {"description": "The page number of the results to retrieve. The default value is 1.", "type": "integer"}, "query": {"description": "The text content of the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Query the API to obtain European patent status, legal event information, bibliographic data, and related records.", "name": "getPatentStatus", "parameters": {"properties": {"include_bibliography": {"description": "Whether to include bibliographic data. The default value is false.", "type": "boolean"}, "include_legal_events": {"description": "Whether to include legal event information. The default value is false.", "type": "boolean"}, "patent_id": {"description": "The unique identifier of the patent. Multiple patents are concatenated using a comma.", "type": "string"}}, "required": ["patent_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve images and documents related to European patents and patent applications.", "name": "retrieveDocuments", "parameters": {"properties": {"document_type": {"description": "The type of document to retrieve. The default value is 'all'.", "enum": ["application", "publication", "all"], "type": "string"}, "format": {"description": "The return format of the document. The default value is 'pdf'.", "enum": ["pdf", "xml", "txt"], "type": "string"}, "patent_id": {"description": "The unique identifier of the patent.", "type": "string"}}, "required": ["patent_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get historical and real-time market data for a specified cryptocurrency.", "name": "getMarketData", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which market data is to be retrieved, such as BTC, ETH, etc.", "type": "string"}, "interval": {"description": "The time interval of the data, in minutes. The default value is 5.", "type": "integer"}, "since": {"description": "The timestamp to start retrieving data from, in Unix timestamp format. The default is the current time.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the balance information of the Kraken account.", "name": "getAccountBalance", "parameters": {"properties": {"asset": {"description": "Asset code, such as 'BTC'. By default, the balances of all assets are returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trading history of the Kraken account.", "name": "getTradeHistory", "parameters": {"properties": {"end": {"description": "End time, in the format of Unix timestamp, default is the current time.", "type": "string"}, "ofs": {"description": "Result offset, default is 0.", "type": "integer"}, "start": {"description": "Start time, in the format of Unix timestamp, default is the account creation time.", "type": "string"}, "type": {"description": "The type of trade, 'all', 'any position', 'closed position', 'closing position', 'no position', default is 'all'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Kraken API keys.", "name": "manageAPIKeys", "parameters": {"properties": {"action": {"description": "The type of operation, 'create', 'update', 'delete'.", "type": "string"}, "key": {"description": "The API key, required only when updating or deleting.", "type": "string"}, "permissions": {"description": "List of API key permissions, such as ['query funds','manage trades']. Defaults to empty, meaning no permissions.", "items": {"type": "string"}, "type": "array"}}, "required": ["action"], "type": "object"}}, "type": "function"}, {"function": {"description": "Withdraw funds from the account.", "name": "withdrawFunds", "parameters": {"properties": {"address": {"description": "The fund withdrawal address.", "type": "string"}, "amount": {"description": "The amount of the withdrawal.", "type": "float"}, "currency": {"description": "The currency type of the withdrawal, such as 'BTC'.", "type": "string"}, "customer_id": {"description": "The unique identifier of the customer.", "type": "string"}}, "required": ["customer_id", "currency", "amount", "address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the current player roster of a specified Major League Baseball (MLB) team.", "name": "getCurrentPlayerRoster", "parameters": {"properties": {"teamId": {"description": "The unique identification ID of the team.", "type": "integer"}}, "required": ["teamId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the scorecard of a specific Major League Baseball (MLB) game.", "name": "getGameScorecard", "parameters": {"properties": {"gameId": {"description": "The unique identification ID of the game.", "type": "string"}, "includeDetails": {"description": "Whether to include detailed information about the game, default is false.", "type": "boolean"}}, "required": ["gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the statistical data of a specified Major League Baseball (MLB) player.", "name": "getPlayerStats", "parameters": {"properties": {"playerId": {"description": "The unique identification ID of the player.", "type": "integer"}, "season": {"description": "The season year for which to retrieve the statistical data, defaulting to the current year.", "type": "integer"}, "statsType": {"description": "The type of statistical data, such as 'batting' (batting average) or 'pitching' (earned run average), defaulting to 'batting'.", "enum": ["batting", "pitching"], "type": "string"}}, "required": ["playerId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Major League Baseball (MLB) team rankings and other league-wide statistics.", "name": "getTeamRankings", "parameters": {"properties": {"league": {"description": "The name of the league, such as 'American' or 'National'. Defaults to all leagues.", "enum": ["American", "National"], "type": "string"}, "season": {"description": "The season year for which to retrieve the rankings. Defaults to the current year.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Execute an SQL query and return the results.", "name": "executeQuery", "parameters": {"properties": {"database_id": {"description": "The unique identifier of the database.", "type": "integer"}, "parameters": {"description": "An array of query parameters for parameterized queries.", "items": {"description": "The value of the SQL query parameter.", "type": "string"}, "type": "array"}, "query": {"description": "The SQL query statement to execute.", "type": "string"}}, "required": ["query", "database_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "User authentication, used for managing modules and accessing the platform.", "name": "authenticateUser", "parameters": {"properties": {"password": {"description": "The user's password", "type": "string"}, "username": {"description": "The user's username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new mod.", "name": "createMod", "parameters": {"properties": {"game_id": {"description": "The unique identifier of the game", "type": "integer"}, "name": {"description": "The name of the mod", "type": "string"}, "status": {"description": "The status of the mod, the default value is 'active'", "enum": ["active", "inactive", "deleted"], "type": "string"}, "version": {"description": "The version of the mod, the default value is '1.0'", "type": "string"}}, "required": ["game_id", "name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of mods according to the filtering conditions.", "name": "getMods", "parameters": {"properties": {"game_id": {"description": "The unique identifier of the game", "type": "integer"}, "limit": {"description": "The limit on the number of mods to return, default is 10", "type": "integer"}, "sort": {"description": "The sorting method, default is 'created'", "enum": ["created", "updated", "popular"], "type": "string"}, "tags": {"description": "An array of tags used to filter mods, default is empty", "items": {"description": "The tag of the mod", "type": "string"}, "type": "array"}}, "required": ["game_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the information of a specified module.", "name": "updateMod", "parameters": {"properties": {"mod_id": {"description": "The unique identifier of the module", "type": "integer"}, "name": {"description": "The new name of the module", "type": "string"}, "status": {"description": "The new status of the module", "enum": ["active", "inactive", "deleted"], "type": "string"}, "version": {"description": "The new version of the module", "type": "string"}}, "required": ["mod_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete the specified mod.", "name": "deleteMod", "parameters": {"properties": {"mod_id": {"description": "The unique identifier of the mod", "type": "integer"}}, "required": ["mod_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Report a mod to maintain a safe and fair mod ecosystem.", "name": "reportMod", "parameters": {"properties": {"details": {"description": "Detailed information of the report, default is empty", "type": "string"}, "mod_id": {"description": "The unique identifier of the mod", "type": "integer"}, "reason": {"description": "The reason for the report", "type": "string"}}, "required": ["mod_id", "reason"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Simulate a GET request and return the parameters and values contained in the request.", "name": "echoGet", "parameters": {"properties": {"data": {"description": "Data to be echoed", "type": "string"}, "timestamp": {"description": "Timestamp of the request. The default value is the current timestamp", "type": "integer"}}, "required": ["data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate a POST request and return the content contained in the request body.", "name": "echoPost", "parameters": {"properties": {"content": {"description": "The content object to be echoed", "properties": {"number": {"description": "Numeric content, default value is 0", "type": "integer"}, "text": {"description": "Text content", "type": "string"}}, "type": "object"}, "headers": {"description": "Custom request headers, default is empty", "properties": {"Content-Type": {"description": "Content type", "type": "string"}}, "type": "object"}}, "required": ["content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns the HTTP headers used when sending the request.", "name": "echoHeaders", "parameters": {"properties": {"verbose": {"description": "Whether to return detailed header information, default is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns a simulated HTTP status code.", "name": "echoStatus", "parameters": {"properties": {"statusCode": {"description": "The HTTP status code to be returned", "type": "integer"}}, "required": ["statusCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate and verify HTTP authentication information and return the authentication result.", "name": "echoAuth", "parameters": {"properties": {"password": {"description": "Password", "type": "string"}, "username": {"description": "Username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Secure Steam user login and authorization.", "name": "authenticateUser", "parameters": {"properties": {"password": {"description": "Steam user password", "type": "string"}, "twoFactorAuth": {"description": "Two-factor authentication code, default value is empty", "type": "string"}, "username": {"description": "Steam username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Steam player statistics and other game data.", "name": "getGameStats", "parameters": {"properties": {"gameId": {"description": "The Steam game ID, in the format of a combination of English letters, numbers, and special symbols", "type": "integer"}, "userId": {"description": "The Steam user ID", "type": "string"}}, "required": ["gameId", "userId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the Steam player inventory, including hats, weapons, and other items.", "name": "manageInventory", "parameters": {"properties": {"gameId": {"description": "Steam game ID, in the format of a combination of English letters, numbers, and special symbols", "type": "integer"}, "inventoryType": {"description": "Inventory type, default is 'all'", "type": "string"}, "userId": {"description": "Steam user ID", "type": "string"}}, "required": ["userId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Steam player achievements and unlocked items.", "name": "getAchievements", "parameters": {"properties": {"gameId": {"description": "Steam game ID, in the format of a combination of English letters, numbers, and special symbols", "type": "integer"}, "userId": {"description": "Steam user ID", "type": "string"}}, "required": ["userId", "gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the leaderboard data of a specific Steam game.", "name": "getLeaderboards", "parameters": {"properties": {"gameId": {"description": "Steam game ID", "type": "integer"}, "leaderboardId": {"description": "Leaderboard ID, in the format of a string of English letters", "type": "integer"}, "rangeEnd": {"description": "The ending position of the leaderboard, default is 10", "type": "integer"}, "rangeStart": {"description": "The starting position of the leaderboard, default is 0", "type": "integer"}}, "required": ["gameId", "leaderboardId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the greeting word in the user's browser language.", "name": "getGreeting", "parameters": {"properties": {"language": {"description": "The user's browser language code. For example, 'en' represents English. If not provided, it will be automatically detected. The default value is auto-detection.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the greeting in the corresponding language according to the user's IP address.", "name": "getGreetingByIP", "parameters": {"properties": {"ip": {"description": "The user's IP address, used to determine the user's geographical location.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of all languages supported by the API.", "name": "getSupportedLanguages", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a greeting in the specified format.", "name": "getGreetingWithFormat", "parameters": {"properties": {"format": {"description": "The format of the returned greeting, such as 'text' or 'json'. The default value is 'text'.", "enum": ["text", "json"], "type": "string"}, "language": {"description": "The user's browser language code. If not provided, it will be automatically detected. The default value is auto-detection.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Identify and extract clinical mentions from the provided text data.", "name": "extractClinicalMentions", "parameters": {"properties": {"language": {"description": "The language code of the text, default is 'en'.", "enum": ["en", "es", "de", "fr"], "type": "string"}, "text": {"description": "The original text data to be analyzed.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access a clinical ontology library containing codes and descriptions of various medical concepts.", "name": "getClinicalOntology", "parameters": {"properties": {"conceptId": {"description": "The unique identifier of a medical concept.", "type": "string"}, "includeSynonyms": {"description": "Whether to include synonyms, default is false.", "type": "boolean"}}, "required": ["conceptId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert unstructured medical data into structured, machine-readable standardized data.", "name": "convertToStructuredData", "parameters": {"properties": {"dataFormat": {"description": "The desired structured data format, defaulting to 'FHIR'.", "enum": ["FHIR", "HL7", "Custom"], "type": "string"}, "unstructuredData": {"description": "Unstructured medical text data.", "type": "string"}}, "required": ["unstructuredData"], "type": "object"}}, "type": "function"}, {"function": {"description": "Perform sentiment analysis on text.", "name": "analyzeSentiment", "parameters": {"properties": {"language": {"description": "The language of the text, with the default value 'zh'.", "enum": ["zh", "en", "es", "fr"], "type": "string"}, "text": {"description": "The text that needs to be sentiment analyzed.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Categorize the given text content according to predefined categories.", "name": "categorizeContent", "parameters": {"properties": {"categories": {"description": "Predefined list of categories.", "items": {"description": "Category name.", "type": "string"}, "type": "array"}, "text": {"description": "Text content to be categorized.", "type": "string"}}, "required": ["text", "categories"], "type": "object"}}, "type": "function"}, {"function": {"description": "Classify text into predefined categories.", "name": "classifyText", "parameters": {"properties": {"categories": {"description": "List of possible categories.", "items": {"type": "string"}, "type": "array"}, "text": {"description": "The text content to be classified.", "type": "string"}}, "required": ["text", "categories"], "type": "object"}}, "type": "function"}, {"function": {"description": "Extract named entities (person names, locations, organizations, etc.) from text.", "name": "extractEntities", "parameters": {"properties": {"model": {"description": "The model used for entity recognition, default is 'xx_ent_wiki_sm'.", "enum": ["xx_ent_wiki_sm", "en_core_web_sm", "de_core_news_sm"], "type": "string"}, "text": {"description": "The text content from which entities need to be extracted.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert the original text data into a refined dataset for training machine learning models.", "name": "refineDataset", "parameters": {"properties": {"dataset": {"description": "An array containing the original text data.", "items": {"type": "string"}, "type": "array"}, "refinement_options": {"description": "Options for data refinement, default is null.", "properties": {"lemmatize": {"description": "Whether to perform lemmatization, default is false.", "type": "boolean"}, "remove_stopwords": {"description": "Whether to remove stop words, default is false.", "type": "boolean"}}, "type": "object"}}, "required": ["dataset"], "type": "object"}}, "type": "function"}, {"function": {"description": "Summarize long text content and extract key information.", "name": "summarizeText", "parameters": {"properties": {"summary_length": {"description": "The expected length of the summary, default is 100 words.", "enum": [50, 100, 150, 200], "type": "integer"}, "text": {"description": "The text content for which a summary needs to be generated.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Execute an SQL query and return the results.", "name": "executeQuery", "parameters": {"properties": {"database_id": {"description": "The unique identifier of the database.", "type": "integer"}, "parameters": {"description": "An array of query parameters for parameterized queries.", "items": {"description": "The value of the SQL query parameter.", "type": "string"}, "type": "array"}, "query": {"description": "The SQL query statement to execute.", "type": "string"}}, "required": ["query", "database_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update Metabase settings and preferences.", "name": "updateSettings", "parameters": {"properties": {"setting_key": {"description": "The key of the setting item.", "type": "string"}, "setting_value": {"description": "The new value of the setting item.", "type": "string"}}, "required": ["setting_key", "setting_value"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage collections of items such as dashboards, issues, and code snippets.", "name": "manageCollection", "parameters": {"properties": {"action": {"description": "The action to perform, such as 'create', 'update', 'delete'.", "enum": ["create", "update", "delete"], "type": "string"}, "collection_data": {"description": "The data object for the collection, required only when creating or updating.", "properties": {"description": {"description": "The description of the collection.", "type": "string"}, "name": {"description": "The name of the collection.", "type": "string"}}, "type": "object"}, "collection_id": {"description": "The unique identifier of the collection.", "type": "integer"}}, "required": ["collection_id", "action"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage users and groups.", "name": "manageUsers", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "group_id": {"description": "The unique identifier of the group. The default value is the current group.", "type": "integer"}, "password": {"description": "The user's password.", "type": "string"}, "user_id": {"description": "The unique identifier of the user. The default value is the current user.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage the permissions and access levels of users and groups.", "name": "setPermissions", "parameters": {"properties": {"entity_id": {"description": "The unique identifier of the entity.", "type": "integer"}, "entity_type": {"description": "The type of the entity, such as 'dashboard', 'question'.", "enum": ["dashboard", "question"], "type": "string"}, "group_id": {"description": "The unique identifier of the group.", "type": "integer"}, "permission_level": {"description": "The permission level, such as'read', 'write'.", "enum": ["read", "write"], "type": "string"}}, "required": ["entity_type", "entity_id", "group_id", "permission_level"], "type": "object"}}, "type": "function"}, {"function": {"description": "A function to send transactional and marketing emails.", "name": "sendEmail", "parameters": {"properties": {"content": {"description": "The content of the email.", "type": "string"}, "from": {"description": "The sender's email address.", "type": "string"}, "isMarketing": {"description": "Whether it is a marketing email, default is false.", "type": "boolean"}, "subject": {"description": "The subject of the email.", "type": "string"}, "to": {"description": "A list of recipient email addresses.", "items": {"type": "string"}, "type": "array"}}, "required": ["to", "from", "subject", "content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create dynamic email templates that allow customization of email content based on user data.", "name": "createEmailTemplate", "parameters": {"properties": {"htmlContent": {"description": "The HTML content of the template.", "type": "string"}, "subject": {"description": "The subject of the template.", "type": "string"}, "templateName": {"description": "The name of the template.", "type": "string"}}, "required": ["templateName", "subject", "htmlContent"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get advanced analysis and reporting functions for emails, tracking important information such as email open rates and click-through rates.", "name": "getEmailStatistics", "parameters": {"properties": {"endDate": {"description": "The end date of the statistics, in the format of YYYY-MM-DD. Defaults to the current date.", "type": "string"}, "metrics": {"description": "List of statistical metrics to be retrieved. Defaults to ['openRate', 'clickRate'].", "items": {"enum": ["openRate", "clickRate", "bounceRate", "unsubscribeRate"], "type": "string"}, "type": "array"}, "startDate": {"description": "The start date of the statistics, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["startDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Validate email addresses to ensure that emails can be accurately delivered to the intended recipients.", "name": "validateEmailAddresses", "parameters": {"properties": {"emailAddresses": {"description": "A list of email addresses to be validated.", "items": {"type": "string"}, "type": "array"}}, "required": ["emailAddresses"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Access the Twitter followers and friends list.", "name": "getFriendsList", "parameters": {"properties": {"count": {"description": "The number of friends returned per request. The default value is 20.", "type": "integer"}, "cursor": {"description": "The cursor for pagination. The default value is -1.", "type": "integer"}, "user_name": {"description": "The name of the user.", "type": "string"}}, "required": ["user_name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a music single, such as the artist, duration, and recording location.", "name": "getTrackDetails", "parameters": {"properties": {"include_artist": {"description": "Whether to include the artist information of the single. The default value is true.", "type": "boolean"}, "track_url": {"description": "The link of the single.", "type": "string"}}, "required": ["track_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Twitter user and account information.", "name": "getUserInfo", "parameters": {"properties": {"include_entities": {"description": "Whether to include entity information. The default value is false.", "type": "boolean"}, "user_id": {"description": "The ID of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Represents posting a tweet on behalf of a Twitter user.", "name": "postTweet", "parameters": {"properties": {"auto_populate_reply_metadata": {"description": "Whether to automatically populate reply metadata. The default value is false.", "type": "boolean"}, "in_reply_to_status_id": {"description": "If the tweet is a reply, specify the ID of the original tweet. Defaults to empty.", "type": "string"}, "media_ids": {"description": "An array of media file IDs used to include images or videos in the tweet. Defaults to empty.", "items": {"type": "string"}, "type": "array"}, "status": {"description": "The content of the tweet.", "type": "string"}}, "required": ["status"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific tracks, shows, or users in the Mixcloud library.", "name": "searchContent", "parameters": {"properties": {"limit": {"description": "The number of results per page, with a default value of 10", "type": "integer"}, "page": {"description": "The page number for pagination, with a default value of 1", "type": "integer"}, "query": {"description": "The search query string", "type": "string"}, "type": {"description": "The type of content to search for, such as 'track','show', 'user', with a default value of 'all'", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Twitter tweets based on search terms and hashtags.", "name": "searchTweets", "parameters": {"properties": {"count": {"description": "The number of tweets to return. The default value is 10.", "type": "integer"}, "lang": {"description": "The language code of the tweets. The default value is 'en'.", "type": "string"}, "query": {"description": "Search terms or hashtags.", "type": "string"}, "result_type": {"description": "The type of results. The optional values are'recent', 'popular','mixed'. The default value is'mixed'.", "enum": ["recent", "popular", "mixed"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream audio content directly from Mixcloud.", "name": "streamAudioContent", "parameters": {"properties": {"quality": {"description": "The quality of the stream, such as 'high','medium', 'low'. The default value is 'high'", "type": "string"}, "stream_url": {"description": "The streaming URL of the audio content", "type": "string"}}, "required": ["stream_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream Twitter tweets in real-time.", "name": "streamTweets", "parameters": {"properties": {"locations": {"description": "Geographical coordinates, in the format of [longitude, latitude], default is empty.", "items": {"type": "float"}, "type": "array"}, "track": {"description": "An array of keywords to track.", "items": {"type": "string"}, "type": "array"}}, "required": ["track"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a music single, such as the artist, duration, and recording location.", "name": "GetMusicTrackDetails", "parameters": {"properties": {"include_artist": {"description": "Whether to include the artist information of the single. The default value is true.", "type": "boolean"}, "track_id": {"description": "The unique identifier of the single.", "type": "string"}}, "required": ["track_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the IP address associated with a specific domain name.", "name": "getDomainIP", "parameters": {"properties": {"domain": {"description": "The domain name for which the IP address needs to be queried.", "type": "string"}, "recordType": {"description": "The DNS record type, defaulting to 'A' record.", "enum": ["A", "AAAA", "CNAME", "MX", "TXT", "NS"], "type": "string"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the mail servers and IP addresses associated with a specific domain name.", "name": "getDomainMailServers", "parameters": {"properties": {"domain": {"description": "The domain name for which to query the mail servers.", "type": "string"}, "includeIP": {"description": "Whether to include the IP addresses of the mail servers. Defaults to true.", "type": "boolean"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the name servers and IP addresses associated with a specific domain name.", "name": "getDomainNameServers", "parameters": {"properties": {"domain": {"description": "The domain name for which to query the name servers.", "type": "string"}, "resolveIP": {"default": true, "description": "Whether to resolve the IP addresses of the name servers, default is true.", "type": "boolean"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the geographical location of a specific IP address.", "name": "getIpLocation", "parameters": {"properties": {"ips": {"description": "The IP addresses to be queried.", "items": {"type": "string"}, "type": "array"}}, "required": ["ips"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve SoundCloud track information such as title, artist, and length.", "name": "getTrackInfo", "parameters": {"properties": {"track_id": {"description": "The unique identifier of the track", "type": "string"}}, "required": ["track_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for SoundCloud artists, tracks, and playlists.", "name": "searchContent", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return. The default value is 30", "type": "integer"}, "query": {"description": "The keyword for the search query", "type": "string"}, "type": {"description": "The type of content to search for, such as 'artist', 'track', 'playlist'. The default value is 'track'", "enum": ["artist", "track", "playlist"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provides access to the SoundCloud user account, allowing the creation of new content on SoundCloud.", "name": "createContent", "parameters": {"properties": {"track_data": {"description": "The data of the track to be created", "properties": {"genre": {"description": "The genre of the track, with the default value 'Unknown'", "type": "string"}, "title": {"description": "The title of the track", "type": "string"}}, "type": "object"}, "user_id": {"description": "The unique identifier of the user", "type": "string"}}, "required": ["user_id", "track_data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Allows developers to authenticate their SoundCloud users, control SoundCloud playback, and access SoundCloud's data analytics.", "name": "authenticateUser", "parameters": {"properties": {"client_id": {"description": "The developer's client ID", "type": "string"}, "client_secret": {"description": "The developer's client secret", "type": "string"}, "redirect_uri": {"description": "The callback URL after successful authentication", "type": "string"}, "scope": {"description": "The requested scope of permissions, with the default value '*'", "type": "string"}, "state": {"description": "Used to maintain the state of the request and callback, and will be returned as-is in the callback. The default value is 'null'", "type": "string"}}, "required": ["client_id", "client_secret", "redirect_uri"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create a new database instance.", "name": "createDatabaseInstance", "parameters": {"properties": {"instanceName": {"description": "The name of the database instance.", "type": "string"}, "size": {"description": "The size of the database (in MB), with a default value of 100MB.", "type": "integer"}}, "required": ["instanceName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Store JSON data in the database.", "name": "storeJsonData", "parameters": {"properties": {"collection": {"description": "Which collection the data will be stored in.", "type": "string"}, "data": {"description": "The JSON data object to be stored.", "type": "object"}}, "required": ["data", "collection"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve JSON data from the database.", "name": "retrieveJsonData", "parameters": {"properties": {"collection": {"description": "From which collection to retrieve data.", "type": "string"}, "query": {"description": "Query conditions for retrieving data.", "type": "object"}}, "required": ["query", "collection"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update JSON data in the database.", "name": "updateJsonData", "parameters": {"properties": {"collection": {"description": "In which collection to update the data.", "type": "string"}, "query": {"description": "Query conditions used to locate the data to be updated.", "type": "object"}, "update": {"description": "The specific content of the update operation.", "type": "object"}}, "required": ["query", "update", "collection"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete JSON data from the database.", "name": "deleteJsonData", "parameters": {"properties": {"collection": {"description": "From which collection to delete data.", "type": "string"}, "query": {"description": "Query conditions used to locate the data to be deleted.", "type": "object"}}, "required": ["query", "collection"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Calculate the carbon emissions of a specified website page.", "name": "calculateCarbonEmission", "parameters": {"properties": {"includeSubpages": {"description": "Whether to include the carbon emissions calculation of subpages. The default value is false.", "type": "boolean"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get recommended methods to reduce the carbon footprint of a website.", "name": "getReductionSuggestions", "parameters": {"properties": {"url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a detailed report on the carbon emissions of a website, including emissions and suggestions for emission reduction.", "name": "getDetailedReport", "parameters": {"properties": {"email": {"description": "The email address to receive the detailed report. Defaults to empty.", "type": "string"}, "url": {"description": "The URL address of the website page.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for job listings in a specified location in Germany. Can be filtered by job category, salary range, etc. The corresponding company or organization name needs to be returned.", "name": "searchJobs", "parameters": {"properties": {"category": {"description": "Job category, default is empty", "type": "string"}, "full_time": {"description": "Whether it is a full-time position, default is true", "type": "boolean"}, "location": {"description": "Location where the job is located", "type": "string"}, "salary_max": {"description": "Maximum salary range, default is no upper limit", "type": "float"}, "salary_min": {"description": "Minimum salary range, default is 0.0", "type": "float"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access information about German companies and organizations that post job listings, including details about their size, industry, and location.", "name": "getCompanyInfo", "parameters": {"properties": {"company": {"description": "The name of the company or organization", "type": "string"}}, "required": ["company"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access which positions of German companies that post job listings and provide simple information.", "name": "getCompanyJob", "parameters": {"properties": {"company": {"description": "The name of the company or organization", "type": "string"}}, "required": ["company"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specified job in Germany.", "name": "getJobDetailsById", "parameters": {"properties": {"job_id": {"description": "The unique identifier of the job.", "type": "string"}}, "required": ["job_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest open-source relevant datasets in Canada according to a specific topic.", "name": "getDatasetsByTopic", "parameters": {"properties": {"page": {"description": "The page number of the datasets to be retrieved. The default value is 1.", "type": "integer"}, "topic": {"description": "The topic keyword of the dataset.", "type": "string"}}, "required": ["topic"], "type": "object"}}, "type": "function"}, {"function": {"description": "Filter open-source datasets in Canada based on geographical location, timeline, or keywords.", "name": "filterDatasets", "parameters": {"properties": {"keywords": {"description": "List of keywords.", "items": {"type": "string"}, "type": "array"}, "location": {"description": "Geographical location in Canada.", "type": "string"}, "timeline": {"description": "Timeline range, in the format of YYYY-MM-DD, YYYY-MM-DD.", "type": "string"}}, "required": ["location", "timeline", "keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access data from the Government of Canada in different formats.", "name": "accessDataFormats", "parameters": {"properties": {"datasetId": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The format of the desired data, such as CSV, JSON, or XML.", "type": "string"}}, "required": ["datasetId", "format"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time arrival information for buses, trains, and ferries in Vancouver.", "name": "getRealTimeArrivals", "parameters": {"properties": {"count": {"description": "The number of returned results, with a default value of 5.", "type": "integer"}, "stationId": {"description": "The unique identifier of the station.", "type": "string"}, "transportType": {"description": "The type of transportation, such as 'bus', 'train', 'ferry', with a default value of 'all'.", "enum": ["bus", "train", "ferry", "all"], "type": "string"}}, "required": ["stationId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get delay information for buses, trains, and ferries in Vancouver.", "name": "getDelayInfo", "parameters": {"properties": {"stationId": {"description": "The unique identifier of the station.", "type": "string"}, "transportType": {"description": "The type of transportation, such as 'bus', 'train', 'ferry'. The default value is 'all'.", "enum": ["bus", "train", "ferry", "all"], "type": "string"}}, "required": ["stationId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Purchase tickets for Vancouver buses, trains, and ferries.", "name": "buyTicket", "parameters": {"properties": {"location": {"description": "Destination.", "type": "string"}, "stationId": {"description": "The unique identifier of the station.", "type": "string"}, "time": {"description": "Arrival time, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["stationId", "time", "location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the static timetable information of Vancouver.", "name": "getStaticTimetable", "parameters": {"properties": {"date": {"description": "The date of the query, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "routeId": {"description": "The unique identifier of the route.", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Displays a map of Vancouver stations and routes based on location.", "name": "getMapBasedStations", "parameters": {"properties": {"latitude": {"description": "Latitude value.", "type": "float"}, "longitude": {"description": "Longitude value.", "type": "float"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Integrate with other applications and mapping services to provide Vancouver traffic information.", "name": "getIntegratedTransportInfo", "parameters": {"properties": {"location": {"description": "The user's location information.", "properties": {"latitude": {"description": "Latitude value.", "type": "float"}, "longitude": {"description": "Longitude value.", "type": "float"}}, "type": "object"}, "service": {"description": "The name of the service to be integrated, such as 'GoogleMaps', 'AppleMaps'.", "type": "string"}, "time": {"description": "The time of the query, in the format 'HH:MM', and the default value is the current time.", "type": "string"}}, "required": ["service", "location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create an SVG text with a simulated keyboard typing animation.", "name": "createTypingSVG", "parameters": {"properties": {"fontColor": {"description": "Font color. The default value is '#000000'.", "type": "string"}, "fontFamily": {"description": "Font type. The default value is'sans-serif'.", "type": "string"}, "fontSize": {"description": "Font size. The default value is 14.", "type": "integer"}, "text": {"description": "The text content to be displayed.", "type": "string"}, "typingSpeed": {"description": "Typing speed (words per minute). The default value is 60.0.", "type": "float"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Set the speed of the typing animation and the delay before it starts.", "name": "setTypingAnimation", "parameters": {"properties": {"delayBeforeStart": {"description": "The delay time (in milliseconds) before starting to type. The default value is 1000.", "type": "integer"}, "svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}, "typingSpeed": {"description": "Typing speed (words per minute).", "type": "float"}}, "required": ["typingSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the speed of the deletion animation and the pause duration before retyping.", "name": "customizeDeletionAnimation", "parameters": {"properties": {"deletionSpeed": {"description": "The speed of the deletion animation (words per minute).", "type": "float"}, "pauseBeforeRetyping": {"description": "The pause duration before retyping (in milliseconds). The default value is 500.", "type": "integer"}}, "required": ["deletionSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the status of the current typing SVG, including text content and animation settings.", "name": "getTypingSVGStatus", "parameters": {"properties": {"svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the text content and style of an existing typing SVG.", "name": "updateTypingSVG", "parameters": {"properties": {"newFontColor": {"description": "The new font color. The default value is the existing font color.", "type": "string"}, "newFontSize": {"description": "The new font size. The default value is the existing font size.", "type": "integer"}, "newText": {"description": "The new text content. The default value is the existing text.", "type": "string"}, "svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access specific macroeconomic data in JSON format for use in your own applications.", "name": "accessDataInJSON", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The return format of the data, default is 'JSON'.", "enum": ["JSON", "CSV", "XML"], "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain macroeconomic indicator data for a specified country or region, such as GDP, inflation rate, unemployment rate, etc.", "name": "getEconomicIndicators", "parameters": {"properties": {"country": {"description": "Country or region code, e.g., 'US' represents the United States.", "type": "string"}, "indicators": {"description": "An array of macroeconomic indicators to be queried.", "items": {"description": "The English names of macroeconomic indicators, such as 'GDP', 'Inflation', 'Unemployment'.", "type": "string"}, "type": "array"}, "year": {"description": "The year to be queried, defaulting to the current year.", "type": "integer"}}, "required": ["country", "indicators"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the definition of an English word.", "name": "getWordDefinition", "parameters": {"properties": {"partOfSpeech": {"description": "Specify the part of speech to be queried. The default value is all parts of speech.", "type": "string"}, "word": {"description": "The English word to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get example sentences of English words.", "name": "getWordExamples", "parameters": {"properties": {"useCase": {"description": "Specify the usage scenario of the example sentences, defaulting to all scenarios.", "type": "string"}, "word": {"description": "The English word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the pronunciation of an English word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The format of the pronunciation file, default is mp3.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The English word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get synonyms of an English word.", "name": "getWordSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The English word for which to query synonyms.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search through thousands of time series and datasets to find specific macroeconomic data.", "name": "searchTimeSeries", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return, default is 50.", "type": "integer"}, "query": {"description": "Search query keywords, which can be countries, indicators or other keywords.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current weather information for a specific location globally.", "name": "getCurrentWeather", "parameters": {"properties": {"language": {"description": "The language of the returned data, defaulting to English.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for any location in the world within the past 30 days.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "The required historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}, "time_interval": {"description": "The time interval, defaulting to '24h' representing 24 hours.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Explore the weather forecasts for the next five days in different cities around the world.", "name": "getForecast", "parameters": {"properties": {"days": {"description": "The number of days for the forecast, default is 5 days.", "type": "integer"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location", "days"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed weather condition information for a specific location globally.", "name": "getLocationWeatherDetails", "parameters": {"properties": {"include": {"description": "An array containing additional weather information, default is empty.", "items": {"description": "The type of additional weather information to include, such as'sunrise and sunset times', 'atmospheric pressure', 'weather forecast', etc.", "type": "string"}, "type": "array"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a list of global holidays for a specific country and year.", "name": "getHolidaysByCountryAndYear", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "language": {"description": "The language of the returned result, default is English", "type": "string"}, "year": {"description": "The year for which holidays need to be retrieved", "type": "integer"}}, "required": ["country", "year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a list of global holidays for multiple countries and years.", "name": "getHolidaysByCountriesAndYears", "parameters": {"properties": {"countries": {"description": "An array of two-letter ISO codes for countries", "items": {"type": "string"}, "type": "array"}, "years": {"description": "An array of years for which holidays need to be retrieved", "items": {"type": "integer"}, "type": "array"}}, "required": ["countries", "years"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about specific global holidays, including their names, dates, and types.", "name": "getHolidayInformation", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "holiday_name": {"description": "The name of the holiday", "type": "string"}, "year": {"description": "The year in which the holiday falls", "type": "integer"}}, "required": ["country", "year", "holiday_name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Determine whether a specific date is a global holiday in a specific country.", "name": "isDateHoliday", "parameters": {"properties": {"country": {"description": "The two-letter ISO code of the country", "type": "string"}, "date": {"description": "The date to be checked, in the format 'YYYY-MM-DD'", "type": "string"}}, "required": ["country", "date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for locations around the world by name, proximity, or administrative division.", "name": "searchLocations", "parameters": {"properties": {"country": {"description": "Limit the search results to a specific country code. The default value is all countries.", "type": "string"}, "lang": {"description": "The language code of the results. The default value is 'en'.", "type": "string"}, "maxRows": {"description": "The maximum number of rows to return in the results. The default value is 10.", "type": "integer"}, "query": {"description": "The name of the location to search for.", "type": "string"}, "radius": {"description": "The search radius (in kilometers). The default value is 0, indicating no limit.", "type": "float"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a store based on the store name.", "name": "searchStore", "parameters": {"properties": {"name": {"description": "The name of the store to be searched.", "type": "string"}, "type": {"description": "The type of the store to be searched.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for available coupons of the corresponding store.", "name": "searcCoupon", "parameters": {"properties": {"name": {"description": "The name of the store to search for.", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Calculate the distance between two locations", "name": "computeDistance", "parameters": {"properties": {"from": {"description": "The specific address of the starting point", "type": "string"}, "to": {"description": "The specific address of the destination", "type": "string"}}, "required": ["from", "to"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about a specific global location, such as its population or elevation.", "name": "getLocationInfo", "parameters": {"properties": {"geonameId": {"description": "The GeoNames ID of the location.", "type": "integer"}, "includeElevation": {"description": "Whether to include elevation information. The default value is false.", "type": "boolean"}, "includePopulation": {"description": "Whether to include population information. The default value is false.", "type": "boolean"}}, "required": ["geonameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get data such as global time zones and country codes.", "name": "getGlobalData", "parameters": {"properties": {"country": {"description": "Specify the country code. This is only valid when dataType is 'countryCode'. The default value is all countries.", "type": "string"}, "dataType": {"description": "The type of data required. The available values are 'timezone' or 'countryCode'.", "type": "string"}, "date": {"description": "Specify the date in the format 'YYYY-MM-DD'. This is only valid when dataType is 'timezone'. The default value is the current date.", "type": "string"}}, "required": ["dataType"], "type": "object"}}, "type": "function"}, {"function": {"description": "Compile the code in the specified programming language and return the compilation result.", "name": "compileCode", "parameters": {"properties": {"input": {"description": "The input data during the compilation process. The default value is empty.", "type": "string"}, "language": {"description": "Programming language, such as C, C++, Python, Java, etc.", "type": "string"}, "sourceCode": {"description": "The source code text to be compiled.", "type": "string"}}, "required": ["language", "sourceCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Debug the code and return error and warning information.", "name": "debugCode", "parameters": {"properties": {"language": {"description": "Programming language, such as C, C++, Python, Java, etc.", "type": "string"}, "sourceCode": {"description": "The source code text to be debugged.", "type": "string"}}, "required": ["language", "sourceCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide syntax highlighting for source code.", "name": "getSyntaxHighlighting", "parameters": {"properties": {"language": {"description": "Programming language, such as C, C++, Python, Java, etc.", "type": "string"}, "sourceCode": {"description": "The source code text to be highlighted.", "type": "string"}}, "required": ["sourceCode", "language"], "type": "object"}}, "type": "function"}, {"function": {"description": "Run the code and return the output result.", "name": "runCode", "parameters": {"properties": {"input": {"description": "Input data during the running process. The default value is empty.", "type": "string"}, "language": {"description": "Programming language, such as C, C++, Python, Java, etc.", "type": "string"}, "sourceCode": {"description": "The source code text to be run.", "type": "string"}}, "required": ["language", "sourceCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a sharing link for a code snippet.", "name": "shareCodeSnippet", "parameters": {"properties": {"expireAfter": {"description": "Link expiration time (in minutes). The default value is 1440 minutes (24 hours).", "type": "integer"}, "language": {"description": "Programming language, such as C, C++, Python, Java, etc.", "type": "string"}, "sourceCode": {"description": "The source code text to be shared.", "type": "string"}}, "required": ["sourceCode", "language"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve historical weather data of NoctuaSky for a specified date and location.", "name": "retrieveHistoricalWeather", "parameters": {"properties": {"date": {"description": "The date of the required historical data, in the format of YYYY-MM-DD.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format of 'latitude,longitude'.", "type": "string"}, "unit": {"description": "The temperature unit. The available values are 'C' or 'F', and the default value is 'C'.", "type": "string"}}, "required": ["date", "location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create an SVG text with a simulated keyboard typing animation.", "name": "createTypingSVG", "parameters": {"properties": {"fontColor": {"description": "Font color. The default value is '#000000'.", "type": "string"}, "fontFamily": {"description": "Font type. The default value is'sans-serif'.", "type": "string"}, "fontSize": {"description": "Font size. The default value is 14.", "type": "integer"}, "text": {"description": "The text content to be displayed.", "type": "string"}, "typingSpeed": {"description": "Typing speed (words per minute). The default value is 60.0.", "type": "float"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Set the speed of the typing animation and the delay before it starts.", "name": "setTypingAnimation", "parameters": {"properties": {"delayBeforeStart": {"description": "The delay time (in milliseconds) before starting to type. The default value is 1000.", "type": "integer"}, "typingSpeed": {"description": "Typing speed (words per minute).", "type": "float"}}, "required": ["typingSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the speed of the deletion animation and the pause duration before retyping.", "name": "customizeDeletionAnimation", "parameters": {"properties": {"deletionSpeed": {"description": "The speed of the deletion animation (words per minute).", "type": "float"}, "pauseBeforeRetyping": {"description": "The pause duration before retyping (in milliseconds). The default value is 500.", "type": "integer"}}, "required": ["deletionSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the status of the current typing SVG, including text content and animation settings.", "name": "getTypingSVGStatus", "parameters": {"properties": {"svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the text content and style of an existing typing SVG.", "name": "updateTypingSVG", "parameters": {"properties": {"newFontColor": {"description": "The new font color. The default value is the existing font color.", "type": "string"}, "newFontSize": {"description": "The new font size. The default value is the existing font size.", "type": "integer"}, "newText": {"description": "The new text content. The default value is the existing text.", "type": "string"}, "svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a demonstration text paragraph based on the specified number of words.", "name": "generateTextByWords", "parameters": {"properties": {"addPunctuation": {"description": "Whether to add punctuation at the end of the text. The default value is true.", "type": "boolean"}, "wordCount": {"description": "The number of words in the generated text, ranging from 10 to 100.", "type": "integer"}}, "required": ["wordCount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate demonstration text paragraphs based on the specified number of sentences.", "name": "generateTextBySentences", "parameters": {"properties": {"includeQuestion": {"description": "Whether to include interrogative sentences. The default value is false.", "type": "boolean"}, "sentenceCount": {"description": "The number of sentences in the generated text, ranging from 1 to 10.", "type": "integer"}}, "required": ["sentenceCount"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate customized demonstration text paragraphs based on multiple options.", "name": "generateParagraphsWithOptions", "parameters": {"properties": {"options": {"description": "Options for customized text generation.", "properties": {"format": {"description": "Output format. The available values are 'text' or 'html', and the default value is 'text'.", "type": "string"}, "maxWords": {"description": "The maximum number of words in each paragraph.", "type": "integer"}, "minWords": {"description": "The minimum number of words in each paragraph.", "type": "integer"}, "paragraphs": {"description": "The number of paragraphs to generate. The default value is 3.", "type": "integer"}}, "type": "object"}}, "required": ["options"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get historical and real-time market data for a specified cryptocurrency.", "name": "getMarketData", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which market data is to be retrieved, such as BTC, ETH, etc.", "type": "string"}, "interval": {"description": "The time interval of the data, in minutes. The default value is 5.", "type": "integer"}, "since": {"description": "The timestamp to start retrieving data from, in Unix timestamp format. The default is the current time.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the balance information of the Kraken account.", "name": "getAccountBalance", "parameters": {"properties": {"accountid": {"description": "Account ID", "type": "string"}, "asset": {"description": "Asset code, such as 'BTC'. By default, the balances of all assets are returned.", "type": "string"}}, "required": ["accountid"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trading history of the Kraken account.", "name": "getTradeHistory", "parameters": {"properties": {"accountid": {"description": "Account ID", "type": "string"}, "end": {"description": "End time, in the format of Unix timestamp, default is the current time.", "type": "string"}, "ofs": {"description": "Result offset, default is 0.", "type": "integer"}, "start": {"description": "Start time, in the format of Unix timestamp, default is the account creation time.", "type": "string"}, "type": {"description": "The type of trade, 'all', 'any position', 'closed position', 'closing position', 'no position', default is 'all'.", "type": "string"}}, "required": ["accountid"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Kraken API keys.", "name": "manageAPIKeys", "parameters": {"properties": {"action": {"description": "The type of operation, 'create', 'update', 'delete'.", "type": "string"}, "key": {"description": "The API key, required only when updating or deleting.", "type": "string"}, "permissions": {"description": "List of API key permissions, such as ['query funds','manage trades']. Defaults to empty, meaning no permissions.", "items": {"type": "string"}, "type": "array"}}, "required": ["action"], "type": "object"}}, "type": "function"}, {"function": {"description": "Withdraw funds from the account.", "name": "withdrawFunds", "parameters": {"properties": {"address": {"description": "The fund withdrawal address.", "type": "string"}, "amount": {"description": "The amount of the withdrawal.", "type": "float"}, "currency": {"description": "The currency type of the withdrawal, such as 'BTC'.", "type": "string"}, "customer_id": {"description": "The unique identifier of the customer.", "type": "string"}}, "required": ["customer_id", "currency", "amount", "address"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current player roster of a specified Major League Baseball (MLB) team.", "name": "getCurrentPlayerRoster", "parameters": {"properties": {"teamId": {"description": "The unique identification ID of the team.", "type": "integer"}}, "required": ["teamId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the scorecard of a specific Major League Baseball (MLB) game.", "name": "getGameScorecard", "parameters": {"properties": {"gameId": {"description": "The unique identification ID of the game.", "type": "string"}, "includeDetails": {"description": "Whether to include detailed information about the game, default is false.", "type": "boolean"}}, "required": ["gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Major League Baseball (MLB) team rankings and other league-wide statistics.", "name": "getTeamRankings", "parameters": {"properties": {"league": {"description": "The name of the league, such as 'American' or 'National'. Defaults to all leagues.", "enum": ["American", "National"], "type": "string"}, "season": {"description": "The season year for which to retrieve the rankings. Defaults to the current year.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the statistical data of a specified Major League Baseball (MLB) player.", "name": "getMLBPlayerStats", "parameters": {"properties": {"playerId": {"description": "The unique identification ID of the player.", "type": "integer"}, "season": {"description": "The season year for which to retrieve the statistical data. Defaults to the current year.", "type": "integer"}, "statsType": {"description": "The type of statistical data, such as 'batting' (batting average) or 'pitching' (earned run average). Defaults to 'batting'.", "enum": ["batting", "pitching"], "type": "string"}}, "required": ["playerId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time price data of the specified cryptocurrency.", "name": "getRealTimePrice", "parameters": {"properties": {"currency": {"description": "The abbreviation of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the historical price data of the specified cryptocurrency.", "name": "getHistoricalPrice", "parameters": {"properties": {"currency": {"description": "The abbreviation of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}, "end_date": {"description": "The end date of the query, in the format of YYYY-MM-DD.", "type": "string"}, "start_date": {"description": "The start date of the query, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["currency", "start_date", "end_date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new order on the Coinbase platform.", "name": "createOrder", "parameters": {"properties": {"amount": {"description": "The quantity of the cryptocurrency to buy or sell.", "type": "float"}, "currency": {"description": "The abbreviation of the cryptocurrency in the order.", "type": "string"}, "price": {"description": "The price per unit of the cryptocurrency, defaulting to the current market price.", "type": "float"}, "type": {"description": "The type of the order, such as 'buy' or'sell'.", "type": "string"}}, "required": ["currency", "amount", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete the specified order on the Coinbase platform.", "name": "deleteOrder", "parameters": {"properties": {"orderId": {"description": "The unique identifier of the order to be deleted.", "type": "string"}}, "required": ["orderId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Receive notifications about specified events, such as payment completion or account verification.", "name": "getNotifications", "parameters": {"properties": {"email": {"description": "Email address to receive notifications. Defaults to the email address bound to the account.", "type": "string"}, "type": {"description": "Notification type, such as 'payment_received' or 'account_verified'.", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide technical indicator data for a specified cryptocurrency, such as moving averages, Relative Strength Index (RSI), etc.", "name": "getTechnicalIndicators", "parameters": {"properties": {"currency": {"description": "The code of the cryptocurrency for which technical indicators are to be obtained. For example, 'BTC' represents Bitcoin.", "type": "string"}, "indicators": {"description": "The list of technical indicators to be obtained.", "items": {"description": "The name of the technical indicator. For example, 'MA' represents the moving average.", "type": "string"}, "type": "array"}, "timePeriod": {"description": "The time period of the technical indicator, defaulting to 14.", "type": "integer"}}, "required": ["currency", "indicators"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide trading signals for a specified cryptocurrency based on technical indicators.", "name": "getTradingSignals", "parameters": {"properties": {"currency": {"description": "The code of the cryptocurrency for which trading signals are to be obtained, e.g., 'BTC' represents Bitcoin.", "type": "string"}, "indicators": {"description": "A list of technical indicators used to generate trading signals.", "items": {"description": "The name of the technical indicator, e.g., 'MA' represents the moving average.", "type": "string"}, "type": "array"}, "threshold": {"description": "The threshold for generating trading signals, default is 0.5.", "type": "float"}}, "required": ["currency", "indicators"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current weather information for a specific location globally.", "name": "getCurrentWeather", "parameters": {"properties": {"language": {"description": "The language of the returned data, defaulting to English.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for any location in the world within the past 30 days.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "The required historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}, "time_interval": {"description": "The time interval, defaulting to '24h' representing 24 hours.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Explore the weather forecasts for the next five days in different cities around the world.", "name": "getForecast", "parameters": {"properties": {"days": {"description": "The number of days for the forecast, defaulting to 5 days.", "type": "integer"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed weather condition information for a specific location globally.", "name": "getLocationWeatherDetails", "parameters": {"properties": {"include": {"description": "An array containing additional weather information, default is empty.", "items": {"description": "The type of additional weather information to include, such as'sunrise and sunset times', 'atmospheric pressure', 'weather forecast', etc.", "type": "string"}, "type": "array"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve poems by specific lines or keywords in the poems.", "name": "findPoemsByLine", "parameters": {"properties": {"exactMatch": {"description": "Whether to perform an exact match. The default value is false.", "type": "boolean"}, "line": {"description": "Specific line in the poem.", "type": "string"}}, "required": ["line"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a specific poem by its title.", "name": "getPoemByTitle", "parameters": {"properties": {"title": {"description": "The title of the poem.", "type": "string"}}, "required": ["title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve poems based on various filters such as genre, mood, and type of poem.", "name": "retrievePoemsWithFilters", "parameters": {"properties": {"genre": {"description": "The genre of the poem, with the default value being empty.", "type": "string"}, "mood": {"description": "The mood of the poem, with the default value being empty.", "type": "string"}, "type": {"description": "The type of the poem, with the default value being empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for all poems by the given author.", "name": "searchPoemsByAuthor", "parameters": {"properties": {"author": {"description": "The name of the poet.", "type": "string"}, "page": {"description": "The page number to retrieve, with a default value of 1.", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed and accurate forecasts for the next few days in Brazil, including hourly forecasts, weather conditions, precipitation probabilities, etc.", "name": "getBrazilForecast", "parameters": {"properties": {"city": {"description": "The name of the city, for example: 'Rio de Janeiro'", "type": "string"}, "days": {"description": "The number of days for the forecast, ranging from 1 to 10, with a default value of 5", "type": "integer"}, "includeHourly": {"description": "Whether to include hourly weather forecasts, with a default value of false", "type": "boolean"}}, "required": ["city"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve detailed information about a specific Estonian government dataset.", "name": "getDatasetDetails", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage and update user profile and data of the Estonian government.", "name": "updateUserProfile", "parameters": {"properties": {"profile_data": {"description": "An object containing user profile update information.", "properties": {"email": {"description": "The user's email address. The default value is the current email address.", "type": "string"}, "name": {"description": "The user's full name. The default value is the current name.", "type": "string"}}, "type": "object"}, "user_id": {"description": "The user's unique identifier.", "type": "string"}}, "required": ["user_id", "profile_data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific Estonian government datasets according to different criteria such as theme, type, and keywords.", "name": "searchDatasets", "parameters": {"properties": {"keywords": {"description": "List of search keywords, with the default value being empty.", "items": {"description": "Search keyword.", "type": "string"}, "type": "array"}, "topic": {"description": "Theme of the dataset, with the default value being empty.", "type": "string"}, "type": {"description": "Type of the dataset, with the default value being empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve and analyze the metadata associated with each dataset of the Estonian government.", "name": "retrieveMetadata", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "include_statistics": {"description": "Whether to include statistics. The default value is false.", "type": "boolean"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for anime and manga artists and list their works.", "name": "searchArtists", "parameters": {"properties": {"artist_name": {"description": "The name of the artist", "type": "string"}, "page": {"description": "The page number to retrieve, with a default value of 1", "type": "integer"}}, "required": ["artist_name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specified anime and manga works using tags or other conditions.", "name": "searchWorks", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results. The default value is 20", "type": "integer"}, "sort_by": {"description": "The sorting method. The default value is'relevance'", "enum": ["relevance", "date", "popularity"], "type": "string"}, "tags": {"description": "The list of tags for the works", "items": {"type": "string"}, "type": "array"}}, "required": ["tags"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve specified anime and manga artists, works, and their relationships, including parent-child relationships and tag relationships.", "name": "retrieveArtistWorks", "parameters": {"properties": {"artist_id": {"description": "The unique identification ID of the artist", "type": "integer"}, "include_relations": {"description": "Whether to include the parent-child relationships and tag relationships of the works. The default value is false.", "type": "boolean"}, "work_type": {"description": "The type of the work, such as 'illustration' or 'comic'. The default value is 'all'.", "enum": ["all", "illustration", "comic"], "type": "string"}}, "required": ["artist_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query malware data based on various filters such as file name, MD5 hash, or tags.", "name": "queryMalwareData", "parameters": {"properties": {"filename": {"description": "The file name to query, default is empty", "type": "string"}, "limit": {"description": "The limit on the number of returned results, default is 100", "type": "integer"}, "md5": {"description": "The MD5 hash value to query, default is empty", "type": "string"}, "tag": {"description": "The tag to query, default is empty", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific malware sample, including the sample source, timestamp, detection rate, and relevant metadata.", "name": "retrieveMalwareDetails", "parameters": {"properties": {"sample_id": {"description": "The unique identifier of the malware sample", "type": "string"}}, "required": ["sample_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Submit a new malware sample to the database for analysis and include it in the MalwareBazaar collection.", "name": "submitMalwareSample", "parameters": {"properties": {"delivery_method": {"description": "The delivery method of the malware, default is 'email'", "type": "string"}, "file": {"description": "The Base64 encoding of the malware sample file", "type": "string"}, "tags": {"description": "An array of tags related to the malware sample, default is empty", "items": {"description": "Tags related to the malware", "type": "string"}, "type": "array"}}, "required": ["file"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of chat rooms that the user has access to.", "name": "getChatRooms", "parameters": {"properties": {"limit": {"description": "The maximum number of chat rooms to return. The default value is 30.", "type": "integer"}, "user_id": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve messages from a specified chat room.", "name": "getMessages", "parameters": {"properties": {"before_id": {"description": "Message ID for pagination, with the default value being the latest message.", "type": "string"}, "limit": {"description": "The maximum number of messages to return, with the default value being 50.", "type": "integer"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a message to the chat room.", "name": "sendMessage", "parameters": {"properties": {"format": {"description": "The format of the message, for example: 'text','md'. The default value is 'text'.", "enum": ["text", "md"], "type": "string"}, "message": {"description": "The content of the message to be sent.", "type": "string"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}}, "required": ["room_id", "message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the user's activity information in the specified chat room.", "name": "getUserActivity", "parameters": {"properties": {"include_read": {"description": "Whether to include information about read messages. The default value is true.", "type": "boolean"}, "room_id": {"description": "The unique identifier of the chat room.", "type": "string"}, "user_id": {"description": "The unique identifier of the user. Multiple users are concatenated with a comma.", "type": "string"}}, "required": ["room_id", "user_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of chat rooms that the user has access to.", "name": "getChatRooms", "parameters": {"properties": {"limit": {"description": "The maximum number of chat rooms to return. The default value is 30.", "type": "integer"}, "user_id": {"description": "The unique identifier of the user, which must start with the letter U.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve messages from a specified chat room.", "name": "getMessages", "parameters": {"properties": {"before_id": {"description": "Message ID for pagination. The default value is the latest message.", "type": "string"}, "limit": {"description": "The maximum number of messages to return, sorted by the latest messages. The default value is 50.", "type": "integer"}, "room_id": {"description": "The unique identifier of the chat room, which must start with the letter R.", "type": "string"}}, "required": ["room_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a message to the chat room.", "name": "sendMessage", "parameters": {"properties": {"format": {"description": "The format of the message, for example: 'text','md'. The default value is 'text'.", "enum": ["text", "md"], "type": "string"}, "message": {"description": "The content of the message to be sent.", "type": "string"}, "room_id": {"description": "The unique identifier of the chat room, which must start with the letter R.", "type": "string"}}, "required": ["room_id", "message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the user's activity information in the specified chat room.", "name": "getUserActivity", "parameters": {"properties": {"include_read": {"description": "Whether to include information about read messages. The default value is false.", "type": "boolean"}, "room_id": {"description": "The unique identifier of the chat room, which must start with the letter R.", "type": "string"}, "user_id": {"description": "The unique identifier of the user, which must start with the letter U.", "type": "string"}}, "required": ["room_id", "user_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the latest station information in Chicago, including location, wheelchair access, and operating hours.", "name": "getStationInformation", "parameters": {"properties": {"include_facilities": {"description": "Whether to include station facility information, such as wheelchair access. The default value is false.", "type": "boolean"}, "station": {"description": "The name or code of the station, in English.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time train schedule and delay information in Chicago.", "name": "getRealTimeTrainSchedule", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "station": {"description": "The name or code of the railway station, in English.", "type": "string"}, "time": {"description": "The time of the query, defaulting to the current time. The format is 'HH:MM'.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Check the availability and occupancy level of Chicago trains.", "name": "checkTrainAvailability", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "train_number": {"description": "The number of the train.", "type": "integer"}}, "required": ["train_number"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the platform numbers of trains arriving at and departing from Chicago platforms.", "name": "getPlatformNumbers", "parameters": {"properties": {"direction": {"description": "The direction of the train, such as 'arrivals' or 'departures', default is 'arrivals'.", "enum": ["arrivals", "departures"], "type": "string"}, "station": {"description": "The name or code of the railway station, in English.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about Chicago stations, such as amenities, accessibility, and schedules.", "name": "RetrieveDutchStationInfo", "parameters": {"properties": {"include_accessibility": {"description": "Whether to include information about station accessibility, default is false.", "type": "boolean"}, "include_facilities": {"description": "Whether to include information about station facilities, default is false.", "type": "boolean"}, "station": {"description": "The name or code of the railway station, in English.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Real-time identification of the associated country, organization name, and contact information based on the IP address.", "name": "getCountryByIP", "parameters": {"properties": {"include_organization": {"description": "Whether to include organization name information. The default value is false.", "type": "boolean"}, "ip_address": {"description": "The IP address to be queried, in the format of IPv4 or IPv6.", "type": "string"}}, "required": ["ip_address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Enhance your application with additional data points such as AS numbers and operating system information.", "name": "enhanceIPData", "parameters": {"properties": {"include_asn": {"description": "Whether to include the Autonomous System Number (AS number). The default value is false.", "type": "boolean"}, "include_os_info": {"description": "Whether to include operating system information. The default value is false.", "type": "boolean"}, "ip_address": {"description": "The IP address to query, in IPv4 or IPv6 format.", "type": "string"}}, "required": ["ip_address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Achieve seamless integration with any application or service through sound API documentation.", "name": "integrateWithService", "parameters": {"properties": {"api_key": {"description": "API key for service authentication.", "type": "string"}, "service_name": {"description": "The name of the service to be integrated.", "type": "string"}, "test_mode": {"description": "Whether to run in test mode, the default value is true.", "type": "boolean"}}, "required": ["service_name", "api_key"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the flag of the country where the user is located, including multiple flag styles.", "name": "getCountryFlag", "parameters": {"properties": {"countryCode": {"description": "Country code, for example, 'US' represents the United States.", "type": "string"}, "style": {"description": "Flag style. Optional values include 'flat' and '3d', and the default is 'flat'.", "enum": ["flat", "3d"], "type": "string"}}, "required": ["countryCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Easily identify the language and currency of the country where the user is located.", "name": "getCountryLanguageAndCurrency", "parameters": {"properties": {"countryName": {"description": "The name of the country. For example, 'China' represents China.", "type": "string"}}, "required": ["countryName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about the country where the user is located, including country name, code, flag, language, and currency.", "name": "getCountryDetails", "parameters": {"properties": {"includeCurrency": {"description": "Whether to include currency information, default is false.", "type": "boolean"}, "includeFlag": {"description": "Whether to include flag information, default is false.", "type": "boolean"}, "includeLanguage": {"description": "Whether to include language information, default is false.", "type": "boolean"}, "ip": {"description": "The user's IP address, the format must conform to IPv4 or IPv6 standards.", "type": "string"}}, "required": ["ip"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the detailed information of a specific song on the Gaana platform.", "name": "getSongDetails", "parameters": {"properties": {"songId": {"description": "The unique identifier of the song, in the format of a combination of English letters and numbers.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for songs on the Gaana platform based on keywords, movie names, artist names, or album names.", "name": "searchSongs", "parameters": {"properties": {"filter": {"description": "The type of search filter, which can be 'artist', 'album', 'track', and the default value is 'all'.", "enum": ["artist", "album", "track", "all"], "type": "string"}, "limit": {"description": "The number of search results displayed per page, and the default value is 10.", "type": "integer"}, "page": {"description": "The page number of the search results, and the default value is 1.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the MP3 file link of the song searched on the Gaana platform.", "name": "getSongMP3", "parameters": {"properties": {"quality": {"description": "The requested audio quality level, which can be 'low','medium', or 'high'. The default value is 'high'.", "enum": ["low", "medium", "high"], "type": "string"}, "songId": {"description": "The unique identifier of the song, in the format of a combination of English letters and numbers.", "type": "string"}}, "required": ["songId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get historical and real-time market data for a specified cryptocurrency.", "name": "getMarketData", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which market data is to be retrieved, such as BTC, ETH, etc.", "type": "string"}, "interval": {"description": "The time interval of the data, in minutes. The default value is 5.", "type": "integer"}, "since": {"description": "The timestamp to start retrieving data from, in Unix timestamp format. The default is the current time.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the balance information of the Kraken account.", "name": "getAccountBalance", "parameters": {"properties": {"asset": {"description": "Asset code, such as 'BTC'. By default, the balances of all assets are returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trading history of the Kraken account.", "name": "getTradeHistory", "parameters": {"properties": {"end": {"description": "End time, in the format of Unix timestamp, default is the current time.", "type": "string"}, "ofs": {"description": "Result offset, default is 0.", "type": "integer"}, "start": {"description": "Start time, in the format of Unix timestamp, default is the account creation time.", "type": "string"}, "type": {"description": "The type of trade, 'all', 'any position', 'closed position', 'closing position', 'no position', default is 'all'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Kraken API keys.", "name": "manageAPIKeys", "parameters": {"properties": {"action": {"description": "The type of operation, 'create', 'update', 'delete'.", "type": "string"}, "key": {"description": "The API key, required only when updating or deleting.", "type": "string"}, "permissions": {"description": "List of API key permissions, such as ['query funds','manage trades']. Defaults to empty, meaning no permissions.", "items": {"type": "string"}, "type": "array"}}, "required": ["action"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve data on all monsters in the game, including their elemental weaknesses, dropped items, and attack patterns.", "name": "getMonsters", "parameters": {"properties": {"element": {"description": "Filter monsters with specific elemental weaknesses. The default value is 'all'.", "type": "string"}, "rank": {"description": "Filter monsters of a specific rank, such as 'low', 'high' or 'G'. The default value is 'all'.", "enum": ["low", "high", "G", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about specific weapons and armor sets, including their attributes and upgrade trees.", "name": "getWeaponDetails", "parameters": {"properties": {"includeTree": {"description": "Whether to include the upgrade tree information of the weapon. The default value is true.", "type": "boolean"}, "weaponId": {"description": "The unique identification ID of the weapon, in the format of a string of numbers.", "type": "integer"}}, "required": ["weaponId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access quest information, including their objectives and rewards.", "name": "getQuests", "parameters": {"properties": {"difficulty": {"description": "Filter quests of a specific difficulty level, ranging from 1 to 10. The default value of 0 represents all difficulties.", "type": "integer"}, "query": {"description": "Search for quests based on keywords", "type": "string"}, "questType": {"description": "Filter quests of a specific type, such as'main quest' or'side quest'. The default value is 'all'.", "enum": ["main quest", "side quest", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Convert eastings and northings of the British National Grid to WGS84 latitude and longitude.", "name": "convertToWGS84", "parameters": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}, "output_format": {"description": "The output format. The available values are 'json' or 'xml', and the default is 'json'.", "enum": ["json", "xml"], "type": "string"}}, "required": ["eastings", "northings"], "type": "object"}}, "type": "function"}, {"function": {"description": "Reverse geocode WGS84 latitude and longitude to eastings and northings in the Ordnance Survey National Grid (OSGB36) of the UK.", "name": "reverseGeocodeToOSGB36", "parameters": {"properties": {"include_altitude": {"description": "Whether to include altitude information. The default value is false.", "type": "boolean"}, "latitude": {"description": "The WGS84 latitude value, which must be a floating-point number.", "type": "float"}, "longitude": {"description": "The WGS84 longitude value, which must be a floating-point number.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Batch convert the eastings and northings of multiple British National Grid coordinates to WGS84 latitudes and longitudes.", "name": "batchConvertToWGS84", "parameters": {"properties": {"coordinates": {"description": "An array containing eastings and northings coordinates.", "items": {"properties": {"eastings": {"description": "The easting coordinate value, which must be an integer.", "type": "integer"}, "northings": {"description": "The northing coordinate value, which must be an integer.", "type": "integer"}}, "type": "object"}, "type": "array"}}, "required": ["coordinates"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get important weather information.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning to be retrieved, such as 'SIGMET' or 'AIRMET'. The default value is all types.", "type": "string"}, "region": {"description": "The region code for which weather information is to be retrieved.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create a shortened URL.", "name": "createShortUrl", "parameters": {"properties": {"customAlias": {"description": "The user-defined alias for the short link, default is empty.", "type": "string"}, "domain": {"description": "The domain selected by the user for generating the short link, default is'shrtco.de'.", "type": "string"}, "longUrl": {"description": "The long URL that needs to be shortened.", "type": "string"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve previously shortened URL data.", "name": "retrieveShortUrlData", "parameters": {"properties": {"shortUrl": {"description": "The short URL for which data needs to be retrieved.", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all the shortened URLs of the user.", "name": "listShortUrls", "parameters": {"properties": {"apiKey": {"description": "The user's API key, used for identity verification.", "type": "string"}, "limit": {"description": "The number of results displayed per page, default is 50.", "type": "integer"}, "page": {"description": "Pagination parameter, specifying the page number of the returned results, default is 1.", "type": "integer"}}, "required": ["apiKey"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the original URL based on the shortened URL.", "name": "getOriginalUrl", "parameters": {"properties": {"shortUrl": {"description": "The shortened URL.", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the expiration time of the URL.", "name": "updateUrlExpiry", "parameters": {"properties": {"newExpireDate": {"description": "The new expiration time, in the format of YYYY-MM-DD.", "type": "string"}, "shortUrl": {"description": "The shortened URL.", "type": "string"}}, "required": ["shortUrl", "newExpireDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete a shortened URL.", "name": "deleteShortUrl", "parameters": {"properties": {"shortUrl": {"description": "The shortened URL to be deleted.", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a shortened URL.", "name": "generateShortUrl", "parameters": {"properties": {"customAlias": {"description": "Custom URL alias, default is empty.", "type": "string"}, "expireDate": {"description": "Expiration date of the URL, in the format of YYYY-MM-DD, default is never expired.", "type": "string"}, "url": {"description": "The original URL that needs to be shortened.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "User authentication, used for managing modules and accessing the platform.", "name": "authenticateUser", "parameters": {"properties": {"password": {"description": "The user's password", "type": "string"}, "username": {"description": "The user's username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new module.", "name": "createMod", "parameters": {"properties": {"mod_id": {"description": "The unique identifier of the module, a combination of English letters, numbers, and special symbols.", "type": "string"}, "name": {"description": "The name of the module", "type": "string"}, "status": {"description": "The status of the module, the default value is 'active'", "enum": ["active", "inactive", "deleted"], "type": "string"}, "version": {"description": "The version of the module, the default value is '1.0'", "type": "string"}}, "required": ["game_id", "name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a list of mods according to filtering conditions.", "name": "getMods", "parameters": {"properties": {"limit": {"description": "The limit on the number of mods to return, default is 10", "type": "integer"}, "mod_id": {"description": "The unique identifier of the mod, a combination of English letters, numbers, and special symbols.", "type": "string"}, "sort": {"description": "The sorting method, default is 'created'", "enum": ["created", "updated", "popular"], "type": "string"}, "tags": {"description": "An array of tags used to filter mods, default is empty", "items": {"description": "The tag of the mod", "type": "string"}, "type": "array"}}, "required": ["game_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the information of the specified module.", "name": "updateMod", "parameters": {"properties": {"mod_id": {"description": "The unique identifier of the module, a combination of English letters, numbers, and special symbols.", "type": "string"}, "name": {"description": "The new name of the module", "type": "string"}, "status": {"description": "The new status of the module", "enum": ["active", "inactive", "deleted"], "type": "string"}, "version": {"description": "The new version of the module", "type": "string"}}, "required": ["mod_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete the specified mod.", "name": "deleteMod", "parameters": {"properties": {"mod_id": {"description": "The unique identifier of the mod, a combination of English letters, numbers, and special symbols.", "type": "string"}}, "required": ["mod_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Report a mod to maintain a safe and fair mod ecosystem.", "name": "reportMod", "parameters": {"properties": {"details": {"description": "Detailed information of the report, default is empty", "type": "string"}, "mod_id": {"description": "The unique identifier of the mod, a combination of English letters, numbers, and special symbols.", "type": "string"}, "reason": {"description": "The reason for the report", "type": "string"}}, "required": ["mod_id", "reason"], "type": "object"}}, "type": "function"}, {"function": {"description": "Allows developers to authenticate their SoundCloud users, control SoundCloud playback, and access SoundCloud's data analytics.", "name": "authenticateSoundCloudUser", "parameters": {"properties": {"client_id": {"description": "The developer's client ID", "type": "string"}, "client_secret": {"description": "The developer's client secret", "type": "string"}, "redirect_uri": {"description": "The callback URL after successful authentication", "type": "string"}, "scope": {"description": "The requested scope of permissions, with the default value '*'", "type": "string"}, "state": {"description": "Used to maintain the state of the request and callback, and will be returned as-is in the callback. The default value is 'null'", "type": "string"}}, "required": ["client_id", "client_secret", "redirect_uri"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve traffic alerts issued by the Arizona Department of Transportation (ADOT) that may affect driving conditions.", "name": "getTrafficAlerts", "parameters": {"properties": {"region": {"description": "The name of the region for which traffic alerts need to be retrieved.", "type": "string"}, "severity": {"description": "The severity level of the alerts. The available values include 'low','medium', 'high'. The default value is'medium'.", "enum": ["low", "medium", "high"], "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time information about road conditions in Arizona, including accidents, construction, and traffic flow.", "name": "getRoadConditions", "parameters": {"properties": {"includeIncidents": {"description": "Whether to include accident information. The default value is false.", "type": "boolean"}, "roadName": {"description": "The name of the road.", "type": "string"}}, "required": ["roadName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a route considering the current traffic conditions in Arizona.", "name": "planRoute", "parameters": {"properties": {"avoidAreas": {"description": "List of areas to avoid, default is empty.", "items": {"properties": {"latitude": {"description": "Latitude of the center point of the area.", "type": "float"}, "longitude": {"description": "Longitude of the center point of the area.", "type": "float"}, "radius": {"description": "Radius of the area to avoid (in meters).", "type": "integer"}}, "type": "object"}, "type": "array"}, "endPoint": {"description": "Information about the end point location.", "properties": {"latitude": {"description": "Latitude of the end point.", "type": "float"}, "longitude": {"description": "Longitude of the end point.", "type": "float"}}, "type": "object"}, "startPoint": {"description": "Information about the start point location.", "properties": {"latitude": {"description": "Latitude of the start point.", "type": "float"}, "longitude": {"description": "Longitude of the start point.", "type": "float"}}, "type": "object"}}, "required": ["startPoint", "endPoint"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the real-time images of Arizona's statewide traffic cameras.", "name": "getCameraImages", "parameters": {"properties": {"cameraId": {"description": "Camera ID.", "type": "integer"}, "imageSize": {"description": "Image size. The available values are'small','medium', 'large'. The default value is'medium'.", "enum": ["small", "medium", "large"], "type": "string"}}, "required": ["cameraId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time market data stream of all cryptocurrencies supported by Huobi.", "name": "getMarketData", "parameters": {"properties": {"depth": {"description": "The number of levels of market depth data, with a default value of 5.", "enum": [5, 10, 20], "type": "integer"}, "symbols": {"description": "A list of cryptocurrency symbols for which data needs to be obtained.", "items": {"type": "string"}, "type": "array"}}, "required": ["symbols"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Huobi buy and sell orders, including placing, modifying, and canceling orders.", "name": "manageOrder", "parameters": {"properties": {"action": {"description": "Order operation type, including 'create','modify', 'cancel'.", "enum": ["create", "modify", "cancel"], "type": "string"}, "order_id": {"description": "The order ID to be operated on. This parameter is not required when creating an order.", "type": "string"}, "price": {"description": "Order price. This parameter is not required for market orders.", "type": "float"}, "quantity": {"description": "Order quantity. This parameter is not required when modifying an order.", "type": "float"}, "symbol": {"description": "Trading pair symbol, such as 'BTC/USDT'.", "type": "string"}}, "required": ["action", "symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the balance, trading history and position information of the Huobi account.", "name": "getAccountInfo", "parameters": {"properties": {"account_id": {"description": "Huobi account ID.", "type": "string"}, "currency": {"description": "Specify the currency symbol, such as 'BTC'. By default, all currency information is retrieved.", "type": "string"}}, "required": ["account_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Huobi margin trading functions for advanced traders, allowing them to borrow funds and trade with leverage.", "name": "marginTrade", "parameters": {"properties": {"amount": {"description": "The trading quantity.", "type": "float"}, "direction": {"description": "The trading direction. 'buy' means buying and'sell' means selling.", "enum": ["buy", "sell"], "type": "string"}, "leverage": {"description": "The leverage multiple.", "type": "integer"}, "symbol": {"description": "The trading pair symbol, such as 'BTC/USDT'.", "type": "string"}}, "required": ["symbol", "amount", "leverage", "direction"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for products or deals in Indonesia on the Tokopedia platform and obtain product identifiers, names, prices, and review information.", "name": "searchProducts", "parameters": {"properties": {"category": {"description": "Product category. The default value is 'all'.", "type": "string"}, "page": {"description": "Page number of the results. The default value is 1.", "type": "integer"}, "query": {"description": "Keywords searched by the user.", "type": "string"}, "sort": {"description": "Sorting method. Optional values include 'price_asc', 'price_desc'. The default value is 'price_asc'.", "enum": ["price_asc", "price_desc"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve product details on the Indonesian Tokopedia platform, including price, availability, and rating.", "name": "getProductDetails", "parameters": {"properties": {"productId": {"description": "The unique identifier of the product.", "type": "integer"}}, "required": ["productId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get iTunes Store reviews, ratings, and user feedback.", "name": "getStoreReviews", "parameters": {"properties": {"page": {"description": "Review page number, default is 1", "type": "integer"}, "productId": {"description": "Product ID", "type": "integer"}, "sort": {"description": "Sorting method, default is'mostRecent'", "enum": ["mostRecent", "mostHelpful", "highestRating", "lowestRating"], "type": "string"}}, "required": ["productId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Allows developers to access the affiliate links of iTunes Store products, which can provide additional revenue opportunities.", "name": "getAffiliateLink", "parameters": {"properties": {"affiliateToken": {"description": "Affiliate token", "type": "string"}, "campaignToken": {"description": "Campaign token, default is empty", "type": "string"}, "productId": {"description": "Product ID", "type": "integer"}}, "required": ["productId", "affiliateToken"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for products in the iTunes Store using specific keywords, categories, or artist names.", "name": "iTunesProductSearch", "parameters": {"properties": {"artistName": {"description": "Artist name, default is empty", "type": "string"}, "category": {"description": "Product category, default is 'all'", "type": "string"}, "keyword": {"description": "Search keyword", "type": "string"}, "limit": {"description": "Maximum number of returned results, default is 50", "type": "integer"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get historical and real-time market data for a specified cryptocurrency.", "name": "getMarketData", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which market data is to be retrieved, such as BTC, ETH, etc.", "type": "string"}, "interval": {"description": "The time interval of the data, in minutes. The default value is 5.", "type": "integer"}, "since": {"description": "The timestamp to start retrieving data from, in Unix timestamp format. The default is the current time.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the balance information of the Kraken account.", "name": "getAccountBalance", "parameters": {"properties": {"asset": {"description": "Asset code, such as 'BTC'. By default, the balances of all assets are returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the trading history of the Kraken account.", "name": "getTradeHistory", "parameters": {"properties": {"end": {"description": "End time, in the format of Unix timestamp, default is the current time.", "type": "string"}, "ofs": {"description": "Result offset, default is 0.", "type": "integer"}, "start": {"description": "Start time, in the format of Unix timestamp, default is the account creation time.", "type": "string"}, "type": {"description": "The type of trade, 'all', 'any position', 'closed position', 'closing position', 'no position', default is 'all'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Kraken API keys.", "name": "manageAPIKeys", "parameters": {"properties": {"action": {"description": "The type of operation, 'create', 'update', 'delete'.", "type": "string"}, "key": {"description": "The API key, required only when updating or deleting.", "type": "string"}, "permissions": {"description": "List of API key permissions, such as ['query funds','manage trades']. Defaults to empty, meaning no permissions.", "items": {"type": "string"}, "type": "array"}}, "required": ["action"], "type": "object"}}, "type": "function"}, {"function": {"description": "Cancel an order on the cryptocurrency exchange.", "name": "cancelOrder", "parameters": {"properties": {"accountID": {"description": "User account ID.", "type": "string"}, "orderID": {"description": "The order ID to be cancelled.", "type": "string"}}, "required": ["accountID", "orderID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Withdraw funds from the account.", "name": "withdrawFunds", "parameters": {"properties": {"address": {"description": "The fund withdrawal address.", "type": "string"}, "amount": {"description": "The amount of the withdrawal.", "type": "float"}, "currency": {"description": "The currency type of the withdrawal, such as 'BTC'.", "type": "string"}, "customer_id": {"description": "The unique identifier of the customer.", "type": "string"}}, "required": ["customer_id", "currency", "amount", "address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get transaction history.", "name": "GetTransactionHistory", "parameters": {"properties": {"currencyPair": {"description": "Currency pair identifier, e.g., 'BTCZAR'. The default value is all currency pairs.", "type": "string"}, "customer_id": {"description": "Unique identifier of the customer.", "type": "string"}, "endTime": {"description": "End time, in the format of 'YYYY-MM-DD HH:MM:SS'. The default value is the current time.", "type": "string"}, "startTime": {"description": "Start time, in the format of 'YYYY-MM-DD HH:MM:SS'. The default value is 7 days before the current time.", "type": "string"}}, "required": ["customer_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time market data stream of all cryptocurrencies supported by Huobi.", "name": "getMarketData", "parameters": {"properties": {"depth": {"description": "The number of levels of market depth data, with a default value of 5.", "enum": [5, 10, 20], "type": "integer"}, "symbols": {"description": "A list of cryptocurrency symbols for which data needs to be obtained.", "items": {"type": "string"}, "type": "array"}}, "required": ["symbols"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Huobi buy and sell orders, including placing, modifying, and canceling orders.", "name": "manageOrder", "parameters": {"properties": {"action": {"description": "Order operation type, including 'create','modify', 'cancel'.", "enum": ["create", "modify", "cancel"], "type": "string"}, "order_id": {"description": "The order ID to be operated on. This parameter is not required when creating an order.", "type": "string"}, "price": {"description": "Order price. This parameter is not required for market orders.", "type": "float"}, "quantity": {"description": "Order quantity. This parameter is not required when modifying an order.", "type": "float"}, "symbol": {"description": "Trading pair symbol, such as 'BTC/USDT'.", "type": "string"}}, "required": ["action", "symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the balance, trading history and position information of the Huobi account.", "name": "getAccountInfo", "parameters": {"properties": {"account_id": {"description": "Huobi account ID.", "type": "string"}, "currency": {"description": "Specify the currency symbol, such as 'BTC'. By default, all currency information is retrieved.", "type": "string"}}, "required": ["account_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Huobi margin trading functions for advanced traders, allowing them to borrow funds and trade with leverage.", "name": "marginTrade", "parameters": {"properties": {"amount": {"description": "The trading quantity.", "type": "float"}, "direction": {"description": "The trading direction. 'buy' means buying and'sell' means selling.", "enum": ["buy", "sell"], "type": "string"}, "leverage": {"description": "The leverage multiple.", "type": "integer"}, "symbol": {"description": "The trading pair symbol, such as 'BTC/USDT'.", "type": "string"}}, "required": ["symbol", "amount", "leverage", "direction"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve product details on the Indonesian Tokopedia platform, including price, availability, and rating.", "name": "getProductDetails", "parameters": {"properties": {"productId": {"description": "The unique identifier of the product.", "type": "integer"}}, "required": ["productId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for global food products based on keywords such as product name, brand, or barcode.", "name": "searchProduct", "parameters": {"properties": {"page": {"description": "The page number of the results to retrieve. The default value is 1.", "type": "integer"}, "pageSize": {"description": "The number of results to display per page. The default value is 20.", "type": "integer"}, "query": {"description": "The keyword for the search query, which can be the product name, brand, or barcode.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Compare the nutritional values of different food products to help users make informed choices.", "name": "compareProducts", "parameters": {"properties": {"productIds": {"description": "An array of food product IDs to compare.", "items": {"description": "The ID of a food product.", "type": "string"}, "type": "array"}}, "required": ["productIds"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new food product to the database, making it part of an ever-expanding global food-related information resource.", "name": "addProduct", "parameters": {"properties": {"allergens": {"description": "Allergens that the food product may contain. The default value is an empty array.", "items": {"description": "The name of the allergen.", "type": "string"}, "type": "array"}, "brand": {"description": "The brand of the food product. The default value is empty.", "type": "string"}, "ingredients": {"description": "The ingredient list of the food product.", "items": {"description": "The name of the ingredient.", "type": "string"}, "type": "array"}, "nutritionFacts": {"description": "Information about the nutritional value of the food product.", "properties": {"calories": {"description": "The calorie content per serving.", "type": "float"}, "fat": {"description": "The fat content per serving.", "type": "float"}, "protein": {"description": "The protein content per serving.", "type": "float"}, "sugar": {"description": "The sugar content per serving.", "type": "float"}}, "type": "object"}, "productName": {"description": "The name of the food product.", "type": "string"}}, "required": ["productName", "ingredients", "nutritionFacts"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific food product, including its ingredients, nutritional value, and allergens.", "name": "RetrieveFoodProductDetails", "parameters": {"properties": {"barcode": {"description": "The barcode of the food product.", "type": "string"}}, "required": ["barcode"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Verify the validity of the specified phone number and return relevant information.", "name": "verifyPhoneNumber", "parameters": {"properties": {"country_code": {"description": "The country code of the phone number. The default value is ''.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'json' and 'xml'. The default value is 'json'.", "enum": ["json", "xml"], "type": "string"}, "phone_number": {"description": "The phone number to be verified, in the format of an international phone number.", "type": "string"}}, "required": ["phone_number"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about a phone number, including the carrier and regional attribution.", "name": "getNumberInformation", "parameters": {"properties": {"include_carrier": {"description": "Whether to include carrier information. The default value is false.", "type": "boolean"}, "include_location": {"description": "Whether to include regional attribution information. The default value is false.", "type": "boolean"}, "phone_number": {"description": "The phone number for which information needs to be obtained, in the format of an international phone number.", "type": "string"}}, "required": ["phone_number"], "type": "object"}}, "type": "function"}, {"function": {"description": "Check whether the phone number is a fixed line or mobile communication.", "name": "checkPhoneLineType", "parameters": {"properties": {"phone_number": {"description": "The phone number to be checked, in the format of international phone number.", "type": "string"}}, "required": ["phone_number"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search global news by specific source.", "name": "filterArticlesBySource", "parameters": {"properties": {"fromDate": {"description": "Start date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "sortBy": {"description": "Sorting method. The default value is 'publishedAt'.", "enum": ["relevancy", "popularity", "publishedAt"], "type": "string"}, "source": {"description": "The name of the news source.", "type": "string"}, "toDate": {"description": "End date, in the format of 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}}, "required": ["source"], "type": "object"}}, "type": "function"}, {"function": {"description": "Filter global news articles by category and specify the language if needed. Return the URL and a content overview.", "name": "filterNewsByCategory", "parameters": {"properties": {"category": {"description": "The category of the news article, such as 'business', 'technology', etc.", "type": "string"}, "language": {"description": "The language code of the news article. For example, 'en' represents English. The default value is 'en'.", "type": "string"}}, "required": ["category"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access relevant metadata such as the author, publication date, and article URL.", "name": "getArticleMetadata", "parameters": {"properties": {"url": {"description": "The URL address of the article.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve global headline news or articles published within a specific time period.", "name": "getHeadlinesByDate", "parameters": {"properties": {"endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "language": {"description": "Language code of the news article, e.g., 'en' for English. The default value is 'en'.", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve global trending news and generate a news feed.", "name": "retrieveTrendingNews", "parameters": {"properties": {"country": {"description": "The country code of the news source. For example, 'US' represents the United States. The default value is 'US'.", "type": "string"}, "language": {"description": "The language code of the news article. For example, 'en' represents English. The default value is 'en'.", "type": "string"}, "topics": {"description": "A list of news topics of interest. The default is an empty list.", "items": {"description": "A news topic of interest.", "type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for news articles globally based on the provided keywords.", "name": "searchArticles", "parameters": {"properties": {"keywords": {"description": "The news keywords that the user wants to search for.", "type": "string"}, "language": {"description": "The language code of the news articles. For example, 'en' represents English. The default value is 'en'.", "type": "string"}, "limit": {"description": "The maximum number of news articles to return. The default value is 10.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for current news articles globally based on keywords or category.", "name": "searchArticlesByCountry", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'all'.", "enum": ["business", "entertainment", "general", "health", "science", "sports", "technology", "all"], "type": "string"}, "country": {"description": "The country where the article is from. The default value is 'us'.", "enum": ["us", "cn", "ru", "de", "fr", "es", "it", "pt", "se", "all"], "type": "string"}, "keywords": {"description": "Keywords that the user wants to search for.", "type": "string"}, "language": {"description": "The language of the article. The default value is 'en'.", "enum": ["en", "es", "fr", "zh", "ar", "de", "it", "pt", "ru", "sv"], "type": "string"}, "page": {"description": "The page number of the results. The default value is 1.", "type": "integer"}, "pageSize": {"description": "The number of articles displayed per page. The default value is 20.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Simulate a GET request and return the parameters and values contained in the request.", "name": "echoGet", "parameters": {"properties": {"data": {"description": "Data to be echoed", "type": "string"}, "timestamp": {"description": "Timestamp of the request. The default value is the current timestamp", "type": "integer"}}, "required": ["data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate a POST request and return the content contained in the request body.", "name": "echoPost", "parameters": {"properties": {"content": {"description": "The content object to be echoed", "properties": {"number": {"description": "Numeric content, default value is 0", "type": "integer"}, "text": {"description": "Text content", "type": "string"}}, "type": "object"}, "headers": {"description": "Custom request headers, default is empty", "properties": {"Content-Type": {"description": "Content type", "type": "string"}}, "type": "object"}}, "required": ["content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns the HTTP headers used when sending the request.", "name": "echoHeaders", "parameters": {"properties": {"verbose": {"description": "Whether to return detailed header information, default is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Returns a simulated HTTP status code.", "name": "echoStatus", "parameters": {"properties": {"statusCode": {"description": "The HTTP status code to be returned", "type": "integer"}}, "required": ["statusCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Simulate and verify HTTP authentication information and return the authentication result.", "name": "echoAuth", "parameters": {"properties": {"password": {"description": "Password", "type": "string"}, "username": {"description": "Username", "type": "string"}}, "required": ["username", "password"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time Air Quality Index (AQI) data of the specified city.", "name": "getRealtimeCityAQI", "parameters": {"properties": {"city": {"description": "The name of the city, for example, 'Beijing'.", "type": "string"}, "format": {"description": "The format of the returned data, supporting 'XML', 'CSV', 'JSON', and the default is 'JSON'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical air quality index (AQI) data for a specified city.", "name": "getHistoricalCityAQI", "parameters": {"properties": {"city": {"description": "The name of the city, for example, 'Shanghai'.", "type": "string"}, "endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "format": {"description": "The format of the returned data, supports 'XML', 'CSV', 'JSON', default is 'JSON'.", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["city", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the air quality forecast for the next few days in the specified city.", "name": "getCityAQIForecast", "parameters": {"properties": {"city": {"description": "The name of the city, for example 'Guangzhou'.", "type": "string"}, "days": {"description": "The number of days for the forecast, default is 3 days.", "type": "integer"}, "format": {"description": "The format of the returned data, supports 'XML', 'CSV', 'JSON', default is 'JSON'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time position information of Los Angeles subway vehicles.", "name": "getVehiclePosition", "parameters": {"properties": {"includeDirection": {"description": "Whether to include the driving direction of the vehicle, the default value is false.", "type": "boolean"}, "vehicleId": {"description": "The unique identifier of the vehicle.", "type": "string"}}, "required": ["vehicleId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide route information for the Los Angeles Metro, including route maps, schedules, and stop stations.", "name": "getRouteInformation", "parameters": {"properties": {"date": {"description": "The date of the query. The default value is the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "routeId": {"description": "The unique identifier of the subway route.", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of bus stations in Los Angeles.", "name": "getTransitStations", "parameters": {"properties": {"limit": {"description": "The limit on the number of stations to be returned. The default value is 10.", "type": "integer"}, "stationName": {"description": "The name of the station. The default value is empty, indicating that all stations will be retrieved.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the timetable of buses in Los Angeles.", "name": "getBusTimetable", "parameters": {"properties": {"busLineId": {"description": "The unique identifier of the bus line.", "type": "string"}, "dayType": {"description": "The type of the date to query. The default value is 'weekday'. The available values are 'weekday','saturday' or'sunday'.", "type": "string"}, "direction": {"description": "The direction of the bus. The default value is 'outbound'. The available values are 'outbound' or 'inbound'.", "type": "string"}}, "required": ["busLineId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get open datasets related to the economy and finance of Cyprus.", "name": "getEconomicData", "parameters": {"properties": {"category": {"description": "Data category, default is 'all'.", "enum": ["all", "economic", "financial"], "type": "string"}, "format": {"description": "Data format, default is 'json'.", "enum": ["json", "csv", "xml"], "type": "string"}, "year": {"description": "The year for which data needs to be retrieved.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific open datasets of the Cypriot government.", "name": "searchDatasets", "parameters": {"properties": {"keywords": {"description": "Search keywords.", "type": "string"}, "limit": {"description": "The number of results displayed per page, default is 10.", "type": "integer"}, "page": {"description": "The page number of the results, default is 1.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Download the specified open dataset of the Cypriot government.", "name": "downloadDataset", "parameters": {"properties": {"datasetId": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The format of the downloaded data.", "enum": ["csv", "json", "xml"], "type": "string"}}, "required": ["datasetId", "format"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time and historical data of specified stocks.", "name": "getStockData", "parameters": {"properties": {"datatype": {"description": "The format of the output data. Optional values are 'json' and 'csv'. The default is 'json'.", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min. The default is 1min.", "type": "string"}, "outputsize": {"description": "The size of the output data. Optional values are 'compact' (only return the last 100 data points) and 'full' (return all data points). The default is 'compact'.", "type": "string"}, "symbol": {"description": "The unique code identifier of the stock.", "type": "string"}}, "required": ["symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time rating information of cryptocurrencies.", "name": "getCryptoRating", "parameters": {"properties": {"symbol": {"description": "The unique code identifier of the cryptocurrency.", "type": "string"}}, "required": ["symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve foreign exchange data for a specified currency pair.", "name": "getForexData", "parameters": {"properties": {"from_currency": {"description": "Source currency code.", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min, default is 1min.", "type": "string"}, "outputsize": {"description": "The size of the output data. Optional values are 'compact' (only return the last 100 data points) and 'full' (return all data points), default is 'compact'.", "type": "string"}, "to_currency": {"description": "Target currency code.", "type": "string"}}, "required": ["from_currency", "to_currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Analyze stock data based on the provided technical indicators.", "name": "getTechnicalIndicators", "parameters": {"properties": {"indicator": {"description": "The name of the technical indicator, such as 'SMA' (Simple Moving Average).", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min.", "type": "string"}, "series_type": {"description": "The required price type,可选 'close', 'open', 'high', 'low', default is 'close'.", "type": "string"}, "symbol": {"description": "The unique code identifier of the stock.", "type": "string"}, "time_period": {"description": "The time period used when calculating the technical indicator, default is 20.", "type": "integer"}}, "required": ["symbol", "interval", "indicator"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time price data of the specified cryptocurrency.", "name": "getRealTimePrice", "parameters": {"properties": {"currency": {"description": "The abbreviation of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the historical price data of the specified cryptocurrency.", "name": "getHistoricalPrice", "parameters": {"properties": {"currency": {"description": "The short name of the cryptocurrency, such as BTC, BCH, LTC, ETH.", "type": "string"}, "date": {"description": "The query date, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["currency", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve platform information, mainly including the handling fees of supported currencies.", "name": "getPlatformInfo", "parameters": {"properties": {"currency": {"description": "The name of the currency to view.", "items": {"type": "string"}, "type": "array"}, "platform": {"description": "The name of the platform.", "type": "string"}}, "required": ["platform", "currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve account information, including balance and transaction history.", "name": "getAccountInfo", "parameters": {"properties": {"accountId": {"description": "The unique identifier of the account.", "type": "string"}}, "required": ["accountId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new order on the Coinbase platform.", "name": "createOrder", "parameters": {"properties": {"amount": {"description": "The quantity of the cryptocurrency to buy or sell.", "type": "float"}, "currency": {"description": "The abbreviation of the cryptocurrency in the order.", "type": "string"}, "price": {"description": "The price per unit of the cryptocurrency, defaulting to the current market price.", "type": "float"}, "type": {"description": "The type of the order, such as 'buy' or'sell'.", "type": "string"}}, "required": ["currency", "amount", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Delete the specified order on the Coinbase platform.", "name": "deleteOrder", "parameters": {"properties": {"orderId": {"description": "The unique identifier of the order to be deleted.", "type": "string"}}, "required": ["orderId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Receive notifications about specified events, such as payment completion or account verification.", "name": "getNotifications", "parameters": {"properties": {"email": {"description": "Email address to receive notifications. Defaults to the email address bound to the account.", "type": "string"}, "type": {"description": "Notification type, such as 'payment_received' or 'account_verified'.", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current price of the cryptocurrency.", "name": "getCurrentPrice", "parameters": {"properties": {"currencyPair": {"description": "The cryptocurrency pair for which the price needs to be queried, e.g., 'BTC/USD'.", "type": "string"}, "exchange": {"description": "The name of the cryptocurrency exchange, default is 'CCCAGG'.", "type": "string"}}, "required": ["currencyPair"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the social and community data of cryptocurrencies.", "name": "getSocialData", "parameters": {"properties": {"aggregation": {"description": "The data aggregation method, default is 'hour'.", "enum": ["hour", "day"], "type": "string"}, "currency": {"description": "The symbol of the cryptocurrency for which social data needs to be queried.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get mining - related data for a specific cryptocurrency.", "name": "getMiningData", "parameters": {"properties": {"currency": {"description": "The symbol of the cryptocurrency for which mining data needs to be queried.", "type": "string"}, "dataPoints": {"description": "The number of data points to be returned, default is 30.", "type": "integer"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the market capitalization and 24-hour trading volume of various cryptocurrencies.", "name": "getMarketCapAndVolume", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code for which you need to retrieve the market capitalization and trading volume, such as BTC.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the biggest gainers and losers of various cryptocurrencies within a given period.", "name": "getTopMovers", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results, default is 10.", "type": "integer"}, "period": {"description": "The period to be retrieved, optional values are '24h', '7d', '30d', etc.", "type": "string"}}, "required": ["period"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the current price and market data of a specific cryptocurrency.", "name": "getCryptocurrencyCurrentPrice", "parameters": {"properties": {"currency": {"description": "The cryptocurrency code to be queried, such as BTC, ETH, etc.", "type": "string"}, "fiat": {"description": "Fiat currency code, with the default value of USD.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the status information of a specified document.", "name": "getDocumentStatus", "parameters": {"properties": {"documentPath": {"description": "The path of the document.", "type": "string"}}, "required": ["documentPath"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a reminder to the specified recipient.", "name": "sendReminder", "parameters": {"properties": {"message": {"description": "The content of the reminder message. The default value is 'Please review the document.'", "type": "string"}, "recipientEmail": {"description": "The email address of the recipient.", "type": "string"}}, "required": ["recipientEmail"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new document template.", "name": "createTemplate", "parameters": {"properties": {"sections": {"description": "The various sections included in the template.", "items": {"description": "The name of the template section.", "type": "string"}, "type": "array"}, "templateName": {"description": "The name of the template.", "type": "string"}}, "required": ["templateName", "sections"], "type": "object"}}, "type": "function"}, {"function": {"description": "Import data into the specified document.", "name": "importDocumentData", "parameters": {"properties": {"data": {"description": "The data to be imported, in the form of key-value pairs.", "properties": {"fieldName": {"description": "The field name in the document.", "type": "string"}, "value": {"description": "The value corresponding to the field.", "type": "string"}}, "type": "object"}, "documentPath": {"description": "The path of the document.", "type": "string"}}, "required": ["documentPath", "data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Apply custom branding to a specified document.", "name": "applyBranding", "parameters": {"properties": {"brandingId": {"description": "The unique identifier of the brand.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId", "brandingId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage the electronic signature workflow of the specified document.", "name": "manageSigningWorkflow", "parameters": {"properties": {"action": {"description": "The operation to be performed, such as'start','stop','restart'.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}, "signers": {"description": "The list of signers' email addresses, default is empty.", "items": {"description": "The email address of the signer.", "type": "string"}, "type": "array"}}, "required": ["documentId", "action"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current COVID-19 statistics, including information such as new cases and total cases.", "name": "getCurrentCovidStats", "parameters": {"properties": {"country": {"description": "The name of the country, used to specify the country to query.", "type": "string"}, "date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}}, "required": ["country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data of COVID-19, with information covering different geographical locations.", "name": "getCovidHistoryData", "parameters": {"properties": {"country": {"description": "The name of the country, used to specify the country to query.", "type": "string"}, "endDate": {"description": "End date, in the format of YYYY-MM-DD.", "type": "string"}, "startDate": {"description": "Start date, in the format of YYYY-MM-DD.", "type": "string"}}, "required": ["country", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide influenza virus data, including new cases, active cases, deaths, and vaccination status.", "name": "getInfluenzaData", "parameters": {"properties": {"ageGroup": {"description": "Age group, used to filter data for specific age ranges. By default, it includes all age groups.", "items": {"description": "The specific range of the age group.", "type": "string"}, "type": "array"}, "region": {"description": "The name of the region, used to specify the region to query.", "type": "string"}, "season": {"description": "Influenza season. If not specified, the default is the current season.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for items in Final Fantasy XIV by name, description, or category.", "name": "searchItems", "parameters": {"properties": {"category": {"description": "The item category, with the default value being 'all'", "type": "string"}, "limit": {"description": "The limit on the number of returned results, with the default value being 10", "type": "integer"}, "query": {"description": "The keyword for the search query", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve details of items in Final Fantasy XIV, including rarity, level, and attributes.", "name": "getItemDetails", "parameters": {"properties": {"itemId": {"description": "The unique identifier of the item", "type": "integer"}}, "required": ["itemId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the mount and minion data in Final Fantasy XIV, including acquisition methods and related achievements.", "name": "getMountsAndMinions", "parameters": {"properties": {"owned": {"description": "Whether to retrieve only the data that the user already owns. The default value is false", "type": "boolean"}, "type": {"description": "Data type, with optional values of'mounts' or'minions'", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Browse information about Final Fantasy XIV achievements and titles, including requirements and rewards.", "name": "getAchievementsInfo", "parameters": {"properties": {"achievementId": {"description": "The unique identifier of the achievement", "type": "integer"}}, "required": ["achievementId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Use biometric data for passwordless authentication, providing a secure and fast user login method.", "name": "biometricLogin", "parameters": {"properties": {"biometricData": {"description": "The user's biometric data for identity verification.", "type": "string"}, "deviceID": {"description": "The unique identifier of the user's device.", "type": "string"}}, "required": ["biometricData", "deviceID"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use email for passwordless authentication and send a one-time login link to the user's email address.", "name": "emailLogin", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "loginExpiration": {"description": "The expiration time (in minutes) of the login link. The default value is 10.", "type": "integer"}}, "required": ["email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide two-factor authentication services to enhance the security of accounts.", "name": "twoFactorAuthentication", "parameters": {"properties": {"method": {"description": "The method of two-factor authentication, such as: 'SMS', 'Email'.", "type": "string"}, "sendTo": {"description": "The target address to send the two-factor authentication code, which can be a mobile phone number or an email address.", "type": "string"}, "userID": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["userID", "method", "sendTo"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a user analysis report for tracking and analyzing user activities.", "name": "userActivityReport", "parameters": {"properties": {"appID": {"description": "The unique identifier of the application.", "type": "string"}, "dateRange": {"description": "The date range of the report, defaulting to the past 30 days.", "properties": {"endDate": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "metrics": {"description": "The list of required analysis metrics, including all metrics by default.", "items": {"enum": ["loginAttempts", "successfulLogins", "failedLogins"], "type": "string"}, "type": "array"}}, "required": ["appID"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get information about Clash Royale players, including game progress, statistics, and deck composition.", "name": "getPlayerInfo", "parameters": {"properties": {"includeStats": {"description": "Whether to include statistics, default is false", "type": "boolean"}, "playerTag": {"description": "The player's unique identifier", "type": "string"}}, "required": ["playerTag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed clan information in Clash Royale, such as member lists, war performance, etc.", "name": "getClanDetails", "parameters": {"properties": {"clanTag": {"description": "The unique identifier of the clan", "type": "string"}, "warLog": {"description": "Whether to retrieve the war log, default is true", "type": "boolean"}}, "required": ["clanTag"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the card information of 《Clash Royale》, including rarity, elixir cost, and statistics of each card.", "name": "getCardInfo", "parameters": {"properties": {"cardName": {"description": "The name of the card", "type": "string"}, "rarity": {"description": "The rarity of the card, in English, such as: Common, Rare, Epic, and Legendary", "type": "string"}}, "required": ["cardName", "rarity"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve traffic alerts issued by the Arizona Department of Transportation (ADOT) that may affect driving conditions.", "name": "getTrafficAlerts", "parameters": {"properties": {"region": {"description": "The name of the region for which traffic alerts need to be retrieved.", "type": "string"}, "severity": {"description": "The severity level of the alerts. The optional values include 'low','medium', 'high'.", "enum": ["low", "medium", "high"], "type": "string"}}, "required": ["region", "severity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time information about road conditions in Arizona, including accidents, construction, and traffic flow.", "name": "getRoadConditions", "parameters": {"properties": {"includeIncidents": {"description": "Whether to include accident information. The default value is true.", "type": "boolean"}, "roadName": {"description": "The name of the road.", "type": "string"}}, "required": ["roadName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a route considering the current traffic conditions in Arizona.", "name": "planRoute", "parameters": {"properties": {"avoidAreas": {"description": "List of areas to avoid, default is empty.", "items": {"properties": {"latitude": {"description": "Latitude of the center point of the area.", "type": "float"}, "longitude": {"description": "Longitude of the center point of the area.", "type": "float"}, "radius": {"description": "Radius of the area to avoid (in meters).", "type": "integer"}}, "type": "object"}, "type": "array"}, "endPoint": {"description": "Information about the end point location.", "properties": {"latitude": {"description": "Latitude of the end point.", "type": "float"}, "longitude": {"description": "Longitude of the end point.", "type": "float"}}, "type": "object"}, "startPoint": {"description": "Information about the start point location.", "properties": {"latitude": {"description": "Latitude of the start point.", "type": "float"}, "longitude": {"description": "Longitude of the start point.", "type": "float"}}, "type": "object"}}, "required": ["startPoint", "endPoint"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the real-time images of Arizona's statewide traffic cameras.", "name": "getCameraImages", "parameters": {"properties": {"cameraId": {"description": "Camera ID.", "type": "integer"}, "imageSize": {"description": "Image size. The available values are'small','medium', 'large'. The default value is'medium'.", "enum": ["small", "medium", "large"], "type": "string"}}, "required": ["cameraId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Brazilian company information, including name, address, and registration details.", "name": "retrieveCompanyInfo", "parameters": {"properties": {"cnpj": {"description": "The National Registry of Legal Entities number of the Brazilian company", "type": "string"}, "include_address": {"description": "Whether to include the company's address information. The default is true", "type": "boolean"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the tax information of Brazilian companies, such as legal status and tax payments.", "name": "getTaxInfo", "parameters": {"properties": {"cnpj": {"description": "The National Registry of Legal Entities number of the Brazilian company", "type": "string"}, "year": {"description": "The year of the query, defaulting to the current year", "type": "integer"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}, {"function": {"description": "View the shareholders and their ownership information of Brazilian companies.", "name": "checkShareholders", "parameters": {"properties": {"cnpj": {"description": "The national legal entity registration number of the Brazilian company", "type": "string"}, "shareholder_type": {"description": "Shareholder type, for example: 'individual' or 'company', default is 'all'", "type": "string"}}, "required": ["cnpj"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the latest flight information at Copenhagen Airport, such as departure and arrival times, gate numbers, and flight status.", "name": "getFlightInfo", "parameters": {"properties": {"date": {"description": "Query date, default is the current date", "type": "string"}, "flightNumber": {"description": "Flight number", "type": "string"}}, "required": ["flightNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the available shops, restaurants, and other services in each terminal of Copenhagen Airport, Denmark.", "name": "getAirportShops", "parameters": {"properties": {"category": {"description": "Shop category, such as 'Food & Beverage', 'Shopping', etc. Defaults to all categories", "type": "string"}, "terminal": {"description": "Terminal number", "type": "string"}}, "required": ["terminal"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the availability and prices of parking spaces at Copenhagen Airport, Denmark.", "name": "getParkingInfo", "parameters": {"properties": {"duration": {"description": "Parking duration, in hours", "type": "integer"}, "parkingType": {"description": "Parking type, such as'short-term', 'long-term'. Defaults to all types.", "type": "string"}}, "required": ["duration"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get route and transportation information to and from Copenhagen Airport, Denmark.", "name": "getTransportInfo", "parameters": {"properties": {"destination": {"description": "Destination", "type": "string"}, "transportMode": {"description": "Transportation mode, such as 'bus', 'train', 'taxi'. Defaults to all transportation modes.", "type": "string"}}, "required": ["destination"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the latest flight information at Copenhagen Airport, such as departure and arrival times, gate numbers, and flight status.", "name": "getFlightInfo", "parameters": {"properties": {"date": {"description": "Query date, default is the current date", "type": "string"}, "flightNumber": {"description": "Flight number", "type": "string"}}, "required": ["flightNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the available shops, restaurants, and other services in each terminal of Copenhagen Airport, Denmark.", "name": "getAirportShops", "parameters": {"properties": {"category": {"description": "Shop category, such as 'Food & Beverage', 'Shopping', etc. Defaults to all categories", "type": "string"}, "terminal": {"description": "Terminal number", "type": "string"}}, "required": ["terminal"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the availability and prices of parking spaces at Copenhagen Airport, Denmark.", "name": "getParkingInfo", "parameters": {"properties": {"duration": {"description": "Parking duration, in hours", "type": "integer"}, "parkingType": {"description": "Parking type, such as'short-term', 'long-term'. Defaults to all types.", "type": "string"}}, "required": ["duration"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get route and transportation information to and from Copenhagen Airport, Denmark.", "name": "getTransportInfo", "parameters": {"properties": {"destination": {"description": "Destination", "type": "string"}, "transportMode": {"description": "Transportation mode, such as 'bus', 'train', 'taxi'. Defaults to all transportation modes.", "type": "string"}}, "required": ["destination"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current weather information for a specific location globally.", "name": "getCurrentWeather", "parameters": {"properties": {"language": {"description": "The language of the returned data, defaulting to English.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for any location within the past 30 days for a specified time period.", "name": "getHistoricalWeather", "parameters": {"properties": {"endDate": {"description": "The end date of the desired time period, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}, "startDate": {"description": "The start date of the desired time period, in the format 'YYYY-MM-DD'.", "type": "string"}, "time_interval": {"description": "The time interval, defaulting to '24h' representing 24 hours.", "type": "string"}}, "required": ["location", "startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Explore the weather forecasts for the next five days in different cities around the world.", "name": "getForecast", "parameters": {"properties": {"days": {"description": "The number of days for the forecast, defaulting to 5 days.", "type": "integer"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed weather condition information for a specific location globally.", "name": "getLocationWeatherDetails", "parameters": {"properties": {"include": {"description": "An array containing additional weather information, default is empty.", "items": {"description": "The type of additional weather information to include, such as'sunrise and sunset times', 'atmospheric pressure', 'weather forecast', etc.", "type": "string"}, "type": "array"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search articles from around the world by keywords.", "name": "searchArticles", "parameters": {"properties": {"keywords": {"description": "Keywords that the user wants to search for, in English. Multiple keywords are joined with '||'.", "type": "string"}, "language": {"description": "The language code of the article. For example, 'en' represents English. The default value is 'en'.", "type": "string"}, "limit": {"description": "The limit on the number of articles to return. The default value is 10.", "type": "integer"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Filter articles from around the world by category or language.", "name": "filterArticles", "parameters": {"properties": {"category": {"description": "The category of the article, with the default value being 'general'.", "type": "string"}, "language": {"description": "The language code of the article, such as 'en' for English, with the default value being 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve top news headlines or articles published worldwide within a specific time period.", "name": "getHeadlines", "parameters": {"properties": {"domains": {"description": "List of news source domains, default is empty.", "items": {"description": "Domain name of the news source.", "type": "string"}, "type": "array"}, "endDate": {"description": "End date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "keywords": {"description": "Keywords that the user wants to search for, in English.", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of the news, excluding the article.", "name": "getDetails", "parameters": {"properties": {"url": {"description": "The url of the news.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve trending news from around the world and generate a news feed.", "name": "getTrendingNews", "parameters": {"properties": {"category": {"description": "The category of the article. The default value is 'general'.", "type": "string"}, "country": {"description": "Country code, e.g., 'US' for the United States.", "type": "string"}, "refreshInterval": {"description": "The news refresh interval in minutes. The default value is 60.", "type": "integer"}}, "required": ["country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send emails.", "name": "sendEmails", "parameters": {"properties": {"email": {"description": "Email address.", "type": "string"}, "text": {"description": "Email content.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a short link for the long URL of any website.", "name": "createShortLink", "parameters": {"properties": {"expirationDate": {"description": "The expiration date of the short link, in the format of YYYY-MM-DD. The default value is null, indicating it never expires.", "type": "string"}, "longUrl": {"description": "The original long URL that the user wants to shorten.", "type": "string"}}, "required": ["longUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the original long URL from the generated short link.", "name": "retrieveOriginalUrl", "parameters": {"properties": {"shortUrl": {"description": "The short link for which the original long URL needs to be retrieved.", "type": "string"}}, "required": ["shortUrl"], "type": "object"}}, "type": "function"}, {"function": {"description": "List all generated shortened URLs associated with a specific user account.", "name": "listShortLinks", "parameters": {"properties": {"limit": {"description": "The number of results to display per page. The default value is 10.", "type": "integer"}, "page": {"description": "The page number of the results to request. The default value is 1.", "type": "integer"}, "userId": {"description": "The unique identifier of the user account.", "type": "string"}}, "required": ["userId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current Protestant liturgical calendar and highlight important dates and events.", "name": "getCurrentLiturgicalCalendar", "parameters": {"properties": {"highlightEvents": {"description": "Whether to highlight important events, default is true", "type": "boolean"}, "year": {"description": "The year to retrieve, default is the current year", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for key Protestant liturgical events by date or keyword.", "name": "searchLiturgicalEvents", "parameters": {"properties": {"date": {"description": "The date to search for, in the format 'YYYY-MM-DD'", "type": "string"}, "keyword": {"description": "The keyword to search for, default is empty", "type": "string"}, "limit": {"description": "The limit on the number of returned results, default is 10", "type": "integer"}}, "required": ["date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the calendar to meet the needs of a specific Protestant organization.", "name": "customizeCalendar", "parameters": {"properties": {"events": {"description": "List of events to add to the calendar", "items": {"properties": {"eventDate": {"description": "Event date, in the format 'YYYY-MM-DD'", "type": "string"}, "eventId": {"description": "Unique identifier of the event", "type": "string"}, "eventName": {"description": "Event name", "type": "string"}}, "type": "object"}, "type": "array"}, "organizationId": {"description": "Unique identifier of the Protestant organization", "type": "string"}, "removeEvents": {"description": "List of event IDs to remove from the calendar, default is empty", "items": {"type": "string"}, "type": "array"}}, "required": ["organizationId", "events"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Query malware data based on various filters such as file name, MD5 hash, or tags.", "name": "queryMalwareData", "parameters": {"properties": {"filename": {"description": "The file name to query, default is empty", "type": "string"}, "limit": {"description": "The limit on the number of returned results, default is 100", "type": "integer"}, "md5": {"description": "The MD5 hash value to query, default is empty", "type": "string"}, "tag": {"description": "The tag to query, default is empty", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific malware sample, including the sample source, timestamp, detection rate, and relevant metadata.", "name": "retrieveMalwareDetails", "parameters": {"properties": {"sample": {"description": "The name of the malware sample", "type": "string"}}, "required": ["sample"], "type": "object"}}, "type": "function"}, {"function": {"description": "Submit a new malware sample to the database for analysis and include it in the MalwareBazaar collection.", "name": "submitMalwareSample", "parameters": {"properties": {"delivery_method": {"description": "The delivery method of the malware, default is 'email'", "type": "string"}, "file": {"description": "The Base64 encoding of the malware sample file", "type": "string"}, "tags": {"description": "An array of tags related to the malware sample, default is empty", "items": {"description": "Tags related to the malware", "type": "string"}, "type": "array"}}, "required": ["file"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the real-time departure times of a specific station in Germany.", "name": "getRealTimeDeparture", "parameters": {"properties": {"date_time": {"description": "The date and time of the query, defaulting to the current time.", "type": "string"}, "station": {"description": "The name of the station.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for connections based on the starting point and destination in Germany, providing scheduled departure and arrival times.", "name": "searchConnections", "parameters": {"properties": {"destination": {"description": "The name of the destination station.", "type": "string"}, "origin": {"description": "The name of the starting station.", "type": "string"}, "travel_date": {"description": "The travel date, defaulting to the current date.", "type": "string"}, "travel_time": {"description": "The travel time, defaulting to the current time.", "type": "string"}}, "required": ["origin", "destination"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about German train stations, such as location, name, and available services.", "name": "getStationInformation", "parameters": {"properties": {"station_id": {"description": "The unique identifier of the station.", "type": "string"}}, "required": ["station_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specific train, including the route, schedule, and any delays.", "name": "getTrainDetails", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}, "train_number": {"description": "The number of the train.", "type": "string"}}, "required": ["train_number"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the daily exchange rates for each currency in a given table of the National Bank of Poland.", "name": "getDailyRates", "parameters": {"properties": {"date": {"description": "The date to retrieve, in the format 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "table": {"description": "The identifier of the exchange rate table, e.g., 'A' for the table of average exchange rates.", "type": "string"}}, "required": ["table"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve exchange rates from the National Bank of Poland for a specific date and time range.", "name": "getExchangeRatesByDateRange", "parameters": {"properties": {"currencyCode": {"description": "Currency code.", "type": "string"}, "endDate": {"description": "End date, in the format 'YYYY-MM-DD'.", "type": "string"}, "startDate": {"description": "Start date, in the format 'YYYY-MM-DD'.", "type": "string"}}, "required": ["startDate", "endDate", "currencyCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information from the National Bank of Poland about a specific currency.", "name": "getCurrencyInfo", "parameters": {"properties": {"asOfDate": {"description": "The reference date, in the format 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "currencyCode": {"description": "The currency code, for example 'EUR' for the euro.", "type": "string"}}, "required": ["currencyCode"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current player roster of a specified Major League Baseball (MLB) team.", "name": "getCurrentPlayerRoster", "parameters": {"properties": {"team": {"description": "The name of the team, in English.", "type": "integer"}}, "required": ["team"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the scorecard of a specific Major League Baseball (MLB) game.", "name": "getGameScorecard", "parameters": {"properties": {"gameId": {"description": "The unique identification ID of the game.", "type": "string"}, "includeDetails": {"description": "Whether to include detailed information about the game, default is false.", "type": "boolean"}}, "required": ["gameId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the statistical data of a specified Major League Baseball (MLB) player.", "name": "getPlayerStats", "parameters": {"properties": {"player": {"description": "Player name.", "type": "integer"}, "season": {"description": "The season year for which to retrieve the statistical data, defaulting to the current year.", "type": "integer"}, "statsType": {"description": "Type of statistical data, such as 'batting' (batting average) or 'pitching' (earned run average), defaulting to 'all'.", "enum": ["batting", "pitching", "all"], "type": "string"}}, "required": ["player"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve Major League Baseball (MLB) team rankings and other league-wide statistics.", "name": "getTeamRankings", "parameters": {"properties": {"league": {"description": "The name of the league, such as 'American' or 'National'. Defaults to all leagues.", "enum": ["American", "National"], "type": "string"}, "season": {"description": "The season year for which to retrieve the rankings. Defaults to the current year.", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the current weather conditions at a specified airport, including METAR and TAF reports.", "name": "getAirportWeather", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'JFK' represents John F. Kennedy International Airport in New York.", "type": "string"}, "includePIREP": {"description": "Whether to include Pilot Report (PIREP) data. The default value is false.", "type": "boolean"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get important meteorological information and pilot meteorological information.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning to be obtained, such as 'SIGMET' or 'AIRMET'. The default value is all types.", "type": "string"}, "region": {"description": "The region code for which meteorological information is to be obtained.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve delay information for a specified airport.", "name": "getAirportDelays", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport, for example, 'LAX' represents Los Angeles International Airport.", "type": "string"}, "date": {"description": "The date to query", "type": "string"}, "delayType": {"description": "The type of delay, for example, 'weather' represents weather delay. The default value is all types.", "type": "string"}}, "required": ["airportCode", "date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the complete book catalog and metadata including author, title, and publication date.", "name": "getBookCatalog", "parameters": {"properties": {"author": {"description": "Author's name. The default value is empty.", "type": "string"}, "published_date": {"description": "Publication date, in the format of YYYY-MM-DD. The default value is empty.", "type": "string"}, "title": {"description": "Book title. The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for books by title, author, or keyword.", "name": "searchBooks", "parameters": {"properties": {"limit": {"description": "Number of results per page, default is 10", "type": "integer"}, "page": {"description": "Page number of results, default is 1", "type": "integer"}, "query": {"description": "Search query term", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve details of a specific book, such as abstract, cover image, and quote.", "name": "getBookDetails", "parameters": {"properties": {"book": {"description": "The name of the book", "type": "string"}}, "required": ["book_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time weather data at a specified location, including temperature, precipitation, wind force, etc.", "name": "getRealtimeWeather", "parameters": {"properties": {"lang": {"description": "The language of the returned data, default is 'zh'.", "enum": ["zh", "en"], "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format of 'latitude,longitude'.", "type": "string"}, "unit": {"description": "The temperature unit, default is 'C'.", "enum": ["C", "F"], "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get weather warnings and alerts information for a specific region.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning, default is 'all'.", "enum": ["all", "typhoon", "rainstorm", "highTemperature"], "type": "string"}, "region": {"description": "Region code or name.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access air quality data for a specified location, including PM2.5, AQI, etc.", "name": "getAirQuality", "parameters": {"properties": {"date": {"description": "The date to query. Defaults to the current date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The name of the location or its latitude and longitude coordinates, in the format 'latitude,longitude'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the sunrise and sunset times for a specified date and location.", "name": "getSunriseSunset", "parameters": {"properties": {"date": {"description": "The date to query, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format 'latitude,longitude'.", "type": "string"}, "timezone": {"description": "The time zone, defaulting to 'UTC'.", "enum": ["UTC", "LOCAL"], "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for tacos by ingredient or name.", "name": "searchTacos", "parameters": {"properties": {"ingredient": {"description": "Whether to search by ingredient. The default value is false.", "type": "boolean"}, "limit": {"description": "The limit on the number of returned results. The default value is 10.", "type": "integer"}, "query": {"description": "The keyword for the search query.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific taco, including all ingredients and preparation guidelines.", "name": "getTacoDetails", "parameters": {"properties": {"query": {"description": "The name of the taco, in English.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Add a new taco recipe to the database.", "name": "addTacoRecipe", "parameters": {"properties": {"author": {"description": "The name of the recipe author, with a default value of 'Anonymous'.", "type": "string"}, "image": {"description": "The URL of the recipe image, with a default value of empty string.", "type": "string"}, "ingredients": {"description": "A list of ingredients required for the recipe.", "items": {"type": "string"}, "type": "array"}, "instructions": {"description": "A list of steps for the preparation guide.", "items": {"type": "string"}, "type": "array"}, "name": {"description": "The name of the taco recipe.", "type": "string"}}, "required": ["name", "ingredients", "instructions"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the status information of the specified document.", "name": "getDocumentStatus", "parameters": {"properties": {"documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a reminder to the specified recipient.", "name": "sendReminder", "parameters": {"properties": {"message": {"description": "The content of the reminder message. The default value is 'Please review the document.'", "type": "string"}, "recipientEmail": {"description": "The email address of the recipient.", "type": "string"}}, "required": ["recipientEmail"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new document template.", "name": "createTemplate", "parameters": {"properties": {"sections": {"description": "The various sections included in the template.", "items": {"description": "The name of the template section.", "type": "string"}, "type": "array"}, "templateName": {"description": "The name of the template.", "type": "string"}}, "required": ["templateName", "sections"], "type": "object"}}, "type": "function"}, {"function": {"description": "Import data into the specified document.", "name": "importDocumentData", "parameters": {"properties": {"data": {"description": "The data to be imported, in the form of key-value pairs.", "properties": {"fieldName": {"description": "The field name in the document.", "type": "string"}, "value": {"description": "The value corresponding to the field.", "type": "string"}}, "type": "object"}, "documentPath": {"description": "The path of the document.", "type": "string"}}, "required": ["documentPath", "data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Apply custom branding to a specified document.", "name": "applyBranding", "parameters": {"properties": {"brandingId": {"description": "The unique identifier of the brand.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId", "brandingId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage the electronic signature workflow of the specified document.", "name": "manageSigningWorkflow", "parameters": {"properties": {"action": {"description": "The operation to be performed, such as'start','stop','restart'.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}, "signers": {"description": "The list of signers' email addresses, default is empty.", "items": {"description": "The email address of the signer.", "type": "string"}, "type": "array"}}, "required": ["documentId", "action"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the current weather data for a specified location.", "name": "getCurrentWeather", "parameters": {"properties": {"location": {"description": "Name of the city, region, or country", "type": "string"}, "units": {"description": "Temperature unit. Optional values are 'C' (Celsius) or 'F' (Fahrenheit).", "enum": ["C", "F"], "type": "string"}}, "required": ["location", "units"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for a specified location.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "Historical date to query, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "Name of the city, region, or country", "type": "string"}, "timezone": {"description": "Time zone, such as 'GMT', default is 'UTC'.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the weather forecast for a specified location.", "name": "getWeatherForecast", "parameters": {"properties": {"days": {"description": "Number of forecast days, ranging from 1 to 16, default is 7.", "type": "integer"}, "location": {"description": "Location coordinates, in the format 'latitude,longitude'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the air quality data of the specified city.", "name": "getAirQuality", "parameters": {"properties": {"city": {"description": "The name of the city, such as 'Beijing'.", "type": "string"}, "country": {"description": "The country code, such as 'CN', default is 'CN'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve historical data on the climate and weather patterns of a specific region.", "name": "getClimatePatterns", "parameters": {"properties": {"end_year": {"description": "The ending year, defaulting to the current year.", "type": "integer"}, "region": {"description": "The name of the region, such as 'North China'.", "type": "string"}, "start_year": {"description": "The starting year, defaulting to the current year.", "type": "integer"}}, "required": ["region"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Validate the existence and validity of an email address.", "name": "validateEmail", "parameters": {"properties": {"email": {"description": "The email address to be validated.", "type": "string"}, "timeout": {"description": "The validation timeout (in seconds). The default value is 30 seconds.", "type": "integer"}}, "required": ["email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Detect disposable email addresses commonly used for spam.", "name": "detectDisposableEmail", "parameters": {"properties": {"check_mx": {"description": "Whether to check the MX record of the email", "type": "boolean"}, "email": {"description": "The email address to be detected.", "type": "string"}}, "required": ["email", "check_mx"], "type": "object"}}, "type": "function"}, {"function": {"description": "Correct common spelling mistakes in email addresses to improve validity.", "name": "correctEmail", "parameters": {"properties": {"correction_level": {"description": "Correction level. 1 for basic correction, 2 for in-depth correction. The default value is 1.", "enum": [1, 2], "type": "integer"}, "email": {"description": "The email address that needs to be corrected.", "type": "string"}}, "required": ["email"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search the boards of Pinterest users.", "name": "searchBoards", "parameters": {"properties": {"limit": {"description": "The maximum number of returned results. The default value is 10.", "type": "integer"}, "query": {"description": "The search keyword.", "type": "string"}, "user_id": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["query", "user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the activity data of a Pinterest user.", "name": "getUserActivity", "parameters": {"properties": {"activity_type": {"description": "The type of activity, such as 'created' or'saved'. The default value is 'all'.", "enum": ["created", "saved", "all"], "type": "string"}, "since": {"description": "The start date, in the format of YYYY-MM-DD. The default value is the user account creation date.", "type": "string"}, "user_id": {"description": "The unique identifier of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new pin using user-generated content on Pinterest.", "name": "createPin", "parameters": {"properties": {"board_id": {"description": "The unique identifier of the board.", "type": "string"}, "description": {"description": "The description of the pin, defaulting to empty.", "type": "string"}, "image_url": {"description": "The URL of the pin image.", "type": "string"}, "link": {"description": "The external link associated with the pin, defaulting to empty.", "type": "string"}}, "required": ["board_id", "image_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage Pinterest boards and their corresponding pins.", "name": "manageBoardPins", "parameters": {"properties": {"action": {"description": "The action to perform, such as 'add' or 'delete'.", "enum": ["add", "delete"], "type": "string"}, "board_id": {"description": "The unique identifier of the board.", "type": "string"}, "pins": {"description": "An array of pin IDs.", "items": {"description": "The unique identifier of the pin.", "type": "string"}, "type": "array"}}, "required": ["board_id", "action", "pins"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random quote from the database.", "name": "getRandomQuote", "parameters": {"properties": {"language": {"description": "Specify the language of the quote. For example, 'en' for English, 'zh' for Chinese. The default is 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for quotes using a specific phrase or keyword.", "name": "searchQuote", "parameters": {"properties": {"keyword": {"description": "The keyword or phrase to search for quotes", "type": "string"}, "maxResults": {"description": "The maximum number of results to return, default is 5", "type": "integer"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the daily quote.", "name": "getDailyQuote", "parameters": {"properties": {"date": {"description": "Specify the date in the format 'YYYY-MM-DD'. The default is the current date.", "type": "string"}, "language": {"description": "Specify the language of the quote. For example, 'en' represents English and 'zh' represents Chinese. The default is 'en'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve quotes by author.", "name": "getQuotesByAuthor", "parameters": {"properties": {"author": {"description": "The author of the quote", "type": "string"}, "limit": {"description": "The number of quotes displayed per page, default is 20", "type": "integer"}, "page": {"description": "The page number of the results, default is 1", "type": "integer"}}, "required": ["author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a card based on the content.", "name": "printCard", "parameters": {"properties": {"content": {"description": "The text content to be printed on the card", "type": "string"}, "image": {"description": "The URL of the text image to be printed on the card. Defaults to blank.", "type": "string"}}, "required": ["content"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate an image based on the content.", "name": "generateImage", "parameters": {"properties": {"content": {"description": "The content for which an image needs to be generated", "type": "string"}}, "required": ["content"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Provide the optimal route planning from point A to point B for cars, bicycles, or pedestrians.", "name": "getRoute", "parameters": {"properties": {"end": {"description": "The geographical coordinates of the destination, in the format of 'latitude,longitude'.", "type": "string"}, "locale": {"description": "Localization language setting, the default value is 'en'.", "enum": ["en", "de", "fr", "zh"], "type": "string"}, "points_encoded": {"description": "Whether to encode the route points, the default value is true.", "type": "boolean"}, "start": {"description": "The geographical coordinates of the starting point, in the format of 'latitude,longitude'.", "type": "string"}, "vehicle": {"description": "Mode of transportation, the optional values are 'car', 'bike', 'foot', and the default value is 'car'.", "enum": ["car", "bike", "foot"], "type": "string"}}, "required": ["start", "end"], "type": "object"}}, "type": "function"}, {"function": {"description": "Convert an address to geographical coordinates.", "name": "geocode", "parameters": {"properties": {"address": {"description": "The address to be converted.", "type": "string"}, "limit": {"description": "The maximum number of returned results, with a default value of 5.", "type": "integer"}}, "required": ["address"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find the nearest address based on geographical coordinates.", "name": "reverseGeocode", "parameters": {"properties": {"location": {"description": "Geographical coordinates, in the format of 'latitude,longitude'.", "type": "string"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time traffic data.", "name": "getTrafficInfo", "parameters": {"properties": {"bbox": {"description": "The bounding box of the query area, in the format of 'latitude of the southwest corner, longitude of the southwest corner, latitude of the northeast corner, longitude of the northeast corner'.", "type": "string"}, "time_interval": {"description": "Time interval (in seconds), with a default value of 300.", "type": "integer"}}, "required": ["bbox"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get candidate data for the two major parties in the United States.", "name": "getCandidateData", "parameters": {"properties": {"party": {"description": "The party the candidate belongs to, such as 'Democrat' or 'Republican'.", "type": "string"}, "year": {"description": "The election year. Defaults to the most recent election year.", "type": "integer"}}, "required": ["party"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time electoral votes of each party in each state of the United States.", "name": "getElectoralVotes", "parameters": {"properties": {"includeHistorical": {"description": "Whether to include historical data. The default is false.", "type": "boolean"}, "party": {"description": "The name of a political party. If not provided, data for all parties will be returned.", "type": "string"}, "state": {"description": "The name of a state in the United States. If not provided, data for all states will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest updates on the US presidential election.", "name": "getElectionUpdates", "parameters": {"properties": {"limit": {"description": "The number of updates to return, default is 10.", "type": "integer"}, "since": {"description": "Return updates since this date. The date format is 'YYYY-MM-DD', and the default is the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the political positions and policy proposals of a specific candidate.", "name": "getCandidatePositions", "parameters": {"properties": {"candidateId": {"description": "The unique identifier of the candidate.", "type": "string"}, "issue": {"description": "List of political issues of interest. Defaults to empty, returning all issues.", "items": {"description": "The name of the political issue.", "type": "string"}, "type": "array"}}, "required": ["candidateId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get voting statistics for a specific state or nationwide.", "name": "getVotingStatistics", "parameters": {"properties": {"ageRange": {"description": "The age range of voters, defaulting to all age groups.", "properties": {"maxAge": {"description": "The maximum age, defaulting to no upper limit.", "type": "integer"}, "minAge": {"description": "The minimum age, defaulting to 18.", "type": "integer"}}, "type": "object"}, "gender": {"description": "The gender of voters. The available values are 'Male', 'Female', 'Other', defaulting to all genders.", "type": "string"}, "state": {"description": "The name of a U.S. state. If not provided, nationwide data will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the list of chat rooms that the user has access to.", "name": "getChatRooms", "parameters": {"properties": {"limit": {"description": "The maximum number of chat rooms to return. The default value is 30.", "type": "integer"}, "user_id": {"description": "The unique identifier of the user, consisting of English letters or numbers.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve messages from a specified chat room.", "name": "getMessages", "parameters": {"properties": {"before_id": {"description": "The message ID used for pagination. The default value is the latest message.", "type": "string"}, "limit": {"description": "The maximum number of messages to return. The default value is 50.", "type": "integer"}, "room_id": {"description": "The unique identifier of the chat room, consisting of English letters or numbers.", "type": "string"}}, "required": ["room_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a message to the chat room.", "name": "sendMessage", "parameters": {"properties": {"format": {"description": "The format of the message, for example: 'text','md', and the default value is 'text'.", "enum": ["text", "md"], "type": "string"}, "message": {"description": "The content of the message to be sent.", "type": "string"}, "room_id": {"description": "The unique identifier of the chat room, composed of English letters or numbers.", "type": "string"}}, "required": ["room_id", "message"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the user's activity information in the specified chat room.", "name": "getUserActivity", "parameters": {"properties": {"include_read": {"description": "Whether to include information about read messages. The default value is false.", "type": "boolean"}, "room_id": {"description": "The unique identifier of the chat room, composed of English letters or numbers.", "type": "string"}, "user_id": {"description": "The unique identifier of the user, composed of English letters or numbers.", "type": "string"}}, "required": ["room_id", "user_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a secure random string with a specific length.", "name": "generateSecureString", "parameters": {"properties": {"includeSymbols": {"description": "Whether to include symbols. The default value is false.", "type": "boolean"}, "length": {"description": "Specify the length of the generated string.", "type": "integer"}}, "required": ["length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a secure random string with a specified charset.", "name": "generateStringWithCharset", "parameters": {"properties": {"charset": {"description": "The charset used to generate the random string.", "type": "string"}, "length": {"description": "Specify the length of the generated string.", "type": "integer"}}, "required": ["charset", "length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a cryptographically secure random number.", "name": "generateCryptographicallySecureNumber", "parameters": {"properties": {"max": {"description": "The maximum value of the generated random number.", "type": "integer"}, "min": {"description": "The minimum value of the generated random number.", "type": "integer"}}, "required": ["min", "max"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a specified number of secure random bytes.", "name": "generateRandomBytes", "parameters": {"properties": {"byteCount": {"description": "The number of random bytes to generate.", "type": "integer"}, "encoding": {"description": "The output encoding format. The default value is 'hex'.", "enum": ["hex", "base64"], "type": "string"}}, "required": ["byteCount"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the balance and transaction information of a US federal account.", "name": "getFederalAccountBalance", "parameters": {"properties": {"account_id": {"description": "The unique identifier of the federal account.", "type": "string"}, "date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information on U.S. Treasury deposits and withdrawals.", "name": "getTreasuryDepositsWithdrawals", "parameters": {"properties": {"end_date": {"description": "The end date of the query.", "type": "string"}, "start_date": {"description": "The start date of the query.", "type": "string"}, "type": {"description": "Transaction type, deposit or withdrawal, default is all types.", "enum": ["deposit", "withdrawal"], "type": "string"}}, "required": ["start_date", "end_date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information on U.S. public debt transactions, including the issuance of Treasury securities.", "name": "getPublicDebtTransactions", "parameters": {"properties": {"issue_date": {"description": "The issue date of the security, defaulting to the current month.", "type": "string"}, "security_type": {"description": "The type of Treasury security, defaulting to all types.", "enum": ["bonds", "notes", "bills"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get US tax collection and refund information.", "name": "getTaxCollectionRefundInfo", "parameters": {"properties": {"fiscal_year": {"description": "Fiscal year.", "type": "integer"}, "refund": {"description": "Whether to query refund information, default is false.", "enum": [true, false], "type": "boolean"}}, "required": ["fiscal_year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve data on the currency operations of the Federal Reserve of the United States.", "name": "getFederalReserveCurrencyOperations", "parameters": {"properties": {"date_range": {"description": "Date range for the query, default is the past week.", "properties": {"end_date": {"description": "End date, default is the current date.", "type": "string"}, "start_date": {"description": "Start date, default is 7 days ago.", "type": "string"}}, "type": "object"}, "operation_type": {"description": "Type of currency operation, default is all types.", "enum": ["open_market_operations", "discount_window_operations"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the definition of a specific word.", "name": "getWordDefinition", "parameters": {"properties": {"useCanonical": {"description": "Whether to use the canonical form of the word, default is false.", "type": "boolean"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve synonyms of a specific word.", "name": "getSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The word for which synonyms are to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve example sentences for a specific word.", "name": "getWordExamples", "parameters": {"properties": {"includeDuplicates": {"description": "Whether to include duplicate example sentences, default is false.", "type": "boolean"}, "word": {"description": "The word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the audio pronunciation of a specific word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The audio format. Supported formats include'mp3' and 'wav'. The default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a secure random string with a specific length.", "name": "generateSecureString", "parameters": {"properties": {"includeSymbols": {"description": "Whether to include symbols. The default value is false.", "type": "boolean"}, "length": {"description": "Specify the length of the generated string.", "type": "integer"}}, "required": ["length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a secure random string with a specified charset.", "name": "generateStringWithCharset", "parameters": {"properties": {"charset": {"description": "The charset used to generate the random string.", "type": "string"}, "length": {"description": "Specify the length of the generated string.", "type": "integer"}}, "required": ["charset", "length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a cryptographically secure random number.", "name": "generateCryptographicallySecureNumber", "parameters": {"properties": {"max": {"description": "The maximum value of the generated random number.", "type": "integer"}, "min": {"description": "The minimum value of the generated random number.", "type": "integer"}}, "required": ["min", "max"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a specified number of secure random bytes.", "name": "generateRandomBytes", "parameters": {"properties": {"byteCount": {"description": "The number of random bytes to generate.", "type": "integer"}, "encoding": {"description": "The output encoding format. The default value is 'hex'.", "enum": ["hex", "base64"], "type": "string"}}, "required": ["byteCount"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time air quality measurement data from various locations in the United States.", "name": "getAirQualityData", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date.", "type": "string"}, "includeSubstances": {"description": "Whether to include information on specific pollutants, defaulting to false.", "type": "boolean"}, "location": {"description": "The geographical location for which air quality data needs to be queried.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information on U.S. industrial facilities that report releases of toxic chemicals.", "name": "getToxicReleaseInventory", "parameters": {"properties": {"chemicals": {"description": "The list of chemicals to query. Defaults to empty, which means query all chemicals.", "items": {"type": "string"}, "type": "array"}, "year": {"description": "The year to query.", "type": "integer"}, "zipCode": {"description": "The U.S. zip code, used to limit the geographical area of the query. Defaults to empty.", "type": "string"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve compliance and enforcement action data for EPA-regulated facilities in the United States.", "name": "getComplianceHistory", "parameters": {"properties": {"complianceStatus": {"description": "Compliance status. Optional values include 'active', 'inactive'. Default is 'active'.", "enum": ["active", "inactive"], "type": "string"}, "facilityId": {"description": "The unique identifier of the facility.", "type": "string"}, "timeFrame": {"description": "The time range for the query. Default is the past year.", "properties": {"endDate": {"description": "The end date. Default is the current date.", "type": "string"}, "startDate": {"description": "The start date. Default is one year before the current date.", "type": "string"}}, "type": "object"}}, "required": ["facilityId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Provides real-time weather update information for a specified location.", "name": "getRealTimeWeather", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is 'zh'.", "type": "string"}, "location": {"description": "The name or coordinates of the location, such as 'Beijing' or '39.9042,116.4074'.", "type": "string"}, "unit": {"description": "Temperature unit, supports 'celsius' or 'fahrenheit', default is 'celsius'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for a past date.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "Historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "hourly": {"description": "Whether to return hourly data, default is false.", "type": "boolean"}, "location": {"description": "Name or coordinates of the location.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide astronomical data such as sunrise and sunset times, moonrise and moonset times, etc.", "name": "getAstronomyData", "parameters": {"properties": {"date": {"description": "Specify the date in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The name or coordinates of the location.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide geographical location data for a specific location based on latitude and longitude coordinates.", "name": "getGeolocationData", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is 'en'.", "type": "string"}, "latitude": {"description": "Latitude value, ranging from -90 to 90.", "type": "float"}, "longitude": {"description": "Longitude value, ranging from -180 to 180.", "type": "float"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve information about a specific beer, including name, rating, and style.", "name": "getBeerInfo", "parameters": {"properties": {"beer_id": {"description": "The unique identifier of the beer", "type": "integer"}, "include_ratings": {"description": "Whether to include rating information, default is false", "type": "boolean"}}, "required": ["beer_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Discover local beer venues and provide recommendations based on user preferences.", "name": "discoverLocalVenues", "parameters": {"properties": {"location": {"description": "The user's location information, in the format of 'latitude,longitude'", "type": "string"}, "preferences": {"description": "List of beer types preferred by the user, default is empty", "items": {"description": "Beer type", "type": "string"}, "type": "array"}, "radius": {"description": "Search radius (in kilometers), default is 10", "type": "integer"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a personalized beer menu based on user input.", "name": "createBeerMenu", "parameters": {"properties": {"menu_preferences": {"description": "The user's menu preference settings, default to system recommendations", "properties": {"alcohol_content": {"description": "The user's preferred alcohol content range, for example: 5.0 - 7.5, default to no restriction", "type": "float"}, "flavor_profiles": {"description": "The user's preferred flavor descriptions, default to empty", "items": {"description": "Flavor description", "type": "string"}, "type": "array"}}, "type": "object"}, "user_id": {"description": "The unique identifier of the user", "type": "integer"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Anonymize faces in images, videos, and streaming media to protect personal privacy.", "name": "anonymizeFaces", "parameters": {"properties": {"anonymizationLevel": {"description": "The level of anonymization, from 1 to 5. The default value is 3.", "type": "integer"}, "imageData": {"description": "Image data that needs to be anonymized for faces, provided as a Base64-encoded string.", "type": "string"}, "stream": {"description": "Indicates whether to anonymize streaming media. The default value is false.", "type": "boolean"}, "videoUrl": {"description": "The URL of the video file that needs to be anonymized for faces. The default value is empty.", "type": "string"}}, "required": ["imageData"], "type": "object"}}, "type": "function"}, {"function": {"description": "Anonymize license plates in images and videos to prevent the leakage of personal information.", "name": "anonymizePlates", "parameters": {"properties": {"blurLevel": {"description": "The level of blurring, ranging from 0.0 to 1.0. The default value is 0.5.", "type": "float"}, "imageData": {"description": "Image data that needs to have license plates anonymized, provided as a Base64-encoded string.", "type": "string"}, "regions": {"description": "Specify the license plate regions that need to be anonymized. The default is an empty array.", "items": {"properties": {"height": {"description": "The height of the license plate region.", "type": "integer"}, "width": {"description": "The width of the license plate region.", "type": "integer"}, "x": {"description": "The x-coordinate of the upper-left corner of the license plate region.", "type": "integer"}, "y": {"description": "The y-coordinate of the upper-left corner of the license plate region.", "type": "integer"}}, "type": "object"}, "type": "array"}, "videoUrl": {"description": "The URL of the video file that needs to have license plates anonymized. The default value is an empty string.", "type": "string"}}, "required": ["imageData"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the anonymization status of a specified task.", "name": "getAnonymizationStatus", "parameters": {"properties": {"taskId": {"description": "The unique identifier of the anonymization task.", "type": "string"}}, "required": ["taskId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Generate a random string with the specified length, characters, and format.", "name": "generateRandomString", "parameters": {"properties": {"includeDigits": {"description": "Whether to include digits, default is true", "type": "boolean"}, "includeSymbols": {"description": "Whether to include symbols, default is false", "type": "boolean"}, "length": {"description": "The length of the random string", "type": "integer"}}, "required": ["length"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate random numbers with specific ranges and formats.", "name": "generateRandomNumber", "parameters": {"properties": {"decimals": {"description": "The number of digits after the decimal point, default is 0", "type": "integer"}, "max": {"description": "The maximum value of the random number", "type": "integer"}, "min": {"description": "The minimum value of the random number", "type": "integer"}}, "required": ["min", "max"], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate random dates with customizable format, range, and frequency.", "name": "generateRandomDate", "parameters": {"properties": {"endYear": {"description": "The end year, default is the current year", "type": "integer"}, "format": {"description": "The format of the date, default is 'YYYY-MM-DD'", "type": "string"}, "startYear": {"description": "The start year, default is 1900", "type": "integer"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Generate a random time with a range of format options and time zones.", "name": "generateRandomTime", "parameters": {"properties": {"timeZone": {"description": "Time zone, default is 'UTC'", "type": "string"}, "twentyFourHours": {"description": "Whether to use the 24-hour format, default is true", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Check the reputation score of an IP address, domain name, or URL.", "name": "checkReputation", "parameters": {"properties": {"entity": {"description": "The IP address, domain name, or URL to be checked.", "type": "string"}, "entityType": {"description": "The type of the entity, such as IP, domain name, or URL. The default is auto-detection.", "enum": ["IP", "Domain", "URL"], "type": "string"}}, "required": ["entity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Classify an IP, domain name, or URL and provide information about its purpose and function.", "name": "classifyEntity", "parameters": {"properties": {"entity": {"description": "The IP address, domain name, or URL to be classified.", "type": "string"}}, "required": ["entity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Subscribe to threat intelligence to obtain information about the latest cybersecurity threats.", "name": "subscribeThreatIntelligence", "parameters": {"properties": {"email": {"description": "The user's email address.", "type": "string"}, "frequency": {"description": "The update frequency, default is daily.", "enum": ["Daily", "Weekly", "Monthly"], "type": "string"}}, "required": ["email"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information and historical data of a specific entity.", "name": "getEntityDetails", "parameters": {"properties": {"entity": {"description": "The IP address, domain name or URL to be queried.", "type": "string"}, "history": {"description": "Whether to include historical data, default is false.", "type": "boolean"}}, "required": ["entity"], "type": "object"}}, "type": "function"}, {"function": {"description": "Report suspicious activities to help improve the Phisherman service.", "name": "reportSuspiciousActivity", "parameters": {"properties": {"activityType": {"description": "The type of suspicious activity.", "enum": ["Phishing", "Malware", "Spam"], "type": "string"}, "description": {"description": "A detailed description of the activity, defaulting to empty.", "type": "string"}, "entity": {"description": "The suspicious IP address, domain name or URL.", "type": "string"}}, "required": ["entity", "activityType"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Verify links to ensure they are safe and accessible to users.", "name": "verifyLink", "parameters": {"properties": {"url": {"description": "The link address to be verified.", "type": "string"}, "user_id": {"description": "The user ID requesting the verification, with a default value of 0.", "type": "integer"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage link categories and rules to meet different security requirements.", "name": "manageLinkCategories", "parameters": {"properties": {"active": {"description": "Whether the category rule is enabled. The default value is true.", "type": "boolean"}, "category": {"description": "The name of the link category.", "type": "string"}, "rules": {"description": "The list of rules applied to this category.", "items": {"description": "Specific rule description.", "type": "string"}, "type": "array"}}, "required": ["category", "rules"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the analysis and detailed reports of user activities to monitor and improve security measures.", "name": "getActivityReport", "parameters": {"properties": {"date_range": {"description": "The date range of the report, defaulting to the past 30 days.", "properties": {"end_date": {"description": "The end date, in the format of YYYY-MM-DD.", "type": "string"}, "start_date": {"description": "The start date, in the format of YYYY-MM-DD.", "type": "string"}}, "type": "object"}, "include_details": {"description": "Whether to include the detailed information of the report, with a default value of false.", "type": "boolean"}, "user_id": {"description": "The user ID.", "type": "integer"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for domain names on the Internet and retrieve information about open ports, certificates, and web applications.", "name": "searchDomain", "parameters": {"properties": {"domain": {"description": "The domain name to search for. Refer to the format example.com", "type": "string"}, "includeSubdomains": {"description": "Whether to include search results for subdomains. The default value is false", "type": "boolean"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve rich data about the Domain Name System (DNS) and quickly identify network assets on the Internet.", "name": "retrieveDNSInfo", "parameters": {"properties": {"hostname": {"description": "The hostname to query. Refer to the format example.com.", "type": "string"}, "recordType": {"description": "DNS record type, such as A, MX, TXT, etc. The default value is A.", "enum": ["A", "MX", "TXT", "CNAME", "NS"], "type": "string"}}, "required": ["hostname"], "type": "object"}}, "type": "function"}, {"function": {"description": "Real-time identification of new or modified subdomains on the Internet to protect the network from emerging threats.", "name": "identifyNewSubdomains", "parameters": {"properties": {"domain": {"description": "The main domain name to be monitored. Refer to the format example.com", "type": "string"}, "interval": {"description": "The time interval for checking new subdomains, in hours. The default value is 24.", "type": "integer"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the WHOIS information of a domain name to understand its registration details.", "name": "getWHOISInfo", "parameters": {"properties": {"domain": {"description": "The domain name for which WHOIS information is to be queried. The format should be like example.com", "type": "string"}}, "required": ["domain"], "type": "object"}}, "type": "function"}, {"function": {"description": "Scan the open ports of the specified IP address to understand potential security risks.", "name": "scanOpenPorts", "parameters": {"properties": {"ipAddress": {"description": "The IP address to be scanned. Refer to the format 192.168.1.1", "type": "string"}, "portRange": {"description": "The port range to be scanned. Refer to the format 80,443,1000-2000. The default value is common ports.", "type": "string"}}, "required": ["ipAddress"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for globally endangered species according to specific criteria such as taxonomy, region, and threat status.", "name": "searchEndangeredSpecies", "parameters": {"properties": {"page": {"description": "The page number of the results. The default value is 1", "type": "integer"}, "pageSize": {"description": "The number of results displayed per page. The default value is 20", "type": "integer"}, "region": {"description": "The region to search. The default value is 'Global' and it must start with the name of a country.", "type": "string"}, "taxonomy": {"description": "The taxonomic name of the species", "type": "string"}, "threatStatus": {"description": "The threat status of the species. The default value is 'All statuses'", "type": "string"}}, "required": ["taxonomy"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about a specific species, including its scientific name, habitat range, global conservation status, and conservation actions.", "name": "getSpeciesDetails", "parameters": {"properties": {"scientificName": {"description": "The scientific name of the species", "type": "string"}}, "required": ["scientificName"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the global list of all endangered species in a specific region or taxonomic group.", "name": "getEndangeredSpeciesList", "parameters": {"properties": {"region": {"description": "Name of the region", "type": "string"}, "taxonomy": {"description": "Name of the taxonomic group, with the default value being 'All taxonomic groups'", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time data of bus routes, including schedules and arrival times, to help commuters plan their trips more effectively.", "name": "getBusRoutes", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date", "type": "string"}, "routeId": {"description": "The unique identifier of the bus route", "type": "string"}, "time": {"description": "The time of the query, defaulting to the current time", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide parking availability and location information near key destinations, enabling drivers to quickly find parking spaces.", "name": "getParkingAvailability", "parameters": {"properties": {"location": {"description": "Geographical coordinates or address of the destination", "type": "string"}, "radius": {"description": "Search radius (in meters), with a default value of 500", "type": "float"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide traffic data to help enterprises and individuals plan routes based on traffic trends and avoid congested roads.", "name": "getTrafficData", "parameters": {"properties": {"area": {"description": "The name of the area or geographical coordinates for which traffic data needs to be queried", "type": "string"}, "timeRange": {"description": "The time range for the query, defaulting to the current time", "properties": {"end": {"description": "The end time of the time range", "type": "string"}, "start": {"description": "The start time of the time range", "type": "string"}}, "type": "object"}, "trafficType": {"description": "The type of traffic, such as 'Vehicles', 'Public Transportation', etc., defaulting to all types", "enum": ["Vehicles", "Public Transportation", "Walking", "Bicycle"], "type": "string"}}, "required": ["area"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Obtain macroeconomic indicator data for a specified country or region, such as GDP, inflation rate, unemployment rate, etc.", "name": "getEconomicIndicators", "parameters": {"properties": {"country": {"description": "Country or region code, e.g., 'US' represents the United States.", "type": "string"}, "indicators": {"description": "An array of macroeconomic indicators to be queried.", "items": {"description": "The English names of macroeconomic indicators, such as 'GDP', 'Inflation', 'Unemployment'.", "type": "string"}, "type": "array"}, "year": {"description": "The year to be queried, defaulting to the current year.", "type": "integer"}}, "required": ["country", "indicators"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search through thousands of time series and datasets to find specific macroeconomic data.", "name": "searchTimeSeries", "parameters": {"properties": {"limit": {"description": "The maximum number of results to return, default is 50.", "type": "integer"}, "query": {"description": "Search query keywords, which can be countries, indicators or other keywords.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access specific macroeconomic data in JSON format for use in your own applications.", "name": "accessDataInJSON", "parameters": {"properties": {"dataset_id": {"description": "The unique identifier of the dataset.", "type": "string"}, "format": {"description": "The return format of the data, default is 'JSON'.", "enum": ["JSON", "CSV", "XML"], "type": "string"}}, "required": ["dataset_id"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for the lyrics of a given song based on the artist and song title.", "name": "searchLyrics", "parameters": {"properties": {"artist": {"description": "The name of the artist", "type": "string"}, "title": {"description": "The title of the song", "type": "string"}}, "required": ["artist", "title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve artist information such as biography, albums, and popular songs.", "name": "getArtistInfo", "parameters": {"properties": {"artist": {"description": "The name of the artist", "type": "string"}, "includeAlbums": {"description": "Whether to include the artist's album information. The default value is false", "type": "boolean"}}, "required": ["artist"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create playlists according to different criteria such as genre or mood.", "name": "createPlaylist", "parameters": {"properties": {"genre": {"description": "Music genre, the default value is 'pop'", "type": "string"}, "limit": {"description": "The number limit of songs in the playlist, the default value is 10", "type": "integer"}, "mood": {"description": "Mood, the default value is 'happy'", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the rankings of the most popular songs, artists, and albums.", "name": "getRankings", "parameters": {"properties": {"genre": {"description": "Music genre. If specified, returns the rankings for a specific genre. The default value is 'all'.", "type": "string"}, "limit": {"description": "The number of items in the ranking. The default value is 20.", "type": "integer"}, "type": {"description": "The type of the ranking. The available values are'song', 'artist', 'album'.", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get comments of movies or TV series", "name": "getComments", "parameters": {"properties": {"count": {"description": "Number of comments, default is 3", "type": "integer"}, "name": {"description": "Name of the movie or TV series", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the purchase link", "name": "getPurchaseLink", "parameters": {"properties": {"name": {"description": "Name of the purchased product", "type": "string"}, "type": {"description": "Category of the purchased product", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a random anime quote.", "name": "getRandomQuote", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve quotes based on the character name.", "name": "getQuotesByCharacter", "parameters": {"properties": {"character": {"description": "The name of the character.", "type": "string"}}, "required": ["character"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve quotes from a specific anime title.", "name": "getQuotesByAnime", "parameters": {"properties": {"page": {"description": "The page number for pagination, with a default value of 1.", "type": "integer"}, "title": {"description": "The title of the anime.", "type": "string"}}, "required": ["title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a specified number of random anime quotes.", "name": "getRandomQuotesByCount", "parameters": {"properties": {"count": {"description": "The number of quotes to retrieve.", "type": "integer"}}, "required": ["count"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time route schedules and status updates for Ottawa buses and trains.", "name": "getRealTimeSchedule", "parameters": {"properties": {"dayOfWeek": {"description": "The day of the week to query the schedule. The default value is 'Weekday'.", "enum": ["Weekday", "Saturday", "Sunday"], "type": "string"}, "direction": {"description": "The direction of travel, such as 'Northbound' or 'Southbound'. The default value is 'Northbound'.", "type": "string"}, "routeId": {"description": "The route ID of the bus or train.", "type": "string"}}, "required": ["routeId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the locations of stations near Ottawa.", "name": "getNearbyStations", "parameters": {"properties": {"latitude": {"description": "The user's current latitude.", "type": "float"}, "longitude": {"description": "The user's current longitude.", "type": "float"}, "radius": {"description": "Search radius (in meters), default value is 500.", "type": "integer"}}, "required": ["latitude", "longitude"], "type": "object"}}, "type": "function"}, {"function": {"description": "Plan a trip itinerary in Ottawa by providing the starting and ending destinations, time, and other criteria.", "name": "planTrip", "parameters": {"properties": {"departureTime": {"description": "Departure time, in the format 'HH:mm'. The default value is the current time.", "type": "string"}, "endLocation": {"description": "The latitude and longitude of the destination location.", "properties": {"latitude": {"description": "The latitude of the destination location.", "type": "float"}, "longitude": {"description": "The longitude of the destination location.", "type": "float"}}, "type": "object"}, "preferences": {"description": "The user's trip preferences.", "properties": {"leastTransfers": {"description": "Whether to prefer the least number of transfers. The default is true.", "type": "boolean"}, "leastWalking": {"description": "Whether to prefer the least amount of walking. The default is true.", "type": "boolean"}}, "type": "object"}, "startLocation": {"description": "The latitude and longitude of the starting location.", "properties": {"latitude": {"description": "The latitude of the starting location.", "type": "float"}, "longitude": {"description": "The longitude of the starting location.", "type": "float"}}, "type": "object"}}, "required": ["startLocation", "endLocation"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about service disruptions and alerts in Ottawa.", "name": "getServiceDisruptions", "parameters": {"properties": {"date": {"description": "The query date, in the format 'YYYY-MM-DD'. The default value is the current date.", "type": "string"}, "routeId": {"description": "A specific route ID. If not provided, service disruption information for all routes will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve data on various small animals in 'Animal Crossing: New Horizons', including their locations, activity times during the day, and rarity.", "name": "getCreatures", "parameters": {"properties": {"location": {"description": "The location where the small animal appears", "type": "string"}, "rarity": {"description": "The rarity of the small animal, defaulting to 'common'", "type": "string"}, "time": {"description": "The activity time of the small animal, defaulting to 'all'", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about fossils in \"Animal Crossing: New Horizons\", including name, image, and in-game price.", "name": "getFossils", "parameters": {"properties": {"name": {"description": "The name of the fossil", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about artworks in 'Animal Crossing: New Horizons', including the artist, title, and authenticity.", "name": "getArtDetails", "parameters": {"properties": {"artist": {"description": "The name of the artist, defaulting to 'all'", "type": "string"}, "authenticity": {"description": "The authenticity of the artwork, defaulting to true", "type": "boolean"}, "title": {"description": "The title of the artwork, defaulting to 'all'", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of music in 'Animal Crossing: New Horizons', including the title, cover, and composer.", "name": "getMusicDetails", "parameters": {"properties": {"title": {"description": "The title of the music", "type": "string"}}, "required": ["title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve detailed information about furniture in 'Animal Crossing: New Horizons', including name, image, category, and in-game price.", "name": "getFurnitureDetails", "parameters": {"properties": {"category": {"description": "The category of the furniture, defaulting to 'all'", "type": "string"}, "name": {"description": "The name of the furniture", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get valuable information about each villager in 'Animal Crossing: New Horizons', including name, species, and catchphrase.", "name": "getVillagerInfo", "parameters": {"properties": {"catchphrase": {"description": "The catchphrase of the villager, default is 'all'", "type": "string"}, "name": {"description": "The name of the villager", "type": "string"}, "species": {"description": "The species of the villager, default is 'all'", "type": "string"}}, "required": ["name"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about the player's account in \"Animal Crossing: New Horizons\", including money, level, and achievements.", "name": "getAccountInfo", "parameters": {"properties": {"userId": {"description": "The player's account ID, starting with U", "type": "string"}}, "required": ["userId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time and historical data of specified stocks.", "name": "getStockData", "parameters": {"properties": {"datatype": {"description": "The format of the output data. Optional values are 'json' and 'csv'. The default is 'json'.", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min. The default is 1min.", "type": "string"}, "outputsize": {"description": "The size of the output data. Optional values are 'compact' (only return the last 100 data points) and 'full' (return all data points). The default is 'compact'.", "type": "string"}, "symbol": {"description": "The unique code identifier of the stock.", "type": "string"}}, "required": ["symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get real-time rating information of cryptocurrencies.", "name": "getCryptoRating", "parameters": {"properties": {"symbol": {"description": "The unique code identifier of the cryptocurrency.", "type": "string"}}, "required": ["symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve foreign exchange data for a specified currency pair.", "name": "getForexData", "parameters": {"properties": {"from_currency": {"description": "Source currency code.", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min, default is 1min.", "type": "string"}, "outputsize": {"description": "The size of the output data. Optional values are 'compact' (only return the last 100 data points) and 'full' (return all data points), default is 'compact'.", "type": "string"}, "to_currency": {"description": "Target currency code.", "type": "string"}}, "required": ["from_currency", "to_currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Analyze stock data based on the provided technical indicators.", "name": "getTechnicalIndicators", "parameters": {"properties": {"indicator": {"description": "The name of the technical indicator, such as 'SMA' (Simple Moving Average).", "type": "string"}, "interval": {"description": "The time interval of the data, such as 1min, 5min, 15min.", "type": "string"}, "series_type": {"description": "The required price type,可选 'close', 'open', 'high', 'low', default is 'close'.", "type": "string"}, "symbol": {"description": "The unique code identifier of the stock.", "type": "string"}, "time_period": {"description": "The time period used when calculating the technical indicator, default is 20.", "type": "integer"}}, "required": ["symbol", "interval", "indicator"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the historical price data of a specified cryptocurrency.", "name": "getHistoricalPrice", "parameters": {"properties": {"currencyPair": {"description": "The cryptocurrency pair for which the price needs to be queried, e.g., 'BTC/USD'.", "type": "string"}, "time": {"description": "The time of the specified date in the format of YYYY-MM-DD, used to query historical prices.", "type": "integer"}}, "required": ["currencyPair", "time"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current price of the cryptocurrency.", "name": "getCurrentPrice", "parameters": {"properties": {"currencyPair": {"description": "The cryptocurrency pair for which the price needs to be queried, e.g., 'BTC/USD'.", "type": "string"}, "exchange": {"description": "The name of the cryptocurrency exchange, default is 'CCCAGG'.", "type": "string"}}, "required": ["currencyPair"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the social and community data of cryptocurrencies.", "name": "getSocialData", "parameters": {"properties": {"aggregation": {"description": "The data aggregation method, default is 'hour'.", "enum": ["hour", "day"], "type": "string"}, "currency": {"description": "The symbol of the cryptocurrency for which social data needs to be queried, such as BTC.", "type": "string"}}, "required": ["currency"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get mining - related data for a specific cryptocurrency.", "name": "getMiningData", "parameters": {"properties": {"currency": {"description": "The symbol of the cryptocurrency for which mining data needs to be queried, e.g., BTC.", "type": "string"}, "dataPoints": {"description": "The number of data points to be returned", "type": "integer"}}, "required": ["currency", "dataPoints"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current weather information for a specific location globally.", "name": "getCurrentWeather", "parameters": {"properties": {"location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for any location in the world within the past 30 days.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "The required historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}, "time_interval": {"description": "The time interval, defaulting to '24h' representing 24 hours.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Explore the weather forecasts for the next five days in different cities around the world.", "name": "getForecast", "parameters": {"properties": {"days": {"description": "The number of days for the forecast.", "type": "integer"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location", "days"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed weather condition information for a specific location globally.", "name": "getLocationWeatherDetails", "parameters": {"properties": {"include": {"description": "An array containing additional weather information, default is empty.", "items": {"description": "The type of additional weather information to include, such as'sunrise and sunset times', 'atmospheric pressure', 'weather forecast', etc.", "type": "string"}, "type": "array"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve data on all monsters in the game, including their elemental weaknesses, dropped items, and attack patterns.", "name": "getMonsters", "parameters": {"properties": {"element": {"description": "Filter monsters with specific elemental weaknesses. The default value is 'all'.", "type": "string"}, "rank": {"description": "Filter monsters of a specific rank, such as 'low', 'high' or 'G'. The default value is 'all'.", "enum": ["low", "high", "G", "all"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about specific weapons and armor sets, including their attributes and upgrade trees.", "name": "getWeaponDetails", "parameters": {"properties": {"includeTree": {"description": "Whether to include the upgrade tree information of the weapon. The default value is false.", "type": "boolean"}, "weaponId": {"description": "The unique identification ID of the weapon.", "type": "integer"}}, "required": ["weaponId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access quest information, including their objectives and rewards.", "name": "getQuests", "parameters": {"properties": {"difficulty": {"description": "Filter quests of specific difficulty levels, ranging from 1 to 10. The default value of 0 represents all difficulties.", "type": "integer"}, "questType": {"description": "Filter quests of specific types, such as'main quest','side quest'", "enum": ["main quest", "side quest", "all"], "type": "string"}, "version": {"description": "Server version", "enum": ["official server", "classic server"], "type": "string"}}, "required": ["questType", "version"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the current weather conditions at a specified airport, including METAR and TAF reports.", "name": "getAirportWeather", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'JFK' represents John F. Kennedy International Airport in New York.", "type": "string"}, "includePIREP": {"description": "Whether to include Pilot Report (PIREP) data. The default value is false.", "type": "boolean"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain important meteorological information and pilot meteorological information in the United States.", "name": "getWeatherAlerts", "parameters": {"properties": {"alertType": {"description": "The type of warning to be obtained, such as 'SIGMET' or 'AIRMET'. The default value is all types.", "type": "string"}, "region": {"description": "The region code for which meteorological information needs to be obtained.", "type": "string"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the delay information of a specified airport.", "name": "getAirportDelays", "parameters": {"properties": {"airportCode": {"description": "The three-letter code of the airport. For example, 'LAX' represents Los Angeles International Airport.", "type": "string"}, "delayType": {"description": "The type of delay. For example, 'weather' represents weather-related delays. The default value is all types.", "type": "string"}}, "required": ["airportCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the current weather data at the specified location.", "name": "getCurrentWeather", "parameters": {"properties": {"location": {"description": "Location coordinates, in the format of 'latitude,longitude'.", "type": "string"}, "units": {"description": "Temperature unit. Optional values are 'C' (Celsius) or 'F' (Fahrenheit), with the default being 'C'.", "enum": ["C", "F"], "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for a specified location.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "The historical date to query, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "Location coordinates, in the format 'latitude,longitude'.", "type": "string"}, "timezone": {"description": "Time zone, such as 'GMT', default is 'UTC'.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the weather forecast for a specified location.", "name": "getWeatherForecast", "parameters": {"properties": {"days": {"description": "Number of forecast days, ranging from 1 to 16, default is 7.", "type": "integer"}, "location": {"description": "Location coordinates, in the format 'latitude,longitude'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the air quality data of the specified city.", "name": "getAirQuality", "parameters": {"properties": {"city": {"description": "The name of the city, such as 'Beijing'.", "type": "string"}, "country": {"description": "The country code, such as 'CN', default is 'CN'.", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve historical data on the climate and weather patterns of a specific region.", "name": "getClimatePatterns", "parameters": {"properties": {"end_year": {"description": "The ending year, defaulting to the current year.", "type": "integer"}, "region": {"description": "The name of the region, such as 'North China'.", "type": "string"}, "start_year": {"description": "The starting year, defaulting to the current year.", "type": "integer"}}, "required": ["region"], "type": "object"}}, "type": "function"}, {"function": {"description": "Recommend clothing styles based on weather conditions", "name": "getClothingRecommations", "parameters": {"properties": {"weatherDescription": {"description": "Weather description", "type": "string"}}, "required": ["weatherDescription"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Classify and label the uploaded image.", "name": "classifyImage", "parameters": {"properties": {"image": {"description": "The Base64-encoded string of the image to be classified.", "type": "string"}, "threshold": {"description": "The classification confidence threshold. The default value is 0.5.", "type": "float"}}, "required": ["image"], "type": "object"}}, "type": "function"}, {"function": {"description": "Detect whether the image contains inappropriate content.", "name": "detectNSFWContent", "parameters": {"properties": {"image_url": {"description": "The URL address of the image.", "type": "string"}}, "required": ["image_url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for similar images or audio by image.", "name": "searchByImage", "parameters": {"properties": {"image_data": {"description": "The Base64-encoded string of the image used for search.", "type": "string"}, "search_type": {"description": "The type of search, optional 'image' or 'audio', and the default value is 'image'.", "enum": ["image", "audio"], "type": "string"}}, "required": ["image_data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Perform sentiment analysis on the text.", "name": "analyzeSentiment", "parameters": {"properties": {"language": {"description": "The language of the text, the default value is 'en'.", "enum": ["zh", "en", "es", "fr"], "type": "string"}, "text": {"description": "The text that needs to be sentiment analyzed.", "type": "string"}}, "required": ["text"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a list of the world's most popular quotes.", "name": "getPopularQuotes", "parameters": {"properties": {"count": {"description": "The number of popular quotes to retrieve, default is 5.", "type": "integer"}, "since": {"description": "Start date, in the format of YYYY-MM-DD, default is the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve all quotes of a specific character in Game of Thrones.", "name": "getQuotesByCharacter", "parameters": {"properties": {"character": {"description": "The English name of the character, such as 'Arya Stark'.", "type": "string"}, "season": {"description": "The season number. The default value is 0, indicating all seasons.", "type": "integer"}}, "required": ["character"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve all quotes from a specific season of Game of Thrones.", "name": "getQuotesBySeason", "parameters": {"properties": {"episode": {"description": "The episode number. The default value is 0, representing all episodes of the season.", "type": "integer"}, "season": {"description": "The season number. For example, 1 represents the first season.", "type": "integer"}}, "required": ["season"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a random quote from the Game of Thrones series.", "name": "getRandomGoTQuote", "parameters": {"properties": {}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a random quote from a collection around the world.", "name": "getRandomQuote", "parameters": {"properties": {"category": {"description": "The category of the quote, defaulting to all categories.", "type": "string"}, "language": {"description": "The language of the quote, defaulting to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Randomly obtain quotes from specific family members.", "name": "getRandomQuoteByHouse", "parameters": {"properties": {"house": {"description": "The English name of the family, such as 'Stark'.", "type": "string"}}, "required": ["house"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search expressions from around the world by keyword or key phrase.", "name": "searchQuotes", "parameters": {"properties": {"author": {"description": "The name of the quote author. Defaults to empty, not restricting the author.", "type": "string"}, "keyword": {"description": "The keyword or phrase used for searching.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page. Defaults to 10.", "type": "integer"}, "page": {"description": "The page number of the results. Defaults to 1.", "type": "integer"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}, {"function": {"description": "Store and share user-generated quotes from around the world.", "name": "storeUserQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "quote": {"description": "The content of the quote created by the user.", "type": "string"}, "shared": {"description": "Whether to publicly share this quote, default is true.", "type": "boolean"}, "tags": {"description": "Tags related to the quote, default is empty.", "items": {"description": "Tags of the quote.", "type": "string"}, "type": "array"}}, "required": ["quote", "author"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for quotes from Game of Thrones that contain specific keywords.", "name": "searchGameOfThronesQuotes", "parameters": {"properties": {"count": {"description": "The number of quotes to return. The default value is 5.", "type": "integer"}, "keyword": {"description": "The keyword to search for, in English.", "type": "string"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the release date of the next upcoming MCU movie.", "name": "getNextMCUFilmReleaseDate", "parameters": {"properties": {"region": {"description": "The code of the user's region, for example, 'US' represents the United States. The default value is 'US'", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the title of the next upcoming MCU movie.", "name": "getNextMCUFilmTitle", "parameters": {"properties": {"language": {"description": "The language in which the user wishes to obtain the movie title. For example, 'zh-CN' represents Simplified Chinese. The default value is 'en-US'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the release dates and titles of all upcoming MCU films.", "name": "getAllUpcomingMCUFilms", "parameters": {"properties": {"count": {"description": "The number of upcoming films the user wishes to retrieve. The default value is 5", "type": "integer"}, "includeDetails": {"description": "Whether to include detailed information about the films, such as the director and the cast list. The default value is false", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve upcoming MCU movies based on a date range.", "name": "getMCUFilmByDateRange", "parameters": {"properties": {"endDate": {"description": "End date, in the format of 'YYYY-MM-DD'", "type": "string"}, "startDate": {"description": "Start date, in the format of 'YYYY-MM-DD'", "type": "string"}}, "required": ["startDate", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specific MCU film.", "name": "getMCUFilmDetails", "parameters": {"properties": {"filmId": {"description": "The unique identifier of the MCU film", "type": "integer"}}, "required": ["filmId"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the status information of the specified document.", "name": "getDocumentStatus", "parameters": {"properties": {"documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Send a reminder to the specified recipient.", "name": "sendReminder", "parameters": {"properties": {"message": {"description": "The content of the reminder message. The default value is 'Please review the document.'", "type": "string"}, "recipientEmail": {"description": "The email address of the recipient.", "type": "string"}}, "required": ["recipientEmail"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create a new document template.", "name": "createTemplate", "parameters": {"properties": {"sections": {"description": "The various sections included in the template.", "items": {"description": "The name of the template section.", "type": "string"}, "type": "array"}, "templateName": {"description": "The name of the template.", "type": "string"}}, "required": ["templateName", "sections"], "type": "object"}}, "type": "function"}, {"function": {"description": "Import data into the specified document.", "name": "importDocumentData", "parameters": {"properties": {"data": {"description": "The data to be imported, in the form of key-value pairs.", "properties": {"fieldName": {"description": "The field name in the document.", "type": "string"}, "value": {"description": "The value corresponding to the field.", "type": "string"}}, "type": "object"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId", "data"], "type": "object"}}, "type": "function"}, {"function": {"description": "Apply custom branding to a specified document.", "name": "applyBranding", "parameters": {"properties": {"brandingId": {"description": "The unique identifier of the brand.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}}, "required": ["documentId", "brandingId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Manage the electronic signature workflow of the specified document.", "name": "manageSigningWorkflow", "parameters": {"properties": {"action": {"description": "The operation to be performed, such as'start','stop','restart'.", "type": "string"}, "documentId": {"description": "The unique identifier of the document.", "type": "string"}, "signers": {"description": "The list of signers' email addresses, default is empty.", "items": {"description": "The email address of the signer.", "type": "string"}, "type": "array"}}, "required": ["documentId", "action"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve datasets related to the population, demographics, and social and environmental indicators of a specific country.", "name": "getPopulationData", "parameters": {"properties": {"country": {"description": "The specific country for which data is to be retrieved", "type": "string"}, "includeIndicators": {"description": "Whether to include social and environmental indicators, default is true", "type": "boolean"}, "year": {"description": "The year for which data is to be retrieved", "type": "integer"}}, "required": ["year", "country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about the economic activities, agriculture, and industry of a specific country.", "name": "getEconomicActivityInfo", "parameters": {"properties": {"country": {"description": "The specific country for which to retrieve data", "type": "string"}, "endDate": {"description": "End date, in the format 'YYYY-MM-DD'", "type": "string"}, "metrics": {"description": "List of metrics to retrieve, defaulting to ['GDP', 'employment']", "items": {"type": "string"}, "type": "array"}, "sector": {"description": "The sector of economic activity, such as 'Agriculture', 'Industry'", "type": "string"}, "startDate": {"description": "Start date, in the format 'YYYY-MM-DD'", "type": "string"}}, "required": ["sector", "startDate", "country", "endDate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get information about the public finance, debt, and government spending of a specific country.", "name": "getPublicFinanceInfo", "parameters": {"properties": {"country": {"description": "The specific country for which data is to be retrieved", "type": "string"}, "detailLevel": {"description": "The level of detail of the information, such as'summary', 'detailed', default is'summary'", "type": "string"}, "fiscalYear": {"description": "Fiscal year", "type": "integer"}}, "required": ["fiscalYear", "country"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data on climate and weather patterns for a specific country, on a monthly basis", "name": "getClimatePatterns", "parameters": {"properties": {"country": {"description": "The specific country for which to retrieve data", "type": "string"}, "end_date": {"description": "End date", "type": "integer"}, "start_date": {"description": "Start date", "type": "integer"}}, "required": ["country", "start_date", "end_date"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the current weather information for a specific location globally.", "name": "getCurrentWeather", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is en", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical weather data for any location in the world within the past 30 days.", "name": "getHistoricalWeather", "parameters": {"properties": {"date": {"description": "The required historical date, in the format 'YYYY-MM-DD'.", "type": "string"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}, "time_interval": {"description": "The time interval, defaulting to '24h' representing 24 hours.", "type": "string"}}, "required": ["location", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Explore the future weather forecasts of different cities around the world.", "name": "getForecast", "parameters": {"properties": {"days": {"description": "The number of days for the forecast", "type": "integer"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location", "days"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed weather condition information for a specific location globally.", "name": "getLocationWeatherDetails", "parameters": {"properties": {"include": {"description": "An array containing additional weather information, default is empty.", "items": {"description": "The type of additional weather information to include, such as'sunrise and sunset times', 'atmospheric pressure', 'weather forecast', etc.", "type": "string"}, "type": "array"}, "location": {"description": "The query string for the geographical location, such as the city name or latitude and longitude.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Kroger product data based on the provided search parameters, such as product name, UPC code, or location.", "name": "searchProducts", "parameters": {"properties": {"limit": {"description": "The maximum number of returned results, with a default value of 10.", "type": "integer"}, "location": {"description": "The location where the user is located, used to find nearby Kroger stores. The format is 'City, State', and the default value is empty.", "type": "string"}, "query": {"description": "A list of product names that the user wants to search for.", "items": {"type": "string"}, "type": "array"}, "upc": {"description": "The Universal Product Code (UPC) of the product, with a default value of empty.", "type": "string"}}, "required": ["location", "query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Find Kroger stores based on location, type, and other search criteria.", "name": "locateStores", "parameters": {"properties": {"radius": {"description": "Search radius (in miles), default value is 5.0.", "type": "float"}, "storeType": {"description": "Store type, such as'supermarket' or 'pharmacy', default value is empty.", "type": "string"}, "zipCode": {"description": "Zip code used for the search.", "type": "string"}}, "required": ["zipCode"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access Kroger's extensive recipe data with full descriptions, ingredients, and instructions.", "name": "getRecipes", "parameters": {"properties": {"cuisine": {"description": "Cuisine type, such as 'Italian' or 'Mexican'. The default value is empty.", "type": "string"}, "diet": {"description": "Dietary preferences, such as 'Vegetarian' or 'Gluten-Free'. The default value is empty.", "type": "string"}, "keywords": {"description": "An array of keywords used to search for recipes. The default value is empty.", "items": {"type": "string"}, "type": "array"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access user-specific Kroger data such as shopping lists, purchase history, and loyalty program information.", "name": "getUserData", "parameters": {"properties": {"dataType": {"description": "The type of data requested, such as 'Shopping List', 'Purchase History'.", "type": "string"}, "dateRange": {"description": "The date range for the purchase history, with the default value being the past month.", "properties": {"endDate": {"description": "The end date, in the format 'YYYY-MM-DD', with the default value being the current date.", "type": "string"}, "startDate": {"description": "The start date, in the format 'YYYY-MM-DD', with the default value being the current date minus 30 days.", "type": "string"}}, "type": "object"}, "userId": {"description": "The user's unique identifier.", "type": "string"}}, "required": ["userId", "dataType"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the train schedule for a specific station or route in Spain.", "name": "getTrainSchedule", "parameters": {"properties": {"date": {"description": "Date, in the format YYYY-MM-DD", "type": "string"}, "route": {"description": "Route name, in the format xx-xx. The default value is empty, indicating all routes", "type": "string"}, "station": {"description": "Station name", "type": "string"}}, "required": ["station", "date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Track the current location of Spanish trains in real time.", "name": "trackTrainLocation", "parameters": {"properties": {"includeStations": {"description": "Whether to include information about the stations passed through. The default is false.", "type": "boolean"}, "trainNumber": {"description": "Train number", "type": "string"}}, "required": ["trainNumber"], "type": "object"}}, "type": "function"}, {"function": {"description": "Buy Spanish train tickets.", "name": "buyTrainTickets", "parameters": {"properties": {"date": {"description": "Date, in the format of YYYY-MM-DD", "type": "string"}, "route": {"description": "Route name, in the format of xx:xx", "type": "string"}, "trainNumber": {"description": "Train number", "type": "string"}}, "required": ["trainNumber", "date", "route"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest information on train delays, cancellations and other disruptions in Spain.", "name": "getTrainDisruptions", "parameters": {"properties": {"date": {"description": "Date, in the format YYYY-MM-DD", "type": "string"}, "station": {"description": "Station name. The default value is empty to query all", "type": "string"}, "train_number": {"description": "Train number. The default value is empty to query all", "type": "string"}}, "required": ["date"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get weather information in Spain.", "name": "getWeatherInfo", "parameters": {"properties": {"city": {"description": "City name", "type": "string"}, "date": {"description": "Date, in the format of YYYY-MM-DD, default is the latest date", "type": "string"}}, "required": ["city"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the real-time train schedule and delay information in the Netherlands.", "name": "getRealTimeTrainSchedule", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "station": {"description": "The name or code of the train station.", "type": "string"}, "time": {"description": "The time of the query, defaulting to the current time. The format is 'HH:MM'.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Check the availability and occupancy level of Dutch trains.", "name": "checkTrainAvailability", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "train_number": {"description": "The number of the train.", "type": "integer"}}, "required": ["train_number"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the platform numbers of trains arriving at and departing from Dutch platforms.", "name": "getPlatformNumbers", "parameters": {"properties": {"direction": {"description": "The direction of the train, such as 'arrivals' or 'departures', default is 'arrivals'.", "enum": ["arrivals", "departures"], "type": "string"}, "station": {"description": "The name or code of the railway station.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the ticket situation of Dutch railway stations.", "name": "getTrainTickets", "parameters": {"properties": {"date": {"description": "The date of the query, defaulting to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "destination_station": {"description": "The name of the destination railway station.", "type": "string"}, "starting_station": {"description": "The name of the starting railway station.", "type": "string"}, "time": {"description": "The time of the query, defaulting to the current time. The format is 'HH:MM'.", "type": "string"}}, "required": ["starting_station", "destination_station"], "type": "object"}}, "type": "function"}, {"function": {"description": "Book Dutch train tickets.", "name": "bookTrainTickets", "parameters": {"properties": {"date": {"description": "Date, default to the current date. The format is 'YYYY-MM-DD'.", "type": "string"}, "seat_level": {"description": "Seat class, either first_class or second_class.", "type": "string"}, "train_id": {"description": "Train number.", "type": "string"}}, "required": ["train_id", "date", "seat_level"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve information about Dutch stations, such as amenities, accessibility, and timetables.", "name": "getStationInformation", "parameters": {"properties": {"include_accessibility": {"description": "Whether to include information about station accessibility, default is false.", "type": "boolean"}, "include_facilities": {"description": "Whether to include information about station facilities, default is false.", "type": "boolean"}, "station": {"description": "The name or code of the railway station.", "type": "string"}}, "required": ["station"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the candidate data of the two major parties in the United States.", "name": "getCandidateData", "parameters": {"properties": {"name": {"description": "The candidate. By default, all candidates will be queried.", "type": "string"}, "party": {"description": "The party the candidate belongs to, such as 'Democrat' or 'Republican'.", "type": "string"}, "year": {"description": "The election year. By default, it is the most recent election year.", "type": "integer"}}, "required": ["party"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the real-time electoral votes of each party in each state of the United States.", "name": "getElectoralVotes", "parameters": {"properties": {"includeHistorical": {"description": "Whether to include historical data. The default is false.", "type": "boolean"}, "party": {"description": "The name of a political party. If not provided, data for all parties will be returned.", "type": "string"}, "state": {"description": "The name of a state in the United States. If not provided, data for all states will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the latest updates on the US presidential election.", "name": "getElectionUpdates", "parameters": {"properties": {"limit": {"description": "The number of updates to return, default is 10.", "type": "integer"}, "since": {"description": "Return updates since this date. The date format is 'YYYY-MM-DD', and the default is the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the political positions and policy proposals of a specific candidate.", "name": "getCandidatePositions", "parameters": {"properties": {"candidate": {"description": "Candidate.", "type": "string"}, "issue": {"description": "List of political issues of interest. Defaults to empty, returning all issues.", "items": {"description": "Name of the political issue.", "type": "string"}, "type": "array"}}, "required": ["candidate"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get voting statistics for a specific state or nationwide.", "name": "getVotingStatistics", "parameters": {"properties": {"ageRange": {"description": "The age range of voters, defaulting to all age groups.", "properties": {"maxAge": {"description": "The maximum age, defaulting to no upper limit.", "type": "integer"}, "minAge": {"description": "The minimum age, defaulting to 18.", "type": "integer"}}, "type": "object"}, "gender": {"description": "The gender of voters. The available values are 'Male', 'Female', 'Other', defaulting to all genders.", "type": "string"}, "state": {"description": "The name of a U.S. state. If not provided, nationwide data will be returned.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get the definitions and example usages of a word in a specified language.", "name": "getWordDefinitions", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide pronunciation information for words, including audio samples.", "name": "getWordPronunciations", "parameters": {"properties": {"audioFormat": {"description": "The audio format, such as'mp3', default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query for pronunciation.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide synonyms and antonyms for each word.", "name": "getSynonymsAntonyms", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "type": {"description": "The type of query, which can be'synonyms' or 'antonyms'.", "enum": ["synonyms", "antonyms"], "type": "string"}, "word": {"description": "The word to be queried.", "type": "string"}}, "required": ["word", "type"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide word translations between multiple languages.", "name": "translateWord", "parameters": {"properties": {"fromLanguage": {"description": "Original language code.", "type": "string"}, "toLanguage": {"description": "Target language code.", "type": "string"}, "word": {"description": "The word to be translated.", "type": "string"}}, "required": ["word", "fromLanguage", "toLanguage"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide information about the part of speech of a word.", "name": "getWordPartOfSpeech", "parameters": {"properties": {"language": {"description": "The language code of the word, default is 'en'.", "type": "string"}, "word": {"description": "The word to query the part of speech for.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide the historical usage of a word.", "name": "getWordUsageHistory", "parameters": {"properties": {"endYear": {"description": "The end year, defaulting to the current year.", "type": "integer"}, "startYear": {"description": "The start year, defaulting to 1800.", "type": "integer"}, "word": {"description": "The word for which to query the historical usage.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get real-time data of various cryptocurrencies, including current price, market capitalization, trading volume, etc.", "name": "getRealTimeCryptoData", "parameters": {"properties": {"convert": {"description": "The symbol of the currency to convert to, default is 'USD'.", "type": "string"}, "symbols": {"description": "List of cryptocurrency symbols to query, such as ['BTC', 'ETH'].", "items": {"description": "The symbol of the cryptocurrency, such as 'BTC'.", "type": "string"}, "type": "array"}}, "required": ["symbols"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get historical data of prices, trading volumes, and other key metrics of cryptocurrencies through custom parameters.", "name": "getHistoricalCryptoData", "parameters": {"properties": {"dateRange": {"description": "The date range for the query, defaulting to the past 24 hours.", "properties": {"end": {"description": "The end date, in the format of 'YYYY-MM-DD'.", "type": "string"}, "start": {"description": "The start date, in the format of 'YYYY-MM-DD'.", "type": "string"}}, "type": "object"}, "interval": {"description": "The interval between data points, defaulting to '1h'. Optional values include '1m', '1h', '1d', etc.", "enum": ["1m", "1h", "1d"], "type": "string"}, "symbol": {"description": "The symbol of the cryptocurrency, such as 'BTC'.", "type": "string"}}, "required": ["symbol"], "type": "object"}}, "type": "function"}, {"function": {"description": "Use advanced filtering and sorting functions to narrow down the search scope and quickly access the most relevant cryptocurrency information.", "name": "filterAndSortCrypto", "parameters": {"properties": {"filter": {"description": "Filter conditions, default is empty.", "properties": {"marketCap": {"description": "Market capitalization filter conditions, you can set the minimum and maximum values.", "properties": {"max": {"description": "The maximum value of market capitalization, default is no upper limit.", "type": "float"}, "min": {"description": "The minimum value of market capitalization, default is 0.", "type": "float"}}, "type": "object"}, "priceChangePercentage": {"description": "Price change percentage filter conditions, you can set the minimum and maximum values.", "properties": {"max": {"description": "The maximum value of price change percentage, default is no upper limit.", "type": "float"}, "min": {"description": "The minimum value of price change percentage, default is 0.", "type": "float"}}, "type": "object"}}, "type": "object"}, "limit": {"description": "The number limit of returned results, default is 10.", "type": "integer"}, "order": {"description": "Sorting order, default is 'desc', available values are 'asc' or 'desc'.", "enum": ["asc", "desc"], "type": "string"}, "sort": {"description": "Sorting basis, default is'marketCap', available values include'marketCap', 'volume', 'priceChangePercentage', etc.", "enum": ["marketCap", "volume", "priceChangePercentage"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Place an order for the specified cryptocurrency on Kraken.", "name": "placeOrder", "parameters": {"properties": {"leverage": {"description": "Leverage multiple. The default is 1, which means no leverage.", "type": "integer"}, "orderType": {"description": "Order type, such as'market', 'limit', etc. The default is'market'.", "type": "string"}, "pair": {"description": "Trading pair, such as 'BTCUSD'.", "type": "string"}, "price": {"description": "Trading price. If not set, it will be the market price.", "type": "float"}, "type": {"description": "Order type, 'buy' for buying and'sell' for selling.", "type": "string"}, "volume": {"description": "Trading volume.", "type": "float"}}, "required": ["pair", "type", "volume"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve historical weather data of NoctuaSky for a specified date and location.", "name": "retrieveHistoricalWeather", "parameters": {"properties": {"date": {"description": "The date of the required historical data, in the format of YYYY-MM-DD.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format of 'latitude,longitude'.", "type": "string"}, "unit": {"description": "The temperature unit. The available values are 'C' or 'F', and the default value is 'C'.", "type": "string"}}, "required": ["date", "location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the NoctuaSky weather forecast data for a specified location.", "name": "getForecastData", "parameters": {"properties": {"days": {"description": "The number of forecast days, default is 5.", "type": "integer"}, "includeDetails": {"description": "Whether to include detailed hourly data, default is false.", "type": "boolean"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format of 'latitude,longitude'.", "type": "string"}}, "required": ["location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve NoctuaSky astronomical information for a specified date and location.", "name": "retrieveAstronomicalInfo", "parameters": {"properties": {"date": {"description": "The date for which astronomical information is required, in the format YYYY-MM-DD.", "type": "string"}, "location": {"description": "The latitude and longitude coordinates of the location, in the format 'latitude,longitude'.", "type": "string"}, "objectType": {"description": "The type of astronomical object, such as 'planet','star','moon', etc., default is 'all'.", "type": "string"}}, "required": ["date", "location"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve image and video data of NoctuaSky.", "name": "retrieveMediaData", "parameters": {"properties": {"category": {"description": "Media category, such as 'aurora', 'eclipse', etc., default is 'all'.", "type": "string"}, "date": {"description": "Date of the required media, in the format of YYYY-MM-DD, default is the current date.", "type": "string"}, "mediaType": {"description": "Media type, optional values are 'image' or 'video'.", "type": "string"}}, "required": ["mediaType"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Create an SVG text with a simulated keyboard typing animation.", "name": "createTypingSVG", "parameters": {"properties": {"fontColor": {"description": "Font color. The default value is '#000000'.", "type": "string"}, "fontFamily": {"description": "Font type. The default value is'sans-serif'.", "type": "string"}, "fontSize": {"description": "Font size. The default value is 14.", "type": "integer"}, "text": {"description": "The text content to be displayed.", "type": "string"}, "typingSpeed": {"description": "Typing speed (words per minute). The default value is 60.0.", "type": "float"}}, "required": ["text"], "type": "object"}}, "type": "function"}, {"function": {"description": "Set the speed of the typing animation and the delay before it starts.", "name": "setTypingAnimation", "parameters": {"properties": {"delayBeforeStart": {"description": "The delay time (in milliseconds) before starting to type. The default value is 1000.", "type": "integer"}, "typingSpeed": {"description": "Typing speed (words per minute).", "type": "float"}}, "required": ["typingSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Customize the speed of the deletion animation and the pause duration before retyping.", "name": "customizeDeletionAnimation", "parameters": {"properties": {"deletionSpeed": {"description": "The speed of the deletion animation (words per minute).", "type": "float"}, "pauseBeforeRetyping": {"description": "The pause duration before retyping (in milliseconds). The default value is 500.", "type": "integer"}}, "required": ["deletionSpeed"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the status of the current typing SVG, including text content and animation settings.", "name": "getTypingSVGStatus", "parameters": {"properties": {"svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update the text content and style of an existing typing SVG.", "name": "updateTypingSVG", "parameters": {"properties": {"newFontColor": {"description": "The new font color. The default value is the existing font color.", "type": "string"}, "newFontSize": {"description": "The new font size. The default value is the existing font size.", "type": "integer"}, "newText": {"description": "The new text content. The default value is the existing text.", "type": "string"}, "svgId": {"description": "The unique identifier of the SVG element.", "type": "string"}}, "required": ["svgId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the title of the next upcoming Marvel Cinematic Universe (MCU) movie.", "name": "getNextMCUMovieTitle", "parameters": {"properties": {"language": {"description": "The language of the movie title that the user wishes to obtain. Defaults to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the release date of the next upcoming Marvel Cinematic Universe (MCU) movie.", "name": "getNextMCUMovieReleaseDate", "parameters": {"properties": {"format": {"description": "The date format the user wishes to obtain, defaulting to 'YYYY-MM-DD'.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Calculate and return the remaining days, hours, minutes, and seconds until the release of the next Marvel Cinematic Universe (MCU) movie.", "name": "getMCUMovieCountdown", "parameters": {"properties": {"unit": {"description": "The time unit the user wishes to obtain. The default is 'All'. The available options include 'Days', 'Hours', 'Minutes', 'Seconds'.", "enum": ["All", "Days", "Hours", "Minutes", "Seconds"], "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "List the titles and release dates of all upcoming Marvel Cinematic Universe (MCU) movies.", "name": "listUpcomingMCUMovies", "parameters": {"properties": {"count": {"description": "The number of upcoming movies the user wishes to retrieve, default is 5.", "type": "integer"}, "includeSeries": {"description": "Whether to include upcoming MCU series, default is false.", "type": "boolean"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the detailed information of a specified Marvel Cinematic Universe (MCU) movie, including the cast, director, and plot summary.", "name": "getMCUMovieDetails", "parameters": {"properties": {"details": {"description": "The types of detailed movie information that the user wishes to obtain. By default, all information is included.", "items": {"enum": ["Cast", "Director", "Plot Summary"], "type": "string"}, "type": "array"}, "movieTitle": {"description": "The title of the MCU movie that the user wishes to query.", "type": "string"}}, "required": ["movieTitle"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve the definition of a specific word.", "name": "getWordDefinition", "parameters": {"properties": {"useCanonical": {"description": "Whether to use the canonical form of the word, default is false.", "type": "boolean"}, "word": {"description": "The word to query.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve synonyms of a specific word.", "name": "getSynonyms", "parameters": {"properties": {"limit": {"description": "The limit on the number of synonyms to return, default is 10.", "type": "integer"}, "word": {"description": "The word for which synonyms are to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve example sentences for a specific word.", "name": "getWordExamples", "parameters": {"properties": {"includeDuplicates": {"description": "Whether to include duplicate example sentences, default is false.", "type": "boolean"}, "word": {"description": "The word for which to query example sentences.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the audio pronunciation of a specific word.", "name": "getWordPronunciation", "parameters": {"properties": {"audioFormat": {"description": "The audio format. Supported formats include'mp3' and 'wav'. The default is'mp3'.", "enum": ["mp3", "wav"], "type": "string"}, "word": {"description": "The word whose pronunciation is to be queried.", "type": "string"}}, "required": ["word"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a random quote from a collection around the world.", "name": "getRandomQuote", "parameters": {"properties": {"category": {"description": "The category of the quote, defaulting to all categories.", "type": "string"}, "language": {"description": "The language of the quote, defaulting to English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Search expressions from around the world by keyword or key phrase.", "name": "searchQuotes", "parameters": {"properties": {"author": {"description": "The name of the quote author. Defaults to empty, not restricting the author.", "type": "string"}, "keyword": {"description": "The keyword or phrase used for searching.", "type": "string"}, "limit": {"description": "The number of quotes displayed per page. Defaults to 10.", "type": "integer"}, "page": {"description": "The page number of the results. Defaults to 1.", "type": "integer"}}, "required": ["keyword"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve a list of the world's most popular quotes.", "name": "getPopularQuotes", "parameters": {"properties": {"count": {"description": "The number of popular quotes to retrieve, default is 5.", "type": "integer"}, "since": {"description": "Start date, in the format of YYYY-MM-DD, default is the current date.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Store and share user-generated quotes from around the world.", "name": "storeUserQuote", "parameters": {"properties": {"author": {"description": "The author of the quote.", "type": "string"}, "quote": {"description": "The content of the quote created by the user.", "type": "string"}, "shared": {"description": "Whether to publicly share this quote, default is true.", "type": "boolean"}, "tags": {"description": "Tags related to the quote, default is empty.", "items": {"description": "Tags of the quote.", "type": "string"}, "type": "array"}}, "required": ["quote", "author"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search for photos on Unsplash based on keywords, categories, or users.", "name": "searchPhotos", "parameters": {"properties": {"category": {"description": "The category of the photo. The default value is 'all' (in English).", "type": "string"}, "page": {"description": "The page number of the results. The default value is 1.", "type": "integer"}, "per_page": {"description": "The number of results displayed per page. The default value is 10.", "type": "integer"}, "query": {"description": "Keywords for searching photos. The default value is empty.", "type": "string"}, "username": {"description": "The username of the user. The default value is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the detailed information of a specific photo on Unsplash, including its URL, download link, photographer, and metadata.", "name": "getPhotoDetails", "parameters": {"properties": {"url": {"description": "The link of the photo.", "type": "string"}}, "required": ["url"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get a random photo from the Unsplash collection, either for a specific keyword or from the entire gallery.", "name": "getRandomPhoto", "parameters": {"properties": {"collections": {"description": "An array of specified collection IDs, default is empty.", "items": {"description": "The ID of the collection.", "type": "string"}, "type": "array"}, "count": {"description": "The number of photos to return, default is 1.", "type": "integer"}, "featured": {"description": "Whether to select photos only from featured collections, default is false.", "type": "boolean"}, "query": {"description": "The keyword to search for photos, default is empty.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Access the profile of an Unsplash user and retrieve the photos they have uploaded.", "name": "getUserProfile", "parameters": {"properties": {"stats": {"description": "Whether to include user statistics, default is false.", "type": "boolean"}, "username": {"description": "The username of the user.", "type": "string"}}, "required": ["username"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Search the lyrics of a given song based on the artist and song title.", "name": "searchLyrics", "parameters": {"properties": {"artist": {"description": "The name of the artist, in English", "type": "string"}, "title": {"description": "The title of the song", "type": "string"}}, "required": ["artist", "title"], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve artist information such as biographies, albums, and popular songs.", "name": "getArtistInfo", "parameters": {"properties": {"artist": {"description": "The name of the artist, in English", "type": "string"}, "includeAlbums": {"description": "Whether to include the artist's album information. The default value is true", "type": "boolean"}}, "required": ["artist"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create playlists according to different criteria such as genre or mood.", "name": "createPlaylist", "parameters": {"properties": {"genre": {"description": "Music genre, the default value is 'pop'", "type": "string"}, "limit": {"description": "The number limit of songs in the playlist, the default value is 10", "type": "integer"}, "mood": {"description": "Mood, the default value is 'happy'", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the rankings of the most popular songs, artists, and albums.", "name": "getRankings", "parameters": {"properties": {"genre": {"description": "The music genre. If specified, return the rankings of a specific genre. The default value is 'all'", "type": "string"}, "limit": {"description": "The number of items in the ranking. The default value is 3", "type": "integer"}, "type": {"description": "The type of the ranking, with optional values of'song', 'artist', 'album'", "type": "string"}}, "required": ["type"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve a list of healthcare providers registered in the United States by name, location, or specialty.", "name": "searchProviders", "parameters": {"properties": {"limit": {"description": "The limit on the number of returned results. The default value is 5.", "type": "integer"}, "location": {"description": "The location of the provider, in the format 'City, State'. The default value is an empty string.", "type": "string"}, "name": {"description": "The name of the provider. The default value is an empty string.", "type": "string"}, "specialty": {"description": "The specialty of the provider. The default value is an empty string.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Retrieve the details of a specific provider registered in the United States, including their NPI number, contact information, and practice details.", "name": "getProviderDetails", "parameters": {"properties": {"npi": {"description": "The NPI number of the provider", "type": "string"}}, "required": ["npi"], "type": "object"}}, "type": "function"}, {"function": {"description": "Update and maintain provider information registered in the United States to ensure the most accurate and up-to-date data is provided.", "name": "updateProviderInfo", "parameters": {"properties": {"contact": {"description": "The provider's contact information, default is empty", "properties": {"email": {"description": "Email address, default is empty", "type": "string"}, "phone": {"description": "Contact phone number, default is empty", "type": "string"}}, "type": "object"}, "npi": {"description": "The provider's NPI number", "type": "string"}, "practiceDetails": {"description": "The provider's practice details, default is empty", "properties": {"address": {"description": "Practice address, default is empty", "type": "string"}, "specialty": {"description": "Nature, default is empty", "type": "string"}}, "type": "object"}}, "required": ["npi"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Get a list of all regions in Denmark.", "name": "getProvinces", "parameters": {"properties": {"language": {"description": "The language of the returned data, default is English.", "type": "string"}}, "required": [], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of municipalities in Denmark based on the province.", "name": "getDistrictsByProvince", "parameters": {"properties": {"includeCities": {"description": "Whether to include detailed city information, default is false.", "type": "boolean"}, "limit": {"description": "The number of cities to return, default is 10.", "type": "integer"}, "province": {"description": "The name of the region.", "type": "integer"}}, "required": ["province"], "type": "object"}}, "type": "function"}, {"function": {"description": "Search for specific location information in Denmark.", "name": "searchLocation", "parameters": {"properties": {"locationType": {"description": "Location type, such as 'city', 'village', etc. Defaults to empty, searching for all types.", "type": "string"}, "maxResults": {"description": "The maximum number of returned results, default is 10.", "type": "integer"}, "query": {"description": "Search query string.", "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get detailed information about a specific location in Denmark.", "name": "getLocationDetails", "parameters": {"properties": {"locationId": {"description": "The unique identifier of the location.", "type": "integer"}}, "required": ["locationId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the list of streets in Denmark based on the district.", "name": "getStreetsByDistrict", "parameters": {"properties": {"districtId": {"description": "The unique identifier of the district.", "type": "integer"}, "includeCoordinates": {"description": "Whether to include the coordinate information of the streets, default is false.", "type": "boolean"}}, "required": ["districtId"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get the demographic data of Denmark in the past 10 years.", "name": "getPopulationStatistics", "parameters": {"properties": {"region": {"description": "The region to be queried, defaulting to the whole country.", "type": "string"}, "year": {"description": "The year to be queried.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}, {"function": {"description": "Query specific Danish government data based on keywords, location, or data filters.", "name": "searchGovernmentData", "parameters": {"properties": {"filters": {"description": "Additional filters to be applied to the query.", "properties": {"endDate": {"description": "End date, defaulting to the current year.", "type": "string"}, "startDate": {"description": "Start date, defaulting to the current year.", "type": "string"}}, "type": "object"}, "keywords": {"description": "List of keywords for the query.", "items": {"type": "string"}, "type": "array"}, "locations": {"description": "List of geographies for the query, defaulting to the whole country.", "items": {"type": "string"}, "type": "array"}}, "required": ["keywords"], "type": "object"}}, "type": "function"}, {"function": {"description": "Create reports and dashboards containing data from the Danish government using advanced data visualization capabilities.", "name": "createDataVisualization", "parameters": {"properties": {"dataSources": {"description": "List of data sources.", "items": {"type": "string"}, "type": "array"}, "includeCharts": {"default": true, "description": "Whether to include charts, default is true.", "type": "boolean"}, "reportType": {"description": "Report type, such as 'Annual Report', 'Quarterly Report', etc.", "type": "string"}}, "required": ["reportType", "dataSources"], "type": "object"}}, "type": "function"}, {"function": {"description": "Get Danish historical data that can be traced back from the 1980s to 10 years ago.", "name": "getHistoricalData", "parameters": {"properties": {"dataType": {"description": "Data type, such as 'population', 'economy', etc.", "type": "string"}, "endYear": {"description": "End year, defaulting to 10 years ago.", "type": "integer"}, "startYear": {"default": 1980, "description": "Start year, defaulting to 1980.", "type": "integer"}}, "required": ["dataType"], "type": "object"}}, "type": "function"}, {"function": {"description": "Surrounding search: Users can easily search for nearby restaurants, entertainment venues, and various other dining and leisure spots, enabling them to quickly find service and entertainment options in the vicinity.", "name": "searchNearbyLocation", "parameters": {"properties": {"address": {"description": "The destination the user wishes to travel to", "type": "string"}, "keyword": {"description": "Keywords for the type of venue the user wants to search for, such as restaurants, banks, hospitals", "type": "string"}}, "required": ["address", "keyword"], "type": "object"}}, "type": "function"}, {"function": {"description": "Obtain demographic data of the Netherlands.", "name": "getDutchPopulationStatistics", "parameters": {"properties": {"ageGroup": {"description": "Array of age groups. Defaults to empty, indicating all age groups.", "items": {"description": "The range of the age group, such as '18-25'.", "type": "string"}, "type": "array"}, "region": {"description": "The code of the specified region. Defaults to national level.", "type": "string"}, "year": {"description": "The year for which statistical data needs to be obtained.", "type": "integer"}}, "required": ["year"], "type": "object"}}, "type": "function"}]
[{"function": {"description": "Retrieve Twitter tweets based on search terms and hashtags.", "name": "searchTweets", "parameters": {"properties": {"count": {"description": "The number of tweets to return. The default value is 10.", "type": "integer"}, "lang": {"description": "The language code of the tweets. The default value is 'en'.", "type": "string"}, "query": {"description": "Search terms or hashtags.", "type": "string"}, "result_type": {"description": "The type of results. The optional values are'recent', 'popular','mixed'. The default value is'mixed'.", "enum": ["recent", "popular", "mixed"], "type": "string"}}, "required": ["query"], "type": "object"}}, "type": "function"}, {"function": {"description": "Query the detailed information of Twitter tweets.", "name": "searchTweetsDetails", "parameters": {"properties": {"tweet_id": {"description": "Tweet ID.", "type": "string"}}, "required": ["tweet_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Stream Twitter tweets in real-time.", "name": "streamTweets", "parameters": {"properties": {"locations": {"description": "Geographical coordinates, in the format of [longitude, latitude], default is empty.", "items": {"type": "float"}, "type": "array"}, "track": {"description": "An array of keywords to track.", "items": {"type": "string"}, "type": "array"}}, "required": ["track"], "type": "object"}}, "type": "function"}, {"function": {"description": "Provide Twitter user and account information, as well as the most recently liked tweets.", "name": "getUserInfo", "parameters": {"properties": {"include_entities": {"description": "Whether to include entity information. The default value is false.", "type": "boolean"}, "user_id": {"description": "The ID of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Access Twitter followers and friends list.", "name": "getFriendsList", "parameters": {"properties": {"count": {"description": "The number of friends returned per request. The default value is 20.", "type": "integer"}, "cursor": {"description": "The cursor used for pagination. The default value is -1.", "type": "integer"}, "user_id": {"description": "The ID of the user.", "type": "string"}}, "required": ["user_id"], "type": "object"}}, "type": "function"}, {"function": {"description": "Represents posting a tweet on behalf of a Twitter user.", "name": "postTweet", "parameters": {"properties": {"auto_populate_reply_metadata": {"description": "Whether to automatically populate reply metadata. The default value is false.", "type": "boolean"}, "in_reply_to_status_id": {"description": "If the tweet is a reply, specify the ID of the original tweet. Defaults to empty.", "type": "string"}, "media_ids": {"description": "An array of media file IDs used to include images or videos in the tweet. Defaults to empty.", "items": {"type": "string"}, "type": "array"}, "status": {"description": "The content of the tweet.", "type": "string"}}, "required": ["status"], "type": "object"}}, "type": "function"}]
